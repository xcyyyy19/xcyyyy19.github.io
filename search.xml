<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>大一社团练习与竞赛代码笔记</title>
    <url>/2023/03/11/ACM/C1-%E5%A4%A7%E4%B8%80%E7%A4%BE%E5%9B%A2%E7%BB%83%E4%B9%A0%E4%B8%8E%E7%AB%9E%E8%B5%9B%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="附件见文末"><a href="#附件见文末" class="headerlink" title="附件见文末"></a>附件见文末</h2><p><img src="/../pic/C1/1.png"><br><img src="/../pic/C1/2.png"><br><img src="/../pic/C1/3.png"><br><img src="/../pic/C1/4.png"></p>
<h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p><a href="https://xcyyyy19.github.io/code/C1/lxhcode.zip">代码下载链接</a></p>
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Java网站代码（Java结业项目）【待上传】</title>
    <url>/2023/03/11/Java/J1-Java%E7%BD%91%E7%AB%99%E4%BB%A3%E7%A0%81%EF%BC%88Java%E7%BB%93%E4%B8%9A%E9%A1%B9%E7%9B%AE%EF%BC%89/</url>
    <content><![CDATA[<ul>
<li><input disabled="" type="checkbox"> 当时老师要求模仿的网站是啥相关的来着？主力机上的Java代码放哪个云上了？</li>
</ul>
]]></content>
      <categories>
        <category>code</category>
        <category>project</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫&amp;数据分析&amp;前后端代码（毕设）【待上传】</title>
    <url>/2023/03/13/Python/P3-Python%E7%88%AC%E8%99%AB-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%EF%BC%88%E6%AF%95%E8%AE%BE%EF%BC%89/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>code</category>
        <category>project</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>大二社团练习与竞赛代码笔记</title>
    <url>/2023/03/11/ACM/C2-%E5%A4%A7%E4%BA%8C%E7%A4%BE%E5%9B%A2%E7%BB%83%E4%B9%A0%E4%B8%8E%E7%AB%9E%E8%B5%9B%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="附件见文末"><a href="#附件见文末" class="headerlink" title="附件见文末"></a>附件见文末</h2><p><img src="/../pic/C2/1.png"><br><img src="/../pic/C2/2.png"><br><img src="/../pic/C2/3.png"></p>
<h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p><a href="https://xcyyyy19.github.io/code/C2/LxhCode2.zip">代码下载链接</a></p>
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫练习代码与笔记（社工）</title>
    <url>/2023/03/12/Python/P2-Python%E7%88%AC%E8%99%AB%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81%E4%B8%8E%E7%AC%94%E8%AE%B0%EF%BC%88%E7%A4%BE%E5%B7%A5%EF%BC%89/</url>
    <content><![CDATA[<p>声明：仅供学习使用</p>
<p>以下黑色代码块包含入门时的学习链接以及中文标题</p>
<ul>
<li><p><input disabled="" type="checkbox"> 
待上传html链接版本</p>
</li>
<li><p><input disabled="" type="checkbox"> 
待上传代码</p>
<pre><code>                  &lt;H3 ADD_DATE=&quot;1678696134&quot; LAST_MODIFIED=&quot;1678696150&quot;&gt;河蟹&lt;/H3&gt;
                  &lt;DL&gt;
                      &lt;p&gt;
                          &lt;DT&gt;
                              &lt;H3 ADD_DATE=&quot;1678696134&quot; LAST_MODIFIED=&quot;1678696134&quot;&gt;github的河蟹&lt;/H3&gt;
                              &lt;DL&gt;
                                  &lt;p&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/lymwpc/phone_email_extract&quot; ADD_DATE=&quot;1678696134&quot;&gt;GitHub - lymwpc/phone_email_extract: 一个python的正则表达式模块，可以完成给定页面内容中符合格式要求的手机号和邮箱的提取&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/hahaxiaowei/spring-boot-login&quot; ADD_DATE=&quot;1678696134&quot;&gt;GitHub - hahaxiaowei/spring-boot-login: 里面包含了登录所需的所有接口，包括了手机号登录，邮箱登录，用户名登录&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/fenglingdeyi/Regular&quot; ADD_DATE=&quot;1678696134&quot;&gt;GitHub - fenglingdeyi/Regular: 该项目是对一些验证的封装，在登录注册中进行身份证、手机号、邮箱等验证的封装&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/hellozhengmingming/Utility&quot; ADD_DATE=&quot;1678696134&quot;&gt;GitHub - hellozhengmingming/Utility: 公共库，主要是字符串的判断，如：手机号，邮箱，身份证号的验证，颜色的转换，&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/toviLau/angular.strCover&quot; ADD_DATE=&quot;1678696134&quot;&gt;GitHub - toviLau/angular.strCover: 这是一个angular字符串格式化的过滤器，支持手机号 / 固定电话 / 银行卡 / 普通数字卡号 / 身份证 / 姓名 / 用户名 / 电子邮箱&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/PhoenixHai/Mobile-area&quot; ADD_DATE=&quot;1678696134&quot;&gt;GitHub - PhoenixHai/Mobile-area: 手机归属地号段大全，提ISSUE留下邮箱。&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/DandreYang/YFValidate&quot; ADD_DATE=&quot;1678696134&quot;&gt;GitHub - DandreYang/YFValidate: 用于手机号、邮箱、车牌号码、车架号、银行卡号、身份证号、URL等格式的验证&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/shuaiwang007/RE&quot; ADD_DATE=&quot;1678696134&quot;&gt;GitHub - shuaiwang007/RE: 正则使用的简单封装，验证用户名、密码、手机号、邮箱等等，只要一句话&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/Fairy-happy/checkNumber&quot; ADD_DATE=&quot;1678696134&quot;&gt;GitHub - Fairy-happy/checkNumber: 集成了检验各种号码包括手机号，邮箱，车牌合法性的方法&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/Conquer17/iOS-SQRegularExpression&quot; ADD_DATE=&quot;1678696134&quot;&gt;GitHub - Conquer17/iOS-SQRegularExpression: 手机号、密码、身份证号、银行卡号、邮箱等常用正则表达式&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/ChenZhongPu/checkReg&quot; ADD_DATE=&quot;1678696134&quot;&gt;GitHub - ChenZhongPu/checkReg: 检测一个邮箱或手机号在互联网上的注册情况&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/yshysh123/regular-expression&quot; ADD_DATE=&quot;1678696134&quot;&gt;GitHub - yshysh123/regular-expression: 正则验证QQ号，邮箱，手机，生日&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/fighting41love/funNLP&quot; ADD_DATE=&quot;1678696134&quot;&gt;超级丰富的re&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/zhengboss/sina_weibo_spider/blob/spider/target/test-classes/com/ideepwise/AppTest.class&quot; ADD_DATE=&quot;1678696134&quot;&gt;sina_weibo_spider/AppTest.class at spider · zhengboss/sina_weibo_spider · GitHub&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/zhengboss/sina_weibo_spider&quot; ADD_DATE=&quot;1678696134&quot;&gt;GitHub - zhengboss/sina_weibo_spider: 使用htmlunit框架的新浪微博爬虫&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/wshuai17//scrapy_spider&quot; ADD_DATE=&quot;1678696134&quot;&gt;王帅的spider&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/wshuai17/scrapy_spider/blob/master/first_spider/spiders/spider1.py&quot; ADD_DATE=&quot;1678696134&quot;&gt;ws_spider&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/PhoenixHai/Mobile-area/blob/master/README.md&quot; ADD_DATE=&quot;1678696134&quot;&gt;三年前的所有手机号归属地&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/zhaozichuan/wxby&quot; ADD_DATE=&quot;1678696134&quot;&gt;GitHub - zhaozichuan/wxby&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/eninem123/code&quot; ADD_DATE=&quot;1678696134&quot;&gt;GitHub - eninem123/code: 全是各种爬虫 京东，谷歌搜索，大象医生，ip池，百度搜索web实现，豆瓣，itchat,qq爬虫，词云，微博爬虫，知乎爬虫，微信机器人&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/VincentSit/ChinaMobilePhoneNumberRegex&quot; ADD_DATE=&quot;1678696134&quot;&gt;中国电话正则&lt;/A&gt;
                                      &lt;DT&gt;
                                          &lt;A HREF=&quot;https://github.com/dunizb/JS-Regular-expression-awesome&quot; ADD_DATE=&quot;1678696134&quot;&gt;各种re&lt;/A&gt;
                              &lt;/DL&gt;
                              &lt;p&gt;
                                  &lt;DT&gt;
                                      &lt;H3 ADD_DATE=&quot;1678696134&quot; LAST_MODIFIED=&quot;1678696134&quot;&gt;现在用不上的河蟹&lt;/H3&gt;
                                      &lt;DL&gt;
                                          &lt;p&gt;
                                              &lt;DT&gt;
                                                  &lt;A HREF=&quot;https://juejin.im/entry/59a764b96fb9a0249c007520&quot; ADD_DATE=&quot;1678696134&quot;&gt;利用搜索引擎做一些「不可描述」的事情 - 后端 - 掘金&lt;/A&gt;
                                              &lt;DT&gt;
                                                  &lt;A HREF=&quot;https://www.zoomeye.org/&quot; ADD_DATE=&quot;1678696134&quot;&gt;ZoomEye - Cyberspace Search Engine&lt;/A&gt;
                                              &lt;DT&gt;
                                                  &lt;A HREF=&quot;https://www.shodan.io/?language=en&quot; ADD_DATE=&quot;1678696134&quot;&gt;Shodan&lt;/A&gt;
                                              &lt;DT&gt;
                                                  &lt;A HREF=&quot;https://www.tianxia.la/wap/news/1628.html&quot; ADD_DATE=&quot;1678696134&quot;&gt;暗网&lt;/A&gt;
                                              &lt;DT&gt;
                                                  &lt;A HREF=&quot;http://www.hackdig.com/wap/hacktool.php&quot; ADD_DATE=&quot;1678696134&quot;&gt;黑客工具导航&lt;/A&gt;
                                              &lt;DT&gt;
                                                  &lt;A HREF=&quot;https://dns.aizhan.com/&quot; ADD_DATE=&quot;1678696134&quot;&gt;IP反查域名&lt;/A&gt;
                                              &lt;DT&gt;
                                                  &lt;A HREF=&quot;http://www.hackdig.com/?09/hack-13542.htm&quot; ADD_DATE=&quot;1678696134&quot;&gt;常用的渗透测试工具型网站整合【分享】_黑客技术&lt;/A&gt;
                                              &lt;DT&gt;
                                                  &lt;A HREF=&quot;https://who.is/&quot; ADD_DATE=&quot;1678696134&quot;&gt;WHOIS（ip 域名）&lt;/A&gt;
                                              &lt;DT&gt;
                                                  &lt;A HREF=&quot;https://booter.xyz/&quot; ADD_DATE=&quot;1678696134&quot;&gt;XyZ Booter/Stresser - TOP 1 IP Stresser&lt;/A&gt;
                                              &lt;DT&gt;
                                                  &lt;A HREF=&quot;https://thief.one/2017/05/19/1/&quot; ADD_DATE=&quot;1678696134&quot;&gt;【渗透神器系列】搜索引擎 | nMask &amp;#39;s Blog&lt;/A&gt;
                                              &lt;DT&gt;
                                                  &lt;A HREF=&quot;https://www.seebug.org/&quot; ADD_DATE=&quot;1678696134&quot;&gt;知道创宇 Seebug 漏洞平台 - 洞悉漏洞，让你掌握第一手漏洞情报！&lt;/A&gt;
                                              &lt;DT&gt;
                                                  &lt;A HREF=&quot;https://www.cnblogs.com/hackerschina/p/5063649.html&quot; ADD_DATE=&quot;1678696134&quot;&gt;2015.12.21日官方最新公告！中国骇客云安全响应平台正式上线啦！ - 中国寒龙联盟核心管理 - 博客园&lt;/A&gt;
                                      &lt;/DL&gt;
                                      &lt;p&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;https://zhuanlan.zhihu.com/p/39277625&quot; ADD_DATE=&quot;1678696134&quot;&gt;人肉搜索的思路分享／信息挖掘与情报收集 - 知乎&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;https://blog.csdn.net/huqianxun/article/details/54646497&quot; ADD_DATE=&quot;1678696134&quot;&gt;通过邮箱查询手机号/通过手机号查询邮箱【人肉搜索原理】 - 绫里千寻的栏目 - CSDN博客&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;https://blog.csdn.net/zrools/article/details/50678365&quot; ADD_DATE=&quot;1678696134&quot;&gt;手机号查QQ号（Python3版） - zrools的博客 - CSDN博客&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;https://www.jianshu.com/p/d73488564356&quot; ADD_DATE=&quot;1678696134&quot;&gt;我是如何通过手机号码得到ta的信息 - 瞬间秒杀 - 简书&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;https://www.52pojie.cn/thread-385527-1-1.html&quot; ADD_DATE=&quot;1678696134&quot;&gt;手机号2QQ号 - 『原创发布区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|破解软件|www.52pojie.cn&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;https://publicdbhost.dmca.gripe/&quot; ADD_DATE=&quot;1678696134&quot;&gt;Index of /&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;https://www.v2ex.com/t/416708&quot; ADD_DATE=&quot;1678696134&quot;&gt;那个查询你注册过哪些网站的网站又起死回生了 - V2EX&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;http://site2.sjk.space/dosgk1.php&quot; ADD_DATE=&quot;1678696134&quot;&gt;社工库免费查询&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;http://www.anonymouschina.org/?p=762&quot; ADD_DATE=&quot;1678696134&quot;&gt;中国骇客云教你社工之手机信息查询新技能！ – 中国骇客云平台官网&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;https://blog.csdn.net/Fly_hps/article/details/79406517&quot; ADD_DATE=&quot;1678696134&quot;&gt;11、信息收集篇————钟馗之眼使用 - Fly_鹏程万里 - CSDN博客&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;http://www.anonymouschina.org/&quot; ADD_DATE=&quot;1678696134&quot;&gt;中国骇客云平台官网 – Chinese hackers cloud platform international website&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;https://discord.en.softonic.com/windows/alternatives/free&quot; ADD_DATE=&quot;1678696134&quot;&gt;联系方式&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;https://www.5566.net/hack-.htm&quot; ADD_DATE=&quot;1678696134&quot;&gt;【黑客_网络安全_论坛】_中国精彩网址『 5566.NET，5566.ORG 』&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;https://www.zhihu.com/question/20289531/answer/277240688&quot; ADD_DATE=&quot;1678696134&quot;&gt;怎样防范被人肉搜索？ - 知乎&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;https://bbs.ichunqiu.com/thread-29654-1-1.html&quot; ADD_DATE=&quot;1678696134&quot;&gt;常见社工方法以及如何防社工_白帽子技术/思路_i春秋社区-分享你的技术，为安全加点温度.&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;http://whois.chinaz.com/reverse?ddlSearchMode=3&quot; ADD_DATE=&quot;1678696134&quot;&gt;域名Whois反查 - 站长之家&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;http://byr.wiki/&quot; ADD_DATE=&quot;1678696134&quot;&gt;Byr.wiki·北邮人导航&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;http://search.chongbuluo.com/&quot; ADD_DATE=&quot;1678696134&quot;&gt;快搜 - 搜索快人一步 - Google&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;http://www.chongbuluo.com/forum.php&quot; ADD_DATE=&quot;1678696134&quot;&gt;虫部落社区 — 在这里发现更大的世界！&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;https://www.qichacha.com/&quot; ADD_DATE=&quot;1678696134&quot;&gt;企查查-工商信息查询-公司企业注册信息查询-全国企业信用信息公示系统&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;https://www.linkedin.com/?trk=brandpage_baidu_pc-mainlink&quot; ADD_DATE=&quot;1678696134&quot;&gt;LinkedIn：登入或註冊&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;https://unroll.me/&quot; ADD_DATE=&quot;1678696134&quot;&gt;Unsubscribe from emails, instantly - Unroll.Me&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;https://haoma.baidu.com/query&quot; ADD_DATE=&quot;1678696134&quot;&gt;百度号码认证平台-号码查询&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;http://www.cellmap.cn/&quot; ADD_DATE=&quot;1678696134&quot;&gt;cellmap|基站查询|基站定位&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;http://www.gpsspg.com/bs.htm&quot; ADD_DATE=&quot;1678696134&quot;&gt;基站定位查询 — 移动基站联通基站电信基站 LBS —GPSspg&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;http://www.sohu.com/a/237452060_704736&quot; ADD_DATE=&quot;1678696134&quot;&gt;推荐几个手机基站位置查询的公开平台&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;http://www.cnblogs.com/cellmap/p/3669944.html&quot; ADD_DATE=&quot;1678696134&quot;&gt;Cellmap 基站查询 For Pc - cellmap - 博客园&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;http://www.researchclinic.net/&quot; ADD_DATE=&quot;1678696134&quot;&gt;Research Clinic&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;https://www.linkedin.com/&quot; ADD_DATE=&quot;1678696134&quot;&gt;LinkedIn：登入或註冊&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;http://s.xysjk.com/detail.aspx?sel=1&amp;keyword=17585468883&quot; ADD_DATE=&quot;1678696134&quot;&gt;信用数据库&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;http://s.xysjk.com/search.aspx&quot; ADD_DATE=&quot;1678696134&quot;&gt;信用数据库(www.xysjk.com) - 评论列表&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;https://cn.gijn.org/2015/10/15/bbc%E6%90%9C%E7%B4%A2%E4%B8%93%E5%AE%B6%EF%BC%9A%E5%8D%81%E6%AC%BE%E5%BC%BA%E5%8A%9B%E4%BA%BA%E8%82%89%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7/&quot; ADD_DATE=&quot;1678696134&quot;&gt;BBC搜索专家：十款强力“人肉”搜索工具 | 全球深度报道网&lt;/A&gt;
                                          &lt;DT&gt;
                                              &lt;A HREF=&quot;https://blog.csdn.net/lzhd24/article/details/50667572&quot; ADD_DATE=&quot;1678696134&quot;&gt;Setoolkit社会工程学工具包 - 飞沙风中转 - CSDN博客&lt;/A&gt;
</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python大数据分析（企业竞赛项目）</title>
    <url>/2023/03/11/Python/P1-Python%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%88%E4%BC%81%E4%B8%9A%E7%AB%9E%E8%B5%9B%E9%A1%B9%E7%9B%AE%EF%BC%89/</url>
    <content><![CDATA[<p><a href="https://xcyyyy19.github.io/pic/P1/unicom.zip">银联数据分析代码下载链接（含原脱敏数据及交叉数据）</a><br><a href="https://xcyyyy19.github.io/pic/P1/unipay.zip">联通数据分析代码下载链接（含原脱敏数据及交叉数据）</a></p>
<p>【【【【【【【【【【【【【该完善这里了！！！！！！】】】】】】】】】】】】】</p>
<p>1.代码设计想法展现，数据切入点展现</p>
<p>2.获奖证书及答辩现场</p>
]]></content>
      <categories>
        <category>code</category>
        <category>project</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>网站完善与专业学习ToDoList</title>
    <url>/2023/03/08/%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/Z1-hello-world/</url>
    <content><![CDATA[<h2 id="网页完善计划"><a href="#网页完善计划" class="headerlink" title="网页完善计划"></a>网页完善计划</h2><ul>
<li><input checked="" disabled="" type="checkbox"> 初步搞清楚hexo框架文件体系</li>
<li><input checked="" disabled="" type="checkbox"> 学markdown</li>
<li><input checked="" disabled="" type="checkbox"> 看看hexo框架和自己写的项目有什么区别</li>
<li><input checked="" disabled="" type="checkbox"> 试错，随便上传点东西</li>
<li><input checked="" disabled="" type="checkbox"> 新电脑里想上传的的文件，全部搞成markdown格式，并进行精修</li>
<li><input checked="" disabled="" type="checkbox"> 上传、调试</li>
<li><input checked="" disabled="" type="checkbox"> 写个专门用来做计划的md</li>
<li><input checked="" disabled="" type="checkbox"> 把确定要发布的所有文章进行分类和贴标签</li>
<li><input disabled="" type="checkbox"> 把“我是谁，我在干什么”搞好【非常重要！！！！】</li>
<li><input disabled="" type="checkbox"> 把“关于我”做成网站说明书</li>
<li><input checked="" disabled="" type="checkbox"> 搞清楚最近的上传幽灵事件，是浏览器缓存问题还是github部署延迟问题</li>
<li><input checked="" disabled="" type="checkbox"> 为什么hexo s本地结束后，网站部署才能更新？幽灵事件就是因为这个？翻翻逻辑</li>
<li><input checked="" disabled="" type="checkbox"> 看看图片是hexo内嵌上传好，还是单独列个文件夹直接部署然后导入好</li>
<li><input checked="" disabled="" type="checkbox"> 深入搞清楚hexo框架文件体系，花一个点专门看整个代码构架，找找想自定义的其它地方都有啥<ul>
<li><input checked="" disabled="" type="checkbox"> 侧边栏相关的几个文件</li>
<li><input checked="" disabled="" type="checkbox"> 告示板</li>
<li><input checked="" disabled="" type="checkbox"> 侧边栏更改</li>
<li><input checked="" disabled="" type="checkbox"> 底下的浙江改成自己家这边</li>
<li><input checked="" disabled="" type="checkbox"> 有空的话弄一个置顶栏</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> 看看代码是上传到hexo内嵌里好，还是直接上传部署好，还是搞个预览再加个下载链接好。</li>
<li><input disabled="" type="checkbox"> 看看markdown图片怎么排版，和vue一样能调吗？</li>
</ul>
<h2 id="代码翻出来"><a href="#代码翻出来" class="headerlink" title="代码翻出来"></a>代码翻出来</h2><ul>
<li><input checked="" disabled="" type="checkbox"> 高级网页设计（HtmlCssVue）</li>
<li><input checked="" disabled="" type="checkbox"> 数据库（Mysql）</li>
<li><input checked="" disabled="" type="checkbox"> 大一竞赛代码（- [ ] 待上传）</li>
<li><input checked="" disabled="" type="checkbox"> 把大一竞赛代码的目录结构优化一下</li>
<li><input checked="" disabled="" type="checkbox"> 大二竞赛代码（- [ ] 待上传）</li>
<li><input checked="" disabled="" type="checkbox"> 把大二竞赛代码的目录结构优化一下</li>
<li><input disabled="" type="checkbox"> JavaWeb（翻翻主力机，把便携机的环境配好）</li>
<li><input disabled="" type="checkbox"> 毕设</li>
</ul>
<h2 id="读读代码，看看它还认不认主了，一群逆子"><a href="#读读代码，看看它还认不认主了，一群逆子" class="headerlink" title="读读代码，看看它还认不认主了，一群逆子"></a>读读代码，看看它还认不认主了，一群逆子</h2><ul>
<li><input checked="" disabled="" type="checkbox"> 数据分析代码</li>
<li><input checked="" disabled="" type="checkbox"> 高级网页设计</li>
<li><input disabled="" type="checkbox"> 数据库</li>
<li><input disabled="" type="checkbox"> JavaWeb</li>
<li><input disabled="" type="checkbox"> 毕设</li>
</ul>
<h2 id="便携用电脑环境配置"><a href="#便携用电脑环境配置" class="headerlink" title="便携用电脑环境配置"></a>便携用电脑环境配置</h2><ul>
<li><input checked="" disabled="" type="checkbox"> annaconda系列</li>
<li><input checked="" disabled="" type="checkbox"> JetBrains系列</li>
<li><input checked="" disabled="" type="checkbox"> 找找JetBrains破解激活</li>
<li><input disabled="" type="checkbox"> Vscode</li>
<li><input disabled="" type="checkbox"> 看看主力机Vscode自定义的两个配置是哪个更好使来着？</li>
</ul>
]]></content>
      <categories>
        <category>必看！我是谁，我在干什么</category>
      </categories>
      <tags>
        <tag>profile</tag>
      </tags>
  </entry>
  <entry>
    <title>Python网站--废品回收（数据库结业项目）</title>
    <url>/2023/03/15/Python/P5-Python%E7%BD%91%E7%AB%99--%E5%BA%9F%E5%93%81%E5%9B%9E%E6%94%B6%EF%BC%88%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E4%B8%9A%E9%A1%B9%E7%9B%AE%EF%BC%89/</url>
    <content><![CDATA[<h2 id="基于Django的废品回收网站设计与实现（附件见文末）"><a href="#基于Django的废品回收网站设计与实现（附件见文末）" class="headerlink" title="基于Django的废品回收网站设计与实现（附件见文末）"></a>基于Django的废品回收网站设计与实现（附件见文末）</h2><h2 id="系统原型"><a href="#系统原型" class="headerlink" title="系统原型"></a>系统原型</h2><p>进入系统登录页面，在该部分向<img src="/../pic/media-fp/0a11328ae013230e51ec2122e8c73146.jpeg" alt="登录页面">用户提供登录、注册功能。</p>
<p>图 4.3 登录原型图</p>
<p>用户进入用户主页后，可以看到自己的昵称，以及侧边栏的功能选项，点击个人中心按钮进入个人中心页面填写个人信息，用户个人中心页原型图如图 4.4 所示。</p>
<p><img src="/../pic/media-fp/41231ccab047ccc8732e1e56347d8482.png" alt="用户个人中心"></p>
<p>图 4.4 用户个人中心页原型图</p>
<p>当用户进入首页点击废品回收按钮进行废品回收下单、提交订单、查看订单，用户</p>
<p>废品回收下单页原型图如图 4.5 所示。</p>
<p><img src="/../pic/media-fp/7498b440d234dfb821ddb787290a14e5.png" alt="用户废品回收下单"></p>
<p>图 4.5 用户废品回收下单页原型图</p>
<p>当商户进入首页可以看到自己的昵称、侧边栏的功能选项、订单列表，点击个人中心按钮进入个人中心页面填写个人信息，商户进行接单并价格评估、提交后跳转到我的订单页面、查看物流信息，商户接单并价格评估页原型图如图 4.6 所示。</p>
<p><img src="/../pic/media-fp/140bd019df0d9c9a446c30cedb55637b.png" alt="1650091871(1)"></p>
<p>图 4.6 商户接单页原型图</p>
<p>当取货员进入首页可以看到自己的昵称、侧边栏的功能选项、订单列表，点击个人中心按钮进入个人中心页面填写个人信息，取货员进行接单并在我的订单进行取送更新、查看物流信息，取货员在我的订单页进行取送更新原型图如图 4.7 所示。</p>
<p><img src="/../pic/media-fp/a1da75dc091b0ea5d2f40c0d23b103ee.jpeg" alt="1650092841(1)"></p>
<p>图 4.7 取货员更新取货信息原型图</p>
<p>商户对取货员返回的回收单进行确认并支付，商户支付原型图如图 4.8 所示。</p>
<p><img src="/../pic/media-fp/a4249b2ca3270865d7d1ecaf26399ede.jpeg" alt="1650093591(1)"></p>
<p>图 4.8 商户支付页原型图</p>
<p>用户对商户及取货员评价原型图如图 4.9 所示，取货员在我的评价页查看评价如图</p>
<p>4.10 所示。</p>
<p><img src="/../pic/media-fp/84105aeafa7c5bf079182f776d9ce0c2.png" alt="1650093839(1)"></p>
<p>图 4.9 用户评价页原型图</p>
<p><img src="/../pic/media-fp/8e86672c1fd2c26db40a57bbce1b3a68.jpeg" alt="1650094008(1)"></p>
<p>图 4.10 取货员查看评价页原型图</p>
<h2 id="系统结构设计"><a href="#系统结构设计" class="headerlink" title="系统结构设计"></a>系统结构设计</h2><p><strong>第 4 章 系统设计</strong></p>
<p>系统分为 4 个角色，前端为用户、商户、取货员，后端管理员负责对信息与用户身份的审核、账户管理、订单信息管理、回收物品种类管理等功能。系统功能结构图如图</p>
<ol>
<li>所示。</li>
</ol>
<p><img src="/../pic/media-fp/864dad1dd7c74064545295cbd6797623.jpeg" alt="1650098816(1)"></p>
<p>图 4.1 体系功能结构图</p>
<h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="E-R-图"><a href="#E-R-图" class="headerlink" title="E-R 图"></a>E-R 图</h3><p>数据库设计的 E-R 图如图 4.2 所示。</p>
<p><img src="/../pic/media-fp/7c5162deeb0293f04285f66386a091af.jpeg" alt="废品回收E-R图"></p>
<p>图 4.2 系统 E-R 图</p>
<h3 id="表结构设计"><a href="#表结构设计" class="headerlink" title="表结构设计"></a>表结构设计</h3><p>用户登录需要账户密码，下单时需要填写姓名、联系电话及地址便于商户与取货员查看订单信息取货回收，注册时需要有 id 账号方便管理员管理。用户信息表结构如表</p>
<p>4.1 所示。</p>
<p>表 4.1 用户表</p>
<table>
<thead>
<tr>
<th><strong>字段名</strong></th>
<th><strong>名称</strong></th>
<th><strong>数据类型</strong></th>
<th><strong>约束</strong></th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>用户 id</td>
<td>int(11)</td>
<td>PK， AUTO_INCREMENT ,not null</td>
</tr>
<tr>
<td>username</td>
<td>账户</td>
<td>varchar(32)</td>
<td>not null</td>
</tr>
<tr>
<td>password</td>
<td>密码</td>
<td>varchar(32)</td>
<td>not null</td>
</tr>
<tr>
<td>name</td>
<td>姓名</td>
<td>varchar(20)</td>
<td></td>
</tr>
<tr>
<td>phone</td>
<td>电话</td>
<td>varchar(11)</td>
<td></td>
</tr>
<tr>
<td>addr</td>
<td>地址</td>
<td>varchar(256)</td>
<td></td>
</tr>
</tbody></table>
<p>商户登录需要账户密码，接单时需要填写姓名、联系电话及地址便于取货员查看信息送货，注册时需要有 id 账号方便管理员管理。商户表结构如表 4.2 所示。</p>
<p>表 4.2 商户表</p>
<table>
<thead>
<tr>
<th><strong>字段名</strong></th>
<th><strong>名称</strong></th>
<th><strong>数据类型</strong></th>
<th><strong>约束</strong></th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>用户 id</td>
<td>int(11)</td>
<td>PK， AUTO_INCREMENT ，not null</td>
</tr>
<tr>
<td>username</td>
<td>账户</td>
<td>varchar(32)</td>
<td>not null</td>
</tr>
<tr>
<td>password</td>
<td>密码</td>
<td>varchar(32)</td>
<td>not null</td>
</tr>
<tr>
<td>name</td>
<td>姓名</td>
<td>varchar(20)</td>
<td></td>
</tr>
<tr>
<td>phone</td>
<td>电话</td>
<td>varchar(11)</td>
<td></td>
</tr>
<tr>
<td>addr</td>
<td>地址</td>
<td>varchar(256)</td>
<td></td>
</tr>
</tbody></table>
<p>取货员登录需要账户密码，接单时需要填写姓名、联系电话便于用户及商户查看信配送信息，有问题便于联系，注册时需要有 id 账号方便管理员管理。取货员表结构如表</p>
<p>4.3 所示。</p>
<p>表 4.3 取货员表</p>
<table>
<thead>
<tr>
<th><strong>字段名</strong></th>
<th><strong>名称</strong></th>
<th><strong>数据类型</strong></th>
<th><strong>约束</strong></th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>用户 id</td>
<td>int(11)</td>
<td>PK， AUTO_INCREMENT ，not null</td>
</tr>
<tr>
<td>username</td>
<td>账户</td>
<td>varchar(32)</td>
<td>not null</td>
</tr>
<tr>
<td>password</td>
<td>密码</td>
<td>varchar(32)</td>
<td>not null</td>
</tr>
<tr>
<td>name</td>
<td>姓名</td>
<td>varchar(20)</td>
<td></td>
</tr>
<tr>
<td>phone</td>
<td>电话</td>
<td>varchar(11)</td>
<td></td>
</tr>
</tbody></table>
<p>废品类别便于用户选择，编号 id 便于管理员管理。废品类别表结构如表 4.4 所示。</p>
<p>表 4.4 废品类别表</p>
<table>
<thead>
<tr>
<th><strong>字段名</strong></th>
<th><strong>名称</strong></th>
<th><strong>数据类型</strong></th>
<th><strong>约束</strong></th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>废品种类 id</td>
<td>int(11)</td>
<td>PK， AUTO_INCREMENT ，not null</td>
</tr>
<tr>
<td>name</td>
<td>类别名称</td>
<td>varchar(20)</td>
<td>not null</td>
</tr>
</tbody></table>
<p>订单信息会被记录，当用户、商户、取货员对订单存在疑惑时需要查看订单信息， 便于处理。订单信息表结构如表 4.5 所示。</p>
<p>表 4.5 订单信息表</p>
<table>
<thead>
<tr>
<th><strong>字段名</strong></th>
<th><strong>名称</strong></th>
<th><strong>数据类型</strong></th>
<th><strong>约束</strong></th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>订单 id</td>
<td>varchar(20)</td>
<td>PK， AUTO_INCREMENT ，not null</td>
</tr>
<tr>
<td>name</td>
<td>用户名</td>
<td>varchar(20)</td>
<td>not null</td>
</tr>
<tr>
<td>phone</td>
<td>电话</td>
<td>varchar(11)</td>
<td>not null</td>
</tr>
<tr>
<td>addr</td>
<td>地址</td>
<td>varchar(256)</td>
<td>not null</td>
</tr>
<tr>
<td>date</td>
<td>下单日期</td>
<td>date(0)</td>
<td>not null</td>
</tr>
<tr>
<td>time</td>
<td>取货时间</td>
<td>time(6)</td>
<td>not null</td>
</tr>
<tr>
<td>type_id</td>
<td>废品类别 id</td>
<td>int(11)</td>
<td>not null</td>
</tr>
<tr>
<td>create</td>
<td>订单创建时间</td>
<td>datetime(6)</td>
<td>not null</td>
</tr>
<tr>
<td>detail</td>
<td>备注</td>
<td>varchar(500)</td>
<td></td>
</tr>
<tr>
<td>price</td>
<td>价格</td>
<td>decimal(6)</td>
<td>not null</td>
</tr>
<tr>
<td>comment_d</td>
<td>对商户评价</td>
<td>varchar(500)</td>
<td></td>
</tr>
<tr>
<td>comment_b</td>
<td>对取货员评价</td>
<td>varchar(500)</td>
<td></td>
</tr>
<tr>
<td>status</td>
<td>状态</td>
<td>varchar(11)</td>
<td>not null</td>
</tr>
<tr>
<td>user_id</td>
<td>用户 id</td>
<td>int(11)</td>
<td>not null</td>
</tr>
</tbody></table>
<p>管理员注册时有 id 编号，管理员登录需要账户、密码。管理员表结构如表 4.6 所示。</p>
<p>表 4.6 管理员表</p>
<table>
<thead>
<tr>
<th><strong>字段名</strong></th>
<th><strong>名称</strong></th>
<th><strong>数据类型</strong></th>
<th><strong>约束</strong></th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>管理员 id</td>
<td>int(11)</td>
<td>PK， AUTO_INCREMENT ，not null</td>
</tr>
<tr>
<td>username</td>
<td>账户</td>
<td>varchar(32)</td>
<td>not null</td>
</tr>
<tr>
<td>password</td>
<td>密码</td>
<td>varchar(32)</td>
<td>not null</td>
</tr>
</tbody></table>
<p>物流信息由商户、取货员操作更新，直接显示当前订单状态、创建日期、订单编号。</p>
<p>物流信息表结构如表 4.7 所示。</p>
<p>表 4.7 物流信息表</p>
<table>
<thead>
<tr>
<th><strong>字段名</strong></th>
<th><strong>名称</strong></th>
<th><strong>数据类型</strong></th>
<th><strong>约束</strong></th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>int(11)</td>
<td>PK， AUTO_INCREMENT ，not null</td>
</tr>
<tr>
<td>name</td>
<td>物流状态</td>
<td>varchar(50)</td>
<td>not null</td>
</tr>
<tr>
<td>create</td>
<td>创建日期</td>
<td>varchar(6)</td>
<td>not null</td>
</tr>
<tr>
<td>order_id</td>
<td>订单编号</td>
<td>varchar(20)</td>
<td>not null</td>
</tr>
</tbody></table>
<p>管理员可对用户、商户、取货员账户及订单进行增加、删除、修改、查看功能。管理员操作记录表结构如表 4.8 所示。</p>
<p>表 4.8 管理员操作记录表</p>
<table>
<thead>
<tr>
<th><strong>字段名</strong></th>
<th><strong>名称</strong></th>
<th><strong>数据类型</strong></th>
<th><strong>约束</strong></th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>int(11)</td>
<td>PK， AUTO_INCREMENT</td>
</tr>
<tr>
<td>action_time</td>
<td>开始时间</td>
<td>datetime(6)</td>
<td>not null</td>
</tr>
<tr>
<td>object_id</td>
<td>目标 id</td>
<td>longtext</td>
<td></td>
</tr>
<tr>
<td>object_repr</td>
<td>更改结果</td>
<td>varchar(200)</td>
<td>not null</td>
</tr>
<tr>
<td>action_flag</td>
<td>开始标记</td>
<td>smallint(5)</td>
<td>not null</td>
</tr>
<tr>
<td>change_message</td>
<td>更改信息</td>
<td>longtext</td>
<td>not null</td>
</tr>
<tr>
<td>content_type_id</td>
<td>满足类型 id</td>
<td>int(11)</td>
<td></td>
</tr>
<tr>
<td>user_id</td>
<td>用户 id</td>
<td>int(11)</td>
<td>not null</td>
</tr>
</tbody></table>
<h3 id="后台功能模块设计"><a href="#后台功能模块设计" class="headerlink" title="后台功能模块设计"></a>后台功能模块设计</h3><p><img src="/../pic/media-fp/2431961e9d108c0b210377502065bc5a.png" alt=" ">管理员功能设计实现增删改查用户、商户、取货员、订单信息、回收废品分类功能， 认证和授权功能。管理员功能类图如图 4.3 所示。</p>
<p>图 4.3 废品回收后台管理系统类图</p>
<p>设计顺序图，管理员修改功能的顺序图如图 4.4 所示。</p>
<p><img src="/../pic/media-fp/fc74638232853c65d510c7cb298c865a.png" alt=" "></p>
<p>图 4.4 修改订单功能顺序图</p>
<h2 id="前台功能模块设计"><a href="#前台功能模块设计" class="headerlink" title="前台功能模块设计"></a>前台功能模块设计</h2><p>前台功能设计实现用户用户下单、查看订单状态，商户接单、评估价格并支付确认、查看物流信息、订单信息、用户评价，取货员接单、取货、送货、更新物流信息、查看用户评价等功能。前台功能类图如图 4.5 所示。</p>
<p><img src="/../pic/media-fp/31b594a824aca47dc78a33e2950bf5de.png" alt=" "></p>
<p>图 4.5 前端功能系统类图</p>
<p>设计顺序图，用户下单功能的顺序图如图 4.6 所示。</p>
<p><img src="/../pic/media-fp/39eaecc93f36d50a1449ed4e60d34a1d.png" alt=" "></p>
<p>图 4.6 用户下单功能顺序图</p>
<p>设计顺序图，商户接单功能的顺序图如图 4.7 所示。</p>
<p><img src="/../pic/media-fp/97a9c7bc9f5c0d50ea59ff01d20daf3e.png" alt=" "></p>
<p>图 4.7 商户接单功能顺序图</p>
<p>设计顺序图，取货员接单取货功能的顺序图如图 4.8 所示。</p>
<p><img src="/../pic/media-fp/f7bfe83dea82121aba4e524a9fbf4432.png" alt=" "></p>
<p>图 4.8 取货员接单取货功能顺序图</p>
<h2 id="JSON-接口设计"><a href="#JSON-接口设计" class="headerlink" title="JSON 接口设计"></a>JSON 接口设计</h2><p>用户注册接口，用于用户的注册账户请求，具体如表 4.9 所示。</p>
<p>表 4.9 用户注册接口</p>
<table>
<thead>
<tr>
<th><strong>URL 地址</strong></th>
<th><a href="http://127.0.0.1:8000/user/register/">http://127.0.0.1:8000/user/register/</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>请求参数列表</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>参数名称</strong></td>
<td><strong>是否必须</strong></td>
<td><strong>类型</strong></td>
<td><strong>描述</strong></td>
</tr>
<tr>
<td>username</td>
<td>是</td>
<td>String</td>
<td>用户名</td>
</tr>
<tr>
<td>password</td>
<td>是</td>
<td>String</td>
<td>用户设置密码</td>
</tr>
<tr>
<td>cpassword</td>
<td>是</td>
<td>String</td>
<td>确认密码</td>
</tr>
<tr>
<td><strong>请求类型</strong></td>
<td>POST</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>返回参数类型</strong></td>
<td>JSON</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>返回参数列表</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>参数名称</strong></td>
<td><strong>描述</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>code</td>
<td>数据状态码（成功状态码是 200）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>message</td>
<td>返回消息</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>添加订单接口设计，该接口用于废品回收用户下单。添加订单接口设计如表 4.10</p>
<p>所示。</p>
<p>表 4.10 用户下单接口</p>
<table>
<thead>
<tr>
<th><strong>URL 地址</strong></th>
<th><a href="http://127.0.0.1:8000/user/order/insert/">http://127.0.0.1:8000/user/order/insert/</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>参数列表</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>参数名称</strong></td>
<td><strong>是否必须</strong></td>
<td><strong>类型</strong></td>
<td><strong>描述</strong></td>
</tr>
<tr>
<td>name</td>
<td>是</td>
<td>String</td>
<td>寄件人</td>
</tr>
<tr>
<td>phone</td>
<td>是</td>
<td>String</td>
<td>联系电话</td>
</tr>
</tbody></table>
<p>续表 4.10 用户下单接口</p>
<table>
<thead>
<tr>
<th>addr</th>
<th>是</th>
<th>String</th>
<th>取件地址</th>
</tr>
</thead>
<tbody><tr>
<td>date</td>
<td>是</td>
<td>String</td>
<td>取件日期</td>
</tr>
<tr>
<td>time</td>
<td>是</td>
<td>String</td>
<td>取件时间</td>
</tr>
<tr>
<td>create</td>
<td>是</td>
<td>String</td>
<td>创建日期</td>
</tr>
<tr>
<td>heavy</td>
<td>是</td>
<td>String</td>
<td>废品重量</td>
</tr>
<tr>
<td>type_id</td>
<td>是</td>
<td>String</td>
<td>废品种类</td>
</tr>
<tr>
<td>datail</td>
<td>是</td>
<td>String</td>
<td>用户备注</td>
</tr>
<tr>
<td><strong>请求类型</strong></td>
<td>POST</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>返回参数类型</strong></td>
<td>JSON</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>返回参数列表</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>参数名称</strong></td>
<td><strong>描述</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>code</td>
<td>数据状态码（成功状态码是 200）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>message</td>
<td>返回消息</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="系统实现"><a href="#系统实现" class="headerlink" title="系统实现"></a>系统实现</h1><h2 id="后台功能模块实现"><a href="#后台功能模块实现" class="headerlink" title="后台功能模块实现"></a>后台功能模块实现</h2><p>管理员登入后台管理系统，对用户、商户、取货员、可选废品种类进行增、删、改、查，管理员可认证授权，查看用户评价、商户接单状态、取货员物流更新等功能。</p>
<h3 id="用户账户管理功能模块实现"><a href="#用户账户管理功能模块实现" class="headerlink" title="用户账户管理功能模块实现"></a>用户账户管理功能模块实现</h3><p>管理员登入后台管理系统，对用户账户进行增加，删除，修改和查询功能，用户账户管理页面如图 5.1 所示。</p>
<p><img src="/../pic/media-fp/74979e80b7462770ae509b7ed83eb2fb.jpeg" alt=" "></p>
<p>图 5.1 用户账户管理页面 1</p>
<p>其中相关代码如下所示：</p>
<h3 id="用户订单管理功能模块实现"><a href="#用户订单管理功能模块实现" class="headerlink" title="用户订单管理功能模块实现"></a>用户订单管理功能模块实现</h3><p>管理员登入后台管理系统，对用户订单进行增加，删除，修改和查询功能，用户订单管理页面如图 5.2 所示。</p>
<p><img src="/../pic/media-fp/344bb40423d7d3ac19237bdf18776fa7.jpeg" alt=" "></p>
<p>图 5.2 用户订单管理页面</p>
<p>其中相关代码如下所示：</p>
<h2 id="前台功能模块实现"><a href="#前台功能模块实现" class="headerlink" title="前台功能模块实现"></a>前台功能模块实现</h2><h3 id="用户下单功能模块实现"><a href="#用户下单功能模块实现" class="headerlink" title="用户下单功能模块实现"></a>用户下单功能模块实现</h3><p>用户登入后，可选择回收废品种类、填写重量进行废品回收下单，查看订单状态、进行评价等功能，用户下单页面如图 5.3 所示。</p>
<p><img src="/../pic/media-fp/00e67545776dea2bba11b85729c515dc.png" alt=" "></p>
<p>图 5.3 用户下单页面</p>
<p>其中相关代码如下所示：</p>
<p>def order_insert(request):</p>
<h3 id="商户接单功能模块实现"><a href="#商户接单功能模块实现" class="headerlink" title="商户接单功能模块实现"></a>商户接单功能模块实现</h3><p>商户登入后，进行接单并根据废品种类和重量对其价格评估，对取货员反馈的订单信息确认且支付订单，查看订单状态、查看用户评价等功能，商户接单页面如图 5.4 所示。</p>
<p><img src="/../pic/media-fp/d8625e28bcb9c953b6e91c97c4baae12.png" alt="1650430668(1)"></p>
<p>图 5.4 商户接单页面</p>
<p>其中相关代码如下所示：</p>
<h3 id="用户查看订单信息并评价功能模块实现"><a href="#用户查看订单信息并评价功能模块实现" class="headerlink" title="用户查看订单信息并评价功能模块实现"></a>用户查看订单信息并评价功能模块实现</h3><p>用户登入后，查看订单信息、物流及进行评价功能，用户查看订单信息并评价页面如图 5.5 所示。</p>
<p><img src="/../pic/media-fp/3c0d8723422b8a36c0d43c25d9194ae1.png" alt=" "></p>
<p>图 5.5 用户查看订单信息并评价页面</p>
<h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p><a href="https://xcyyyy19.github.io/code/P5-fp/%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81/program.zip">代码下载链接</a><br><a href="https://xcyyyy19.github.io/code/P5-fp/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E4%BB%B6/fp.sql">数据库下载链接</a></p>
]]></content>
      <categories>
        <category>code</category>
        <category>project</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Vue</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>快速了解我在大学期间学了什么</title>
    <url>/2023/03/10/%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/Z2-%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3%E6%88%91%E5%9C%A8%E5%A4%A7%E5%AD%A6%E6%9C%9F%E9%97%B4%E5%AD%A6%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<h1 id="获奖证书"><a href="#获奖证书" class="headerlink" title="获奖证书"></a>获奖证书</h1><p><a href="https://xcyyyy19.github.io/pic/Z2/%E5%9B%BD%E5%AE%B6%E7%BA%A7%EF%BC%9AACM.jpg">国家级：ACM</a><br><img src="/..%5Cpic%5CZ2%5C%E5%9B%BD%E5%AE%B6%E7%BA%A7%EF%BC%9AACM.jpg"></p>
<p><a href="https://xcyyyy19.github.io/pic/Z2/%E7%9C%81%E7%BA%A7%EF%BC%9A%E8%93%9D%E6%A1%A51.jpg">省级：蓝桥1</a><br><img src="/..%5Cpic%5CZ2%5C%E7%9C%81%E7%BA%A7%EF%BC%9A%E8%93%9D%E6%A1%A51.jpg"></p>
<p><a href="https://xcyyyy19.github.io/pic/Z2/%E7%9C%81%E7%BA%A7%EF%BC%9A%E8%93%9D%E6%A1%A52.jpg">省级：蓝桥2</a><br><img src="/..%5Cpic%5CZ2%5C%E7%9C%81%E7%BA%A7%EF%BC%9A%E8%93%9D%E6%A1%A52.jpg"></p>
<p><a href="https://xcyyyy19.github.io/pic/Z2/%E7%9C%81%E7%BA%A7%EF%BC%9A%E8%93%9D%E6%A1%A53.jpg">省级：蓝桥3</a><br><img src="/..%5Cpic%5CZ2%5C%E7%9C%81%E7%BA%A7%EF%BC%9A%E8%93%9D%E6%A1%A53.jpg"></p>
<p><a href="https://xcyyyy19.github.io/pic/Z2/%E5%B8%82%E7%BA%A7%EF%BC%9A%E5%A4%A7%E8%BF%9E%E5%B8%82%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AB%9E%E8%B5%9B.jpg">市级：大连市大数据竞赛</a><br><img src="/..%5Cpic%5CZ2%5C%E5%B8%82%E7%BA%A7%EF%BC%9A%E5%A4%A7%E8%BF%9E%E5%B8%82%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AB%9E%E8%B5%9B.jpg"></p>
<p><a href="https://xcyyyy19.github.io/pic/Z2/%E6%A0%A1%E5%86%85%EF%BC%9A%E7%AB%9E%E8%B5%9B.jpg">校级：竞赛</a><br><img src="/..%5Cpic%5CZ2%5C%E6%A0%A1%E5%86%85%EF%BC%9A%E7%AB%9E%E8%B5%9B.jpg"></p>
<p>Codevita证书</p>
<p>【【【【【【找邮件附件】】】】】】】】</p>
<p><a href="https://xcyyyy19.github.io/pic/Z2/%E8%8B%B1%E8%AF%AD%EF%BC%9A%E5%9B%9B%E7%BA%A7.jpg">英语：四级证书下载链接</a><br><a href="https://xcyyyy19.github.io/pic/Z2/%E8%8B%B1%E8%AF%AD%EF%BC%9A%E5%85%AD%E7%BA%A7.jpg">英语：六级证书下载链接</a></p>
<h1 id="及部分专业满分成绩证明"><a href="#及部分专业满分成绩证明" class="headerlink" title="及部分专业满分成绩证明"></a>及部分专业满分成绩证明</h1><p><a href="https://xcyyyy19.github.io/pic/Z2/%E5%85%B6%E4%BB%96%EF%BC%9A%E5%A4%A7%E5%AD%A6%E5%88%86%E6%95%B0.jpg">其他：大学部分专业课满分证明</a><br><img src="/..%5Cpic%5CZ2%5C%E5%85%B6%E4%BB%96%EF%BC%9A%E5%A4%A7%E5%AD%A6%E5%88%86%E6%95%B0.jpg"></p>
<h1 id="“我的收藏夹”附件"><a href="#“我的收藏夹”附件" class="headerlink" title="“我的收藏夹”附件"></a>“我的收藏夹”附件</h1><p><a href="https://xcyyyy19.github.io/pic/Z2/%E7%88%AC%E8%99%AB%E4%B8%8E%E6%B2%B3%E8%9F%B9.html">爬虫社工相关内容下载链接</a><br><img src="/..%5Cpic%5CZ2%5C%E7%88%AC%E8%99%AB%E4%B8%8E%E6%B2%B3%E8%9F%B9.jpg"></p>
<p>【【【【【【【【【该完善这里了！！！！！】】】】】】】】】】】</p>
<p><a href="https://xcyyyy19.github.io/pic/Z2/lxhpic.zip">JavaWeb与小程序相关内容下载链接</a></p>
<p>[相关内容下载链接]<br>[相关内容下载链接]<br>[相关内容下载链接]<br>[相关内容下载链接]<br>[相关内容下载链接]<br>[相关内容下载链接]</p>
]]></content>
      <categories>
        <category>必看！我是谁，我在干什么</category>
      </categories>
      <tags>
        <tag>profile</tag>
      </tags>
  </entry>
  <entry>
    <title>Python网站--盘中餐（Vue结业项目）</title>
    <url>/2023/03/14/Python/P4-Python%E7%BD%91%E7%AB%99--%E7%9B%98%E4%B8%AD%E9%A4%90%EF%BC%88Vue%E7%BB%93%E4%B8%9A%E9%A1%B9%E7%9B%AE%EF%BC%89/</url>
    <content><![CDATA[<h2 id="基于Django-的“盘中餐”健康饮食网站的设计与实现（附件见文末）"><a href="#基于Django-的“盘中餐”健康饮食网站的设计与实现（附件见文末）" class="headerlink" title="基于Django 的“盘中餐”健康饮食网站的设计与实现（附件见文末）"></a>基于Django 的“盘中餐”健康饮食网站的设计与实现（附件见文末）</h2><h2 id="系统原型"><a href="#系统原型" class="headerlink" title="系统原型"></a>系统原型</h2><p>用户在想要评论的文章详情页面点击评论，系统弹出添加评论窗口，含有两个按钮， 分别对应评论发表成功和重置评论。用户评论文章原型图如下图所示。</p>
<p><img src="/../pic/media-pzc/67be40de8257f28f7e6bd8bf78c6e5e5.jpeg"></p>
<p>用户评论文章原型图</p>
<p>用户进入后台管理页面，在新增每日打卡详情页输入打卡名称、照片、空盘次数、打卡时间等信息进行每日打卡。用户新增每日打卡原型图如下图所示。</p>
<p><img src="/../pic/media-pzc/e1476e996ddfd3bc7ac1934cf1003d94.jpeg"></p>
<p>用户新增每日打卡原型图</p>
<p>管理员在后台管理的食物信息页面，点击对应食物的详情按钮，查看对应食物信息的详情页。管理员查看食物信息原型图如下图所示。</p>
<p><img src="/../pic/media-pzc/313282be30af592bd821fe765042c477.jpeg"></p>
<p>管理员查看食物信息原型图</p>
<p>管理员在后台管理的榜单页面，在修改榜单的详情，修改榜单信息。管理员修改榜单原型图如下图所示。</p>
<p><img src="/../pic/media-pzc/cb54c343d764453b60e94571a48d192b.jpeg"></p>
<p>管理员修改榜单原型图</p>
<h1 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h1><h2 id="体系结构设计"><a href="#体系结构设计" class="headerlink" title="体系结构设计"></a>体系结构设计</h2><p>盘中餐健康饮食网站分为前台、用户后台和管理员后台三个部分。前台主要功能包括用户登录注册、查看食物 、查看新闻资讯、查看每日打卡、文章分享等。用户后台负责用户个人中心管理、每日打卡管理和榜单管理。管理员后台负责用户管理、食物类别管理、食物信息管理、每日打卡管理、系统管理等。系统体系结构图aaaaa。</p>
<p><img src="/../pic/media-pzc/2629b3477b3dc434c069857ded0bbc97.jpeg"></p>
<p>体系结构图</p>
<h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><ol>
<li><p><strong>E-R</strong> 图</p>
<p>系统的 E-R 图主要核心从用户角色出发，展示包括用户、每日打卡信息、榜单信息、新闻资讯信息、食物类型信息、食物信息和文章分享信息实体间的联系。数据库设计的E-R 图如下图所示。</p>
</li>
</ol>
<p><img src="/../pic/media-pzc/f1919788f4ccac7886104007acca1d91.jpeg"></p>
<h3 id="表结构设计"><a href="#表结构设计" class="headerlink" title="表结构设计"></a>表结构设计</h3><p>数据库 E-R 图</p>
<p>用户表的字段为创建时间、用户名、姓名、头像、密码等。id 为主键。该表存储用户基本信息用于用户注册，登录等。用户表结构如表所示。</p>
<p>表用户表</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>名称</th>
<th>数据类型</th>
<th>约束</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>用户 ID</td>
<td>bigint(20)</td>
<td>PK</td>
</tr>
<tr>
<td>addtime</td>
<td>创建时间</td>
<td>timestamp</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>yonghuming</td>
<td>用户名</td>
<td>varchar(200)</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>xingming</td>
<td>姓名</td>
<td>varchar(200)</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>touxiang</td>
<td>头像</td>
<td>varchar(200)</td>
<td>无</td>
</tr>
<tr>
<td>xingbie</td>
<td>性别</td>
<td>varchar(200)</td>
<td>无</td>
</tr>
</tbody></table>
<p>用户表</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>名称</th>
<th>数据类型</th>
<th>约束</th>
</tr>
</thead>
<tbody><tr>
<td>mima</td>
<td>密码</td>
<td>varchar(200)</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>shouji</td>
<td>手机</td>
<td>varchar(200)</td>
<td>无</td>
</tr>
</tbody></table>
<p>新闻资讯表的字段为标题、简介、图片、内容等，id 为主键。该表存储新闻资讯的相关信息。新闻资讯表结构如表所示。</p>
<p>表新闻资讯表</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>名称</th>
<th>数据类型</th>
<th>约束</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>新闻资讯 ID</td>
<td>bigint(20)</td>
<td>PK</td>
</tr>
<tr>
<td>addtime</td>
<td>创建时间</td>
<td>timestamp</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
<td>varchar(200)</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>introduction</td>
<td>简介</td>
<td>longtext</td>
<td></td>
</tr>
<tr>
<td>picture</td>
<td>图片</td>
<td>varchar(200)</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>content</td>
<td>内容</td>
<td>longtext</td>
<td>NOT NULL</td>
</tr>
</tbody></table>
<p>每日打卡表的字段为打卡编号、打卡名称、空盘次数、打卡时间等，id 为主键。该表用于存储用户每日打卡的相关信息。每日打卡表结构如表所示。</p>
<p>表每日打卡表</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>名称</th>
<th>数据类型</th>
<th>约束</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>打卡 ID</td>
<td>bigint(20)</td>
<td>PK</td>
</tr>
<tr>
<td>addtime</td>
<td>创建时间</td>
<td>timestamp</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>Dakabianhao</td>
<td>打卡编号</td>
<td>varchar(200)</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>Dakamingcheng</td>
<td>打卡名称</td>
<td>varchar(200)</td>
<td>无</td>
</tr>
<tr>
<td>tupian</td>
<td>图片</td>
<td>varchar(200)</td>
<td>无</td>
</tr>
<tr>
<td>Kongpancishu</td>
<td>空盘次数</td>
<td>int</td>
<td>无</td>
</tr>
<tr>
<td>Dakashijian</td>
<td>打卡时间</td>
<td>datetime</td>
<td>无</td>
</tr>
<tr>
<td>Yonghuming</td>
<td>用户名</td>
<td>varchar(200)</td>
<td>无</td>
</tr>
<tr>
<td>Xingming</td>
<td>姓名</td>
<td>varchar(200)</td>
<td>无</td>
</tr>
<tr>
<td>beizhu</td>
<td>备注</td>
<td>varchar(200)</td>
<td>无</td>
</tr>
</tbody></table>
<p>食物信息表的字段为食物名称、食物类型、图片、热量值等，id 为主键。该表存储每个食物的详细信息。食物信息表结构如表所示。</p>
<p>表食物信息表</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>名称</th>
<th>数据类型</th>
<th>约束</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>食物信息 ID</td>
<td>bigint(20)</td>
<td>PK</td>
</tr>
<tr>
<td>addtime</td>
<td>创建时间</td>
<td>timestamp</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>shiwumingcheng</td>
<td>食物名称</td>
<td>varchar(200)</td>
<td>无</td>
</tr>
<tr>
<td>tupian</td>
<td>图片</td>
<td>varchar(200)</td>
<td>无</td>
</tr>
<tr>
<td>shiwuleixing</td>
<td>食物类型</td>
<td>varchar(200)</td>
<td>无</td>
</tr>
<tr>
<td>reliangzhi</td>
<td>热量值</td>
<td>varchar(200)</td>
<td>无</td>
</tr>
</tbody></table>
<p>榜单表的字段为打卡编号、空盘次数、图片、更新时间等，id 为主键。该表存储管理员根据用户的每日打卡信息所发布的榜单中，每个榜单的详细信息。榜单表结构如表</p>
<p> 所示。</p>
<p>表榜单表</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>名称</th>
<th>数据类型</th>
<th>约束</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>榜单 ID</td>
<td>bigint(20)</td>
<td>PK</td>
</tr>
<tr>
<td>addtime</td>
<td>创建时间</td>
<td>timestamp</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>dakabianhao</td>
<td>打卡编号</td>
<td>varchar(200)</td>
<td>无</td>
</tr>
<tr>
<td>tupian</td>
<td>图片</td>
<td>varchar(200)</td>
<td>无</td>
</tr>
<tr>
<td>kongpancishu</td>
<td>空盘次数</td>
<td>varchar(200)</td>
<td>无</td>
</tr>
<tr>
<td>yonghuming</td>
<td>用户名</td>
<td>varchar(200)</td>
<td>无</td>
</tr>
<tr>
<td>xingming</td>
<td>姓名</td>
<td>varchar(200)</td>
<td>无</td>
</tr>
<tr>
<td>gengxinshijian</td>
<td>更新时间</td>
<td>date</td>
<td>无</td>
</tr>
</tbody></table>
<p>食物类型表的字段为食物类型和创建时间，id 为主键。该表存储着每个食物类型的详细信息。食物类型表结构如表所示。</p>
<p>表食物类型表</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>名称</th>
<th>数据类型</th>
<th>约束</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>食物类型 ID</td>
<td>bigint(20)</td>
<td>PK</td>
</tr>
<tr>
<td>addtime</td>
<td>创建时间</td>
<td>timestamp</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>shiwuleixing</td>
<td>食物类型</td>
<td>varchar(200)</td>
<td>NOT NULL</td>
</tr>
</tbody></table>
<p>文章分享表的字段为帖子标题、帖子内容、用户 id、状态等，id 为主键。该表存储着每篇文章的详细信息。文章分享表结构如表所示。</p>
<p>表文章分享表</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>名称</th>
<th>数据类型</th>
<th>约束</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>文章 ID</td>
<td>bigint(20)</td>
<td>PK</td>
</tr>
<tr>
<td>addtime</td>
<td>创建时间</td>
<td>timestamp</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>title</td>
<td>帖子标题</td>
<td>varchar(200)</td>
<td>无</td>
</tr>
<tr>
<td>content</td>
<td>帖子内容</td>
<td>longtext</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>parentid</td>
<td>父节点 id</td>
<td>bignit</td>
<td>无</td>
</tr>
<tr>
<td>userid</td>
<td>用户 id</td>
<td>bignit</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>username</td>
<td>用户名</td>
<td>varchar(200)</td>
<td>无</td>
</tr>
<tr>
<td>isdone</td>
<td>状态</td>
<td>varchar(200)</td>
<td>无</td>
</tr>
</tbody></table>
<h2 id="JSON-接口设计"><a href="#JSON-接口设计" class="headerlink" title="JSON 接口设计"></a>JSON 接口设计</h2><p>网站获取食物类型列表接口设计。该接口用于在前端显示食物类型列表。获取食物类型列表接口设计如表所示。</p>
<p>表获取食物类型列表接口</p>
<table>
<thead>
<tr>
<th>功能说明</th>
<th>获取食物类型列表接口</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>URL</strong> 地址</td>
<td><a href="http://localhost:8080/django1q7tt/shiwuleixing/list">http://localhost:8080/django1q7tt/shiwuleixing/list</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td>参数列表</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>参数名称</td>
<td>是否必须</td>
<td>类型</td>
<td>描述</td>
</tr>
<tr>
<td>无参数</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>请求类型</td>
<td>POST</td>
<td></td>
<td></td>
</tr>
<tr>
<td>返回参数类型</td>
<td>JSON</td>
<td></td>
<td></td>
</tr>
<tr>
<td>返回参数列表</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>参数名称</td>
<td>描述</td>
<td></td>
<td></td>
</tr>
<tr>
<td>code</td>
<td>数据状态码（成功状态码是 200）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>data</td>
<td>具体数据</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>网站获取食物信息列表接口设计。该接口用于在前端显示食物信息列表。获取食物信息列表接口设计如表所示。</p>
<p>表获取食物信息列表接口</p>
<table>
<thead>
<tr>
<th>功能说明</th>
<th>获取食物信息列表接口</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>URL</strong> 地址</td>
<td><a href="http://localhost:8080/django1q7tt/shiwuxinxi/list">http://localhost:8080/django1q7tt/shiwuxinxi/list</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td>参数列表</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>参数名称</td>
<td>是否必须</td>
<td>类型</td>
<td>描述</td>
</tr>
<tr>
<td>无参数</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>请求类型</td>
<td>POST</td>
<td></td>
<td></td>
</tr>
<tr>
<td>返回参数类型</td>
<td>JSON</td>
<td></td>
<td></td>
</tr>
<tr>
<td>返回参数列表</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>参数名称</td>
<td>描述</td>
<td></td>
<td></td>
</tr>
<tr>
<td>code</td>
<td>数据状态码（成功状态码是 200）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>data</td>
<td>具体数据</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>网站获取每日打卡详细信息接口设计。该接口用于在前端、后端获取每日打卡的详细信息。获取每日打卡详细信息接口设计如表 0 所示。</p>
<p>表 0 获取每日打卡详细信息接口</p>
<table>
<thead>
<tr>
<th>功能说明</th>
<th>获取每日打卡详细信息接口</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>URL</strong> 地址</td>
<td><a href="http://localhost:8080/">http://localhost:8080/</a> django1q7tt&#x2F; meiridaka&#x2F;detail</td>
<td></td>
<td></td>
</tr>
<tr>
<td>参数列表</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>参数名称</td>
<td>是否必须</td>
<td>类型</td>
<td>描述</td>
</tr>
<tr>
<td>id</td>
<td>是</td>
<td>Number</td>
<td>打卡 id</td>
</tr>
<tr>
<td>dakabianhao</td>
<td>否</td>
<td>String</td>
<td>打卡编号</td>
</tr>
<tr>
<td>tupian</td>
<td>否</td>
<td>String</td>
<td>订单状态</td>
</tr>
<tr>
<td>kongpancishu</td>
<td>否</td>
<td>Number</td>
<td>空盘次数</td>
</tr>
<tr>
<td>dakashijian</td>
<td>否</td>
<td>String</td>
<td>打卡时间</td>
</tr>
<tr>
<td>yonghuming</td>
<td>否</td>
<td>String</td>
<td>用户名</td>
</tr>
<tr>
<td>xingming</td>
<td>否</td>
<td>String</td>
<td>姓名</td>
</tr>
<tr>
<td>dakamingcheng</td>
<td>否</td>
<td>String</td>
<td>打卡名称</td>
</tr>
<tr>
<td>beizhu</td>
<td>否</td>
<td>String</td>
<td>备注</td>
</tr>
<tr>
<td>请求类型</td>
<td>POST</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>续表 0 获取每日打卡详细信息接口</p>
<table>
<thead>
<tr>
<th>返回参数类型</th>
<th>JSON</th>
</tr>
</thead>
<tbody><tr>
<td>返回参数列表</td>
<td></td>
</tr>
<tr>
<td>参数名称</td>
<td>描述</td>
</tr>
<tr>
<td>code</td>
<td>数据状态码（成功状态码是 200）</td>
</tr>
<tr>
<td>data</td>
<td>具体数据</td>
</tr>
</tbody></table>
<p>网站保存榜单信息接口设计，该接口保存创建或修改好的榜单信息。保存榜单接口设计如表 1 所示。</p>
<p>表 1 保存榜单接口</p>
<table>
<thead>
<tr>
<th>功能说明</th>
<th>保存榜单接口</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>URL</strong> 地址</td>
<td><a href="http://localhost:8080/django1q7tt/bangdan/save">http://localhost:8080/django1q7tt/bangdan/save</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td>参数列表</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>参数名称</td>
<td>是否必须</td>
<td>类型</td>
<td>描述</td>
</tr>
<tr>
<td>id</td>
<td>是</td>
<td>Number</td>
<td>榜单 id</td>
</tr>
<tr>
<td>dakabianhao</td>
<td>否</td>
<td>String</td>
<td>打卡编号</td>
</tr>
<tr>
<td>tupian</td>
<td>否</td>
<td>String</td>
<td>订单状态</td>
</tr>
<tr>
<td>kongpancishu</td>
<td>否</td>
<td>Number</td>
<td>空盘次数</td>
</tr>
<tr>
<td>yonghuming</td>
<td>否</td>
<td>String</td>
<td>用户名</td>
</tr>
<tr>
<td>xingming</td>
<td>否</td>
<td>String</td>
<td>姓名</td>
</tr>
<tr>
<td>gengxingshijian</td>
<td>否</td>
<td>String</td>
<td>更新时间</td>
</tr>
<tr>
<td>请求类型</td>
<td>POST</td>
<td></td>
<td></td>
</tr>
<tr>
<td>返回参数类型</td>
<td>JSON</td>
<td></td>
<td></td>
</tr>
<tr>
<td>返回参数列表</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>参数名称</td>
<td>描述</td>
<td></td>
<td></td>
</tr>
<tr>
<td>code</td>
<td>数据状态码（成功状态码是 200）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>data</td>
<td>具体数据</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="系统实现"><a href="#系统实现" class="headerlink" title="系统实现"></a>系统实现</h1><h2 id="后台功能模块实现"><a href="#后台功能模块实现" class="headerlink" title="后台功能模块实现"></a>后台功能模块实现</h2><h3 id="新增食物类型功能模块实现"><a href="#新增食物类型功能模块实现" class="headerlink" title="新增食物类型功能模块实现"></a>新增食物类型功能模块实现</h3><p>新增食物类型功能的实现，前端发送请求后，通过 URL 调用 shiwuleixing 的 list、add 和 save 接口操作后台对 shiwuleixing 数据库表进行增、删、改、查操作，最后将数据逐级返回到前端。查看食物类型列表如下图所示，新增食物类型功能实现如下图所示。</p>
<p><img src="/../pic/media-pzc/49f1599942f4c7756c8f80f9e57a9f7d.jpeg"></p>
<p>查看食物类型列表</p>
<p><img src="/../pic/media-pzc/93d9948d56fbef1c4c62fd9d5c6c6075.jpeg"></p>
<p>新增食物类型功能实现</p>
<p>后台新增食物类型功能代码如下所示：</p>
<h3 id="删除文章分享的帖子功能模块实现"><a href="#删除文章分享的帖子功能模块实现" class="headerlink" title="删除文章分享的帖子功能模块实现"></a>删除文章分享的帖子功能模块实现</h3><p>删除文章分享的帖子功能的实现，前端发送请求后，通过 URL 先调用 forum_page 接口权限为管理员查看 forum 记录，再调用 forum_delete 接口操作后台对 forum 数据库表的信息进行删除操作，最后将数据逐级返回到前端。删除文章分享的帖子功能模块实现如下图所示。</p>
<p><img src="/../pic/media-pzc/1bdfc65ae82daf224f15abdc827dfbe1.jpeg"></p>
<p>删除文章分享的帖子模块实现</p>
<p>删除文章分享的帖子模块功能代码如下所示：</p>
<h3 id="修改每日打卡信息模块实现"><a href="#修改每日打卡信息模块实现" class="headerlink" title="修改每日打卡信息模块实现"></a>修改每日打卡信息模块实现</h3><p>修改每日打卡信息模块的实现，前端发送请求后，通过 URL 调用 meiridaka_update 接口，对从 meiridaka 数据库表中通过 meiridaka_info 接口选定数据的修改，最后将数据逐级返回到前端。修改每日打卡信息功能模块实现如下图所示</p>
<p><img src="/../pic/media-pzc/c465a20dbab11799620e8963a6c38f96.jpeg"></p>
<p>修改每日打卡信息功能实现</p>
<p>修改每日打卡信息模块功能代码如下所示：</p>
<h2 id="前台功能模块实现"><a href="#前台功能模块实现" class="headerlink" title="前台功能模块实现"></a>前台功能模块实现</h2><h3 id="用户查看每日打卡详情功能模块实现"><a href="#用户查看每日打卡详情功能模块实现" class="headerlink" title="用户查看每日打卡详情功能模块实现"></a>用户查看每日打卡详情功能模块实现</h3><p>用户查看每日打卡详情功能的实现，前端发送请求后，通过 URL 调用 meiridaka 的list 和 detail 接口操作后台对 meiridaka 数据库表进行查找查看操作，最后将数据逐级返回到前端。用户查看每日打卡详情功能实现如下图所示。</p>
<p><img src="/../pic/media-pzc/78806c6edc2e45dfe333a6c8f5e71681.jpeg"></p>
<h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p><a href="https://xcyyyy19.github.io/code/P4-pzc/%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81/django.zip">代码下载链接</a><br><a href="https://xcyyyy19.github.io/code/P4-pzc/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E4%BB%B6django.sql">数据库下载链接</a></p>
]]></content>
      <categories>
        <category>code</category>
        <category>project</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Vue</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS学习笔记-1.2实践</title>
    <url>/2023/03/29/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CSS/Q2-CSS-2%E5%AE%9E%E8%B7%B5%EF%BC%88%E5%9F%BA%E6%9C%AC%E6%A0%B7%E5%BC%8F%EF%BC%89/</url>
    <content><![CDATA[<h1 id="CSS学习笔记-1-2实践"><a href="#CSS学习笔记-1-2实践" class="headerlink" title="CSS学习笔记-1.2实践"></a>CSS学习笔记-1.2实践</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">  	&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  	&lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;title&gt;Cafe Menu&lt;/title&gt;</span><br><span class="line">    &lt;link href=&quot;../CSS/咖啡.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;menu&quot;&gt;</span><br><span class="line">      &lt;main&gt;</span><br><span class="line">        &lt;h1&gt;CAMPER CAFE&lt;/h1&gt;</span><br><span class="line">        &lt;p class=&quot;established&quot;&gt;Est. 2020&lt;/p&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;section&gt;</span><br><span class="line">          &lt;h2&gt;Coffee&lt;/h2&gt;</span><br><span class="line">          &lt;img src=&quot;https://cdn.freecodecamp.org/curriculum/css-cafe/coffee.jpg&quot; alt=&quot;coffee icon&quot;/&gt;</span><br><span class="line">          &lt;article class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;p class=&quot;flavor&quot;&gt;French Vanilla&lt;/p&gt;&lt;p class=&quot;price&quot;&gt;3.00&lt;/p&gt;</span><br><span class="line">          &lt;/article&gt;</span><br><span class="line">          &lt;article class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;p class=&quot;flavor&quot;&gt;Caramel Macchiato&lt;/p&gt;&lt;p class=&quot;price&quot;&gt;3.75&lt;/p&gt;</span><br><span class="line">          &lt;/article&gt;</span><br><span class="line">          &lt;article class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;p class=&quot;flavor&quot;&gt;Pumpkin Spice&lt;/p&gt;&lt;p class=&quot;price&quot;&gt;3.50&lt;/p&gt;</span><br><span class="line">          &lt;/article&gt;</span><br><span class="line">          &lt;article class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;p class=&quot;flavor&quot;&gt;Hazelnut&lt;/p&gt;&lt;p class=&quot;price&quot;&gt;4.00&lt;/p&gt;</span><br><span class="line">          &lt;/article&gt;</span><br><span class="line">          &lt;article class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;p class=&quot;flavor&quot;&gt;Mocha&lt;/p&gt;&lt;p class=&quot;price&quot;&gt;4.50&lt;/p&gt;</span><br><span class="line">          &lt;/article&gt;</span><br><span class="line">        &lt;/section&gt;</span><br><span class="line">        &lt;section&gt;</span><br><span class="line">          &lt;h2&gt;Desserts&lt;/h2&gt;</span><br><span class="line">          &lt;img src=&quot;https://cdn.freecodecamp.org/curriculum/css-cafe/pie.jpg&quot; alt=&quot;pie icon&quot;/&gt;</span><br><span class="line">          &lt;article class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;p class=&quot;dessert&quot;&gt;Donut&lt;/p&gt;&lt;p class=&quot;price&quot;&gt;1.50&lt;/p&gt;</span><br><span class="line">          &lt;/article&gt;</span><br><span class="line">          &lt;article class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;p class=&quot;dessert&quot;&gt;Cherry Pie&lt;/p&gt;&lt;p class=&quot;price&quot;&gt;2.75&lt;/p&gt;</span><br><span class="line">          &lt;/article&gt;</span><br><span class="line">          &lt;article class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;p class=&quot;dessert&quot;&gt;Cheesecake&lt;/p&gt;&lt;p class=&quot;price&quot;&gt;3.00&lt;/p&gt;</span><br><span class="line">          &lt;/article&gt;</span><br><span class="line">          &lt;article class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;p class=&quot;dessert&quot;&gt;Cinnamon Roll&lt;/p&gt;&lt;p class=&quot;price&quot;&gt;2.50&lt;/p&gt;</span><br><span class="line">          &lt;/article&gt;</span><br><span class="line">        &lt;/section&gt;</span><br><span class="line">      &lt;/main&gt;</span><br><span class="line">      &lt;hr class=&quot;bottom-line&quot;&gt;</span><br><span class="line">      &lt;footer&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          &lt;a href=&quot;https://www.freecodecamp.org&quot; target=&quot;_blank&quot;&gt;Visit our website&lt;/a&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;address&quot;&gt;123 Free Code Camp Drive&lt;/p&gt;</span><br><span class="line">      &lt;/footer&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  background-image: url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg);</span><br><span class="line">  font-family: sans-serif;</span><br><span class="line">  padding: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h1 &#123;</span><br><span class="line">  font-size: 40px;</span><br><span class="line">  margin-top: 0;</span><br><span class="line">  margin-bottom: 15px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h2 &#123;</span><br><span class="line">  font-size: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.established &#123;</span><br><span class="line">  font-style: italic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h1, h2, p &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.menu &#123;</span><br><span class="line">  width: 80%;</span><br><span class="line">  background-color: burlywood;</span><br><span class="line">  margin-left: auto;</span><br><span class="line">  margin-right: auto;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  max-width: 500px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin-left: auto;</span><br><span class="line">  margin-right: auto;</span><br><span class="line">  margin-top: -25;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hr &#123;</span><br><span class="line">  height: 2px;</span><br><span class="line">  background-color: brown;</span><br><span class="line">  border-color: brown;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.bottom-line &#123;</span><br><span class="line">  margin-top: 25px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h1, h2 &#123;</span><br><span class="line">  font-family: Impact, serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item p &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  margin-top: 5px;</span><br><span class="line">  margin-bottom: 5px;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.flavor, .dessert &#123;</span><br><span class="line">  text-align: left;</span><br><span class="line">  width: 75%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.price &#123;</span><br><span class="line">  text-align: right;</span><br><span class="line">  width: 25%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* FOOTER */</span><br><span class="line"></span><br><span class="line">footer &#123;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.address &#123;</span><br><span class="line">  margin-bottom: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a &#123;</span><br><span class="line">  color: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a:visited &#123;</span><br><span class="line">  color: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a:hover &#123;</span><br><span class="line">  color: brown;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a:active &#123;</span><br><span class="line">  color: brown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS学习笔记-1.1基本样式</title>
    <url>/2023/03/29/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CSS/Q2-CSS-1%E5%9F%BA%E6%9C%AC%E6%A0%B7%E5%BC%8F+%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="CSS学习笔记-1-1基本样式"><a href="#CSS学习笔记-1-1基本样式" class="headerlink" title="CSS学习笔记-1.1基本样式"></a>CSS学习笔记-1.1基本样式</h1><p>注释:</p>
<p>​			CSS:&#x2F;**&#x2F;</p>
<p>技巧：</p>
<p>​			先写html框架，再考虑CSS</p>
<p>​			定义主要容器时，要定义成宽度是由我们固定的，高度完全是由内容撑开的。</p>
<p>CSS游戏：</p>
<p>​			<a href="https://frontend30.com/css-selectors-cheatsheet/">CSS Selectors Cheatsheet - FrontEnd30</a></p>
<p>思维导图：</p>
<p>​			<a href="https://flowus.cn/d3cec49a-35cf-46aa-a095-f5ed4406287e">CSS思维导图 (flowus.cn)</a></p>
<h3 id="0-CSS基本样式"><a href="#0-CSS基本样式" class="headerlink" title="0.CSS基本样式"></a>0.CSS基本样式</h3><p>选择器（Selector）<br>HTML 元素的名称位于规则集开始。它选择了一个或多个需要添加样式的元素）。要给不同元素添加样式只需要更改选择器就行了。可以用固定标签名，或.+自定义名称来进行选择。如用.menu来选择class属性为menu的盒子。</p>
<p>通配符选择器作用：给当前界面上所有的标签设置属性。（*的意思是选中所有的标签）</p>
<p>声明（Declaration）<br>一个单独的规则，如 color: red; 用来指定添加样式元素的属性。</p>
<p>属性（Properties）<br>改变 HTML 元素样式的途径。（本例中 color 就是 <p> 元素的属性。）CSS 中，由编写人员决定修改哪个属性以改变规则。</p>
<p>属性的值（Property value）<br>在属性的右边，冒号后面即属性的值，它从指定属性的众多外观中选择一个值（我们除了 red 之外还有很多属性值可以用于 color ）。</p>
<h3 id="1-常见基础样式"><a href="#1-常见基础样式" class="headerlink" title="1.常见基础样式"></a>1.常见基础样式</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><ul>
<li><p>基础：</p>
<p>声明该边框的类型：display ：可选项如下</p>
<p>​								flex灵活布局</p>
<p>​								grid网格布局</p>
<p><img src="/markdown-img/Q2-CSS-1%E5%9F%BA%E6%9C%AC%E6%A0%B7%E5%BC%8F+%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.assets/image-20230329162830851.png" alt="image-20230329162830851"></p>
<p>​							</p>
<ul>
<li><p>通用（框架相关）:</p>
<p>宽度:   width: 300px;（百分制也行），div默认居左，所以背景颜色随着宽度的改变也居左。</p>
<p>最大宽度: max-width: 500px;</p>
<p>​				（背景是不动的，主页面随着浏览器大小变化，有最大宽度的约束，内容看起来就不会过宽）</p>
<p>最小宽度：</p>
<p>最大高度：</p>
<p>最小高度：</p>
</li>
</ul>
<h3 id="2-文字相关"><a href="#2-文字相关" class="headerlink" title="2.文字相关"></a>2.文字相关</h3><p>单位：</p>
<p>​		em设置成几个字符大小（根据用户使用的字体自适应）</p>
<p>​		px像素</p>
<p>​		%百分比</p>
<p>颜色：</p>
<p>​		<img src="../其它/markdown-img\Q2-CSS-1基本样式+盒子模型.assets\image-20230407121714988.png" alt="image-20230407121714988" style="zoom:25%;" /></p>
<p>文本对齐：<strong>text-align</strong></p>
<p>​	居中: text-align: <strong>center;</strong></p>
<p>​	居左: text-align: <strong>left;</strong></p>
<p>​	居右: text-align: <strong>right;</strong></p>
<p>​	居左: text-align: <strong>justify;</strong></p>
<p>​	应用：文本的垂直居中（flex也行）</p>
<p>[CSS 布局 – 水平 &amp; 垂直对齐 | 菜鸟教程 (runoob.com)](<a href="https://www.runoob.com/css/css-align.html#:~:text=CSS">https://www.runoob.com/css/css-align.html#:~:text=CSS</a> 布局 - 水平 %26 垂直对齐 1 元素居中对齐,8 垂直居中 - 使用 position 和 transform 更多项目)</p>
<p>字间距：<strong>letter-spacing</strong></p>
<p>​	取值：2px&#x2F;-2px</p>
<p>行高：<strong>line-height</strong></p>
<p>​	取值：14px&#x2F;1.5em几倍行高&#x2F;120%基于当前字符的百分比行高</p>
<p>装饰线：<strong>text-decoration</strong> </p>
<p>​	上划线：<strong>overline</strong></p>
<p>​	删除线：<strong>line-throuth</strong></p>
<p>​	下划线：<strong>underling</strong></p>
<p>​	删除：<strong>none</strong>（针对a标签，去掉自带的下划线）</p>
<p>字体：</p>
<p>​		字体所有属性：<strong>font</strong>：很多设定 字号及行高（用斜线隔开） 字体名称；</p>
<p>​					例子：font：bold（粗体） italic（斜体） 18px&#x2F;1.5em ‘幼圆’</p>
<p>​		字体系列: <strong>font-family:</strong> Impact,serif;</p>
<p>​					重点：可以写多个字体，用逗号隔开。找不到第一种字体就用第二种，都找不到就用默认字体。</p>
<p>​					易错点：字体含有空格时，应加双引号</p>
<p>​					例子：font-family：“Microsoft YaHei”</p>
<p>​		字体大小：<strong>font-size：</strong>18px；</p>
<p>​		字重：<strong>font-weight</strong>（字体粗细）</p>
<p>​		斜体： font-style:italic;</p>
<p>CSS3中三种文本相关属性：</p>
<p>​				文本阴影：<strong>text-shadow</strong>：水平偏移量 垂直偏移量  阴影大小（可省略） 颜色；</p>
<p>​									常用效果：</p>
<p>​													文本描边：0 0 3px black；</p>
<p>​													文字浮雕效果：color：white； text-shadow：2px 2px 4px #000；</p>
<p>​								   类似于《CSS-1定位与布局》中的盒子阴影。</p>
<p>​				长文本换行：<strong>word-warp</strong>：break-word；</p>
<p>​				网络字体：**@font-face**</p>
<p>​									需要从网络上下载字体到服务器本地，并转化成各种浏览器支持的格式</p>
<p>​									最后通过引用本地的字体文件来给用户端进行显示。</p>
<h3 id="3-其它"><a href="#3-其它" class="headerlink" title="3.其它"></a>3.其它</h3><p>圆角：<img src="/markdown-img/Q2-CSS-1%E5%9F%BA%E6%9C%AC%E6%A0%B7%E5%BC%8F+%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.assets/1680769113691.png" alt="1680769113691" style="zoom:30%;" />值为px</p>
<p>​			border-radius：25px；圆角边框。</p>
<p>阴影：属性box-shadow</p>
<p>​			选项为inside&#x2F;outside（默认值为外部阴影），值为水平偏移px 垂直偏移px 模糊强度px 颜色。</p>
<p>​			举例：<img src="/markdown-img/Q2-CSS-1%E5%9F%BA%E6%9C%AC%E6%A0%B7%E5%BC%8F+%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.assets/1680769413222.png" alt="1680769413222" style="zoom:38%;" />就是阴影是盒子往右下角偏移10px的效果。</p>
<p>​			举例2：<img src="/markdown-img/Q2-CSS-1%E5%9F%BA%E6%9C%AC%E6%A0%B7%E5%BC%8F+%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.assets/1680769550505.png" alt="1680769550505" style="zoom:38%;" /></p>
<h1 id="分割线：html的hr标签"><a href="#分割线：html的hr标签" class="headerlink" title="分割线：html的hr标签"></a>分割线：html的hr标签</h1><h1 id="样式有heigh、background-color、border-color（边框颜色）border-width（边框宽度）"><a href="#样式有heigh、background-color、border-color（边框颜色）border-width（边框宽度）" class="headerlink" title="样式有heigh、background-color、border-color（边框颜色）border-width（边框宽度）"></a>样式有heigh、background-color、border-color（边框颜色）border-width（边框宽度）</h1><h1 id="（看起来会有凹陷效果）"><a href="#（看起来会有凹陷效果）" class="headerlink" title="（看起来会有凹陷效果）"></a>（看起来会有凹陷效果）</h1><p>链接文字的颜色：a{color：black；}</p>
<p>链接访问后：a:visited {  }</p>
<p>链接上有鼠标悬停时：a:hover{}</p>
<p>链接被点击时：a:active{}</p>
</li>
<li><p>背景相关:</p>
<p>背景颜色:background-color:</p>
<p>背景图:background-image: url(<a href="https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg">https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg</a>);</p>
</li>
<li><p>盒子相关:</p>
</li>
</ul>
<p>​				对块级元素进行强制内联状:display: inline-block;</p>
<p>​				去除元素前端可能存在的空白符:<style>   div{font-size:0;}    </style></p>
<p>​					</p>
<blockquote>
<p>​	【【Q1为什么不能直接用内联元素？】】</p>
<p>​	【inline-block是元素具备了块级和内联元素的功能，inline最重要的一点就是:</p>
<p>​	元素能够在一行展示，而inline元素所缺失的设置宽高，是block 元素的功能】</p>
</blockquote>
<blockquote>
<p>​	【【Q2为什么用了i-b会导致，设置宽度时，总和必须小于100%？（否则会另起一行）】】</p>
<p>​	【因为HTML 中的换行符、空格符、制表符等合并为空白符，字体大小不为 0 的情况下，</p>
<pre><code> 空白符自然占据定的宽度，使用inline-block 会产生了元素间的空隙。】
</code></pre>
</blockquote>
<blockquote>
<p>​	【【Q3不想自己调试合适的宽度怎么办？】】</p>
<p>​	【在写用了强制内联化的块级元素时，全部写在同一行，一个空格都不要加。比如<p>1</p><p>2</p>】</p>
</blockquote>
<blockquote>
<p>​	【【Q4最佳解决办法是什么？】】</p>
<p>​	【父元素设置font-size:0,子元素有需要可以另外设置font-size，</p>
<p>​	 这样空白符因为font-size:0就不会占据宽度了】</p>
</blockquote>
<blockquote>
<p>实例:</p>
<p><a href="https://www.zhangxinxu.com/study/201011/img-blank-space.html">display:inline-block元素间换行符的空格间隙 </a></p>
<p><a href="https://www.zhangxinxu.com/study/201011/img-font-size-clear-blank.html">font-size:0清除display:inline-block元素换行符间隙</a></p>
</blockquote>
<h3 id="4-style元素"><a href="#4-style元素" class="headerlink" title="4.style元素"></a><strong>4.style元素</strong></h3><ul>
<li><p>单独写在css文件夹里，并在head里通过link来链接。 </p>
<link rel="stylesheet" href="styles.css">
</li>
<li><p>用于给body里的某一种&#x2F;多种元素指定样式。</p>
</li>
</ul>
<h3 id="5-多端样式归一化必加代码【【【【】】】】"><a href="#5-多端样式归一化必加代码【【【【】】】】" class="headerlink" title="5.多端样式归一化必加代码【【【【】】】】"></a><strong>5.多端样式归一化必加代码</strong>【【【【】】】】</h3><p>​    <meta name="viewport" content="width=device-width, initial-scale=1.0" /></p>
<h3 id="6-过度与动画"><a href="#6-过度与动画" class="headerlink" title="6.过度与动画"></a>6.过度与动画</h3><p>过渡：<strong>transition</strong>属性</p>
<p>​				知识：  transition：属性    时间    速度；<img src="/markdown-img/Q2-CSS-1%E5%9F%BA%E6%9C%AC%E6%A0%B7%E5%BC%8F+%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.assets/image-20230406211511826.png" alt="image-20230406211511826" style="zoom:25%;" /></p>
<p>​							transition：a，p   1s    linear；          </p>
<p>​							transition：     all   1s    linear；</p>
<p>​				作用：在规定时间内，暂时改变选定元素属性的值（和选择器一起使用）</p>
<p>​				举例：鼠标悬停在确认按钮上的时候，按钮显示为绿色。</p>
<p>动画：<strong>animation</strong>属性（需要连续的过渡时，改用动画）</p>
<p>@keyframes规则（关键帧规则）</p>
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS学习笔记-2.2选择器</title>
    <url>/2023/03/28/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CSS/Q3-CSS-2%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<h1 id="CSS学习笔记-2-2选择器"><a href="#CSS学习笔记-2-2选择器" class="headerlink" title="CSS学习笔记-2.2选择器"></a>CSS学习笔记-2.2选择器</h1><h4 id="选择器字典"><a href="#选择器字典" class="headerlink" title="选择器字典"></a>选择器字典</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors">属性选择器 - CSS：层叠样式表 | MDN (mozilla.org)</a></p>
<p><a href="https://www.ruanyifeng.com/blog/2009/03/css_selectors.html">CSS选择器笔记 - 阮一峰的网络日志 (ruanyifeng.com)</a></p>
<p><a href="https://frontend30.com/css-selectors-cheatsheet/">CSS Selectors Cheatsheet - FrontEnd30</a></p>
<h4 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h4><p><img src="/.%5CQ3%5Cimage-20230401185155310.png" alt="image-20230401185155310"></p>
<h4 id="选择器的构成"><a href="#选择器的构成" class="headerlink" title="选择器的构成"></a>选择器的构成</h4><p>选择器分为符号和框架</p>
<p>关系选择符：＄ ~ # ^等（可组合到框架中）</p>
<p>框架：[ ] , nth-of-child等 </p>
<h2 id="一-基本选择器"><a href="#一-基本选择器" class="headerlink" title="一.基本选择器"></a>一.基本选择器</h2><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><ol>
<li><h6 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h6><ul>
<li>#id</li>
</ul>
</li>
<li><h6 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h6><ul>
<li>id不能有任何数字</li>
</ul>
</li>
</ol>
<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p><img src="C:\Users\11096\AppData\Roaming\Typora\typora-user-images\image-20230404152420883.png" alt="image-20230404152420883" style="zoom: 50%;" /><img src=".\Q3\image-20230404152441816.png" alt="image-20230404152441816" style="zoom:50%;" /></p>
<h6 id=""><a href="#" class="headerlink" title=""></a><img src=".\Q3\1680587935181.png" alt="1680587935181" style="zoom:50%;" /></h6><p>元素[属性1] [属性2]</p>
<ul>
<li>同时有两个选择的元素</li>
</ul>
<p>元素[属性&#x3D;值] 	</p>
<ul>
<li>属性的值&#x3D;值的元素</li>
<li>a[href&#x3D;”<a href="https://example.org"]">https://example.org&quot;]</a></li>
</ul>
<p>元素[属性^&#x3D;开头值]</p>
<ul>
<li>[attr^&#x3D;value]：表示带有以 <em>attr</em> 命名的属性，且属性值是以 <em>value</em> 开头的元素。</li>
</ul>
<p>元素[属性$&#x3D;结尾值]</p>
<ul>
<li><p>属性的值的结尾是”结尾值“的元素。</p>
</li>
<li><p>a[href$&#x3D;”.org”]：存在 href 属性并且属性值结尾是”.org”的 <a> 元素</p>
</li>
</ul>
<p>元素[属性*&#x3D;”值“]</p>
<ul>
<li>属性的值包含”值“的元素</li>
</ul>
<p>元素[属性~&#x3D;值]</p>
<ul>
<li><p>属性的值包含”值“的元素，该属性是一个以空格作为分隔的值列表</p>
</li>
<li><p>a[class~&#x3D;”logo”]：存在 class 属性并且属性值包含单词”logo”的<a>元素</p>
</li>
</ul>
<p>元素[       i]</p>
<ul>
<li>在属性选择器的右方括号前添加一个用空格隔开的字母 <code>i</code>（或 <code>I</code>），可以在匹配属性值时忽略大小写（支持 ASCII 字符范围之内的字母）。</li>
</ul>
<p>元素[		s]</p>
<ul>
<li>在属性选择器的右方括号前添加一个用空格隔开的字母 <code>s</code>（或 <code>S</code>），可以在匹配属性值时区分大小写（支持 ASCII 字符范围之内的字母）。</li>
</ul>
<h3 id="3-元素选择器"><a href="#3-元素选择器" class="headerlink" title="3.元素选择器"></a>3.元素选择器</h3><h4 id="通用元素选择器"><a href="#通用元素选择器" class="headerlink" title="通用元素选择器"></a>通用元素选择器</h4><ul>
<li></li>
</ul>
<p>**【【【【【【没有找到】】】】】】】</p>
<h4 id="同级元素通用选择器"><a href="#同级元素通用选择器" class="headerlink" title="同级元素通用选择器"></a>同级元素通用选择器</h4><img src=".\Q3\image-20230404151520256.png" alt="image-20230404151520256" style="zoom:50%;" />

<h4 id="多元素的组合选择器"><a href="#多元素的组合选择器" class="headerlink" title="多元素的组合选择器"></a>多元素的组合选择器</h4><img src=".\Q3\1680592298848.png" alt="1680592298848" style="zoom: 50%;" />

<h2 id="二-关系型选择器"><a href="#二-关系型选择器" class="headerlink" title="二.关系型选择器"></a>二.关系型选择器</h2><p>子选择器<img src=".\Q3\image-20230404132255364.png" alt="image-20230404132255364" style="zoom:50%;" /></p>
<p>后代选择器<img src=".\Q3\image-20230404132326607.png" alt="image-20230404132326607" style="zoom: 50%;" /></p>
<p>相邻兄弟选择器<img src=".\Q3\image-20230404133357624.png" alt="image-20230404133357624" style="zoom:50%;" /></p>
<p>通用兄弟选择<img src=".\Q3\image-20230404133450743.png" alt="image-20230404133450743" style="zoom:50%;" /></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Column_combinator">列组合器</a> </p>
<p><code>||</code> 组合器选择属于某个表格行的节点。</p>
<p><strong>语法：</strong><code>A || B</code></p>
<p><strong>例子：</strong><code>col || td</code> 会匹配所有 作用域内的td元素。</p>
<p>独子选择器<img src=".\Q3\image-20230404133754657.png" alt="image-20230404133754657" style="zoom:50%;" />		a 表示选择a元素的独子，b表示如果b是独子则被选择</p>
<p>第 N 个最后一个子选择器<img src=".\Q3\image-20230404134515253.png" alt="image-20230404134515253" style="zoom:50%;" /></p>
<p>首项选择器<img src=".\Q3\image-20230404134548820.png" alt="image-20230404134548820" style="zoom:50%;" />可以根据元素、属性进行选择</p>
<p>尾项选择器<img src=".\Q3\image-20230404134901176.png" alt="image-20230404134901176" style="zoom:50%;" />尾属性的class不等于x则不选任何东西</p>
<h2 id="三-伪类选择器"><a href="#三-伪类选择器" class="headerlink" title="三.伪类选择器"></a>三.伪类选择器</h2><p>用户界面伪类选择器</p>
<img src=".\Q3\image-20230404150313528.png" alt="image-20230404150313528" style="zoom: 50%;" />

<img src=".\Q3\image-20230404150546942.png" alt="image-20230404150546942" style="zoom:50%;" />

<img src=".\Q3\image-20230404152535460.png" alt="image-20230404152535460" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">两个写法相同的选择器，意思为子元素的父元素的第n个子元素</span><br><span class="line">父元素 子元素：nth-child(1)</span><br><span class="line">父元素 子元素：first-child</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*意思是.dot的父元素的第二个孩子*/</span><br><span class="line">.bg2 .dot:nth-child(2)&#123;</span><br><span class="line">    align-self: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反选伪类选择器<img src=".\Q3\image-20230404135618254.png" alt="image-20230404135618254" style="zoom:50%;" /></p>
<p>看不懂</p>
<img src=".\Q3\image-20230404152643373.png" alt="image-20230404152643373" style="zoom: 50%;" />

<h2 id="四-伪元素选择器"><a href="#四-伪元素选择器" class="headerlink" title="四.伪元素选择器"></a>四.伪元素选择器</h2><img src=".\Q3\image-20230404150514659.png" alt="image-20230404150514659" style="zoom:50%;" />



<h2 id="五-易错点"><a href="#五-易错点" class="headerlink" title="五.易错点"></a>五.易错点</h2><p>1.~：写在[ ]里表示字符串匹配，匹配到就选择。写在[ ]外表示通用兄弟选择器。</p>
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习笔记-1基础</title>
    <url>/2023/03/28/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML/Q1-HTML-Note1/</url>
    <content><![CDATA[<h1>HTML学习笔记-1基础</h1>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.&lt;标签名 属性1=“值1” 属性2=“值2”&gt;</span><br><span class="line">2.元素==标签+内容</span><br><span class="line">3.Dom树：文档对象模型，以树形的方式直观的表示标签嵌套结构</span><br><span class="line">4.html不区分大小写</span><br><span class="line">5.文档基础</span><br><span class="line">&lt;!DOCTYPE html&gt;:</span><br><span class="line">声明文档类型。需要包含它才能使其他东西正常工作。</span><br><span class="line"></span><br><span class="line">&lt;html&gt;&lt;/html&gt;:</span><br><span class="line">这个元素包裹了页面中所有的内容，有时被称为根元素。</span><br><span class="line"></span><br><span class="line">&lt;head&gt;&lt;/head&gt;:</span><br><span class="line">这个元素是一个容器，它包含了所有你想包含在 HTML 页面中但不在 HTML 页面中显示的内容。</span><br><span class="line">这些内容包括你想在搜索结果中出现的关键字和页面描述、CSS 样式、字符集声明等等。以后的章节中会学到更多相关的内容。</span><br><span class="line"></span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;:</span><br><span class="line">    这个元素代表了不能由其他 HTML 元相关元素表示的元数据【描述html页面的数据】，比如 &lt;base&gt;、&lt;link&gt;、&lt;script&gt;、&lt;style&gt; 或 &lt;title&gt;。</span><br><span class="line"></span><br><span class="line">&lt;title&gt;&lt;/title&gt;:</span><br><span class="line">这设置了页面的标题，也就是出现在该页面加载的浏览器标签中的内容。当页面被加入书签时，页面标题也被用来描述该页面。</span><br><span class="line"></span><br><span class="line">&lt;body&gt;&lt;/body&gt;:</span><br><span class="line">包含了你访问页面时所有显示在页面上的内容，包含文本、图片、视频、游戏、可播放音频轨道等等。</span><br><span class="line"></span><br><span class="line">&lt;!--  ctrl+alt+L 格式化代码--&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS学习笔记-2.1盒子、定位与布局</title>
    <url>/2023/04/01/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CSS/Q3-CSS-1%E5%AE%9A%E4%BD%8D%E4%B8%8E%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h1 id="CSS学习笔记-2-1盒子、定位与布局-三种重要布局及其它布局"><a href="#CSS学习笔记-2-1盒子、定位与布局-三种重要布局及其它布局" class="headerlink" title="CSS学习笔记-2.1盒子、定位与布局-三种重要布局及其它布局"></a>CSS学习笔记-2.1盒子、定位与布局-三种重要布局及其它布局</h1><p><a href="https://www.icourse163.org/learn/BFU-1003382003?tid=1469987444#/learn/content?type=detail&id=1253020763&sm=1">Web前端开发_中国大学MOOC(慕课) (icourse163.org)</a></p>
<h2 id="布局三种定位机制："><a href="#布局三种定位机制：" class="headerlink" title="布局三种定位机制："></a>布局三种定位机制：</h2><p>文档流（元素分类inlineblock.元素类型转换display）→浮动（float属性）→层（position属性）</p>
<img src=".\Q3\1680613753098.png" alt="1680613753098" style="zoom:50%;" />

<h2 id="1-元素布局（终极布局，最好用）"><a href="#1-元素布局（终极布局，最好用）" class="headerlink" title="1.元素布局（终极布局，最好用）"></a>1.元素布局（终极布局，最好用）</h2><ol>
<li><h3 id="灵活-x2F-弹性-x2F-伸缩布局flex"><a href="#灵活-x2F-弹性-x2F-伸缩布局flex" class="headerlink" title="灵活&#x2F;弹性&#x2F;伸缩布局flex"></a>灵活&#x2F;弹性&#x2F;伸缩布局flex</h3><p><a href="https://www.bilibili.com/video/BV1Lp4y1S7XM/?spm_id_from=333.337.search-card.all.click&vd_source=ef1cf51b50e94d98e56cf1e5ecbbeb92">五分钟掌握 css3 flex弹性布局</a></p>
<p>Flex 布局教程：语法篇</p>
<p><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p>
<p>Flex 布局教程：实例篇</p>
<p><a href="https://www.ruanyifeng.com/blog/2015/07/flex-examples.html">https://www.ruanyifeng.com/blog/2015/07/flex-examples.html</a></p>
<p>小青蛙游戏学flex</p>
<p><a href="http://flexboxfroggy.com/">Flexbox Froggy - A game for learning CSS flexbox</a></p>
<h4 id="属性作用域分类："><a href="#属性作用域分类：" class="headerlink" title="属性作用域分类："></a>属性作用域分类：</h4><img src=".\Q3\image-20230406114818874.png" alt="image-20230406114818874" style="zoom: 25%;" />



<h4 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h4><ol>
<li><p>display：flex；</p>
<p>常用于有高度的类（body也能用）。且不能用于有其它display需求的类。（如inline-block）。</p>
</li>
<li><p>主轴侧轴的改变</p>
<p>当flex-derection的值改变时，两个轴也会跟着变，也就是说justify-content和align-items也要变。</p>
</li>
<li><p>flex的作用域</p>
<p>只有所在的类，所在类的子类都不算。比如body里写了的flex，justify只能控制body的布局，想控制内部元素的布局就只能嵌套，在.div里也写flex。</p>
</li>
<li><p><strong>弹性布局是一维的，网页是二维的</strong>，想要控制盒子，就需要父元素控制一个轴，子元素控制另一个轴。</p>
</li>
<li><p>弹性布局是可以嵌套的，祖宗元素设置display：flex，父元素也设置display：flex。</p>
</li>
</ol>
<h4 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h4><p>1.布局原理：采用 Flex 布局的元素，称为容器。它的所有子元素自动成为容器成员，称为项目。</p>
<p>2.易错点：父盒子设为 flex 后，子元素的float、clear和 vertical-align属性将失效。</p>
<p>3.flex布局父项常见属性<br>            <strong>flex-direction：</strong>设置主轴的方	</p>
<blockquote>
<p>​	   row：行    column：柱子</p>
</blockquote>
<img src=".\Q3\image-20230329190849686.png" alt="image-20230329190849686" style="zoom:50%;" />

<p>​			<strong>flex-wrap：</strong>设置子元素是否换行</p>
<p>​						nowrap 不换行	(装不下会缩小子元素的宽度)<br>​						wrap 换行</p>
<p>​			<strong>justify-content：</strong>设置<strong>主轴</strong>上的子元素排列方式【【【【【不分单行多行吗？】】】】】】</p>
<img src=".\Q3\image-20230329190910922.png" alt="image-20230329190910922" style="zoom:50%;" />


<p>​			<strong>align-items：</strong>设置<strong>辅轴</strong>上的子元素排列方式（单行）</p>
<p>​						该属性是控制子项在侧轴上的排列方式 在子项为单行的时候使用<br>​						flex-start 从头部开始<br>​						flex-end 从尾部开始<br>​						center 居中显示<br>​						stretch 拉伸      拉伸高度直至完整的占据父元素的高度。</p>
<p>​			<strong>align-content：</strong> 设置<strong>辅轴</strong>上的子元素的排列方式（多行）</p>
<p>​				<img src=".\Q3\image-20230329190910922.png" alt="image-20230329190910922" style="zoom: 50%;" /></p>
<p>​			align-content 和align-items区别<br>​						align-items 适用于单行情况下， 只有上对齐、下对齐、居中和 拉伸<br>​						align-content适用多行换行的情况（单行无效）</p>
<p>​			<strong>flex-flow：</strong>复合属性，相当于同时设置了 flex-direction 和 flex-wrap</p>
<p>3.flex布局子项常见属性【少用】<br>            flex子项目占的份数<br>            align-self控制子项自己在侧轴的排列方式<br>            order属性定义子项的排列顺序（前后顺序）<br>4.flex属性<br>            flex 属性定义子项目分配剩余空间，用flex来表示占多少份数。</p>
<p>​			<strong>【重点：flex：1；表示flex-grow1；&amp;&amp;  flex-shrink：1；</strong></p>
<p>​			<strong>意味着如果盒子剩余的布局大就自适应缩小，反之就自适应增大】</strong></p>
<p>5.align-self控制子项自己在侧轴上的排列方式【少用】<br>            align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。<br>            默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</p>
</li>
<li><h3 id="网格布局Grid"><a href="#网格布局Grid" class="headerlink" title="网格布局Grid"></a>网格布局Grid</h3><p><a href="https://www.runoob.com/css3/css-grid.html">CSS 网格布局 | 菜鸟教程 (runoob.com)</a></p>
<h4 id="属性作用域分类：-1"><a href="#属性作用域分类：-1" class="headerlink" title="属性作用域分类："></a>属性作用域分类：</h4><img src=".\Q3\image-20230406160133663.png" alt="image-20230406160133663" style="zoom:50%;" /></li>
</ol>
<h4 id="知识点：-1"><a href="#知识点：-1" class="headerlink" title="知识点："></a>知识点：</h4><p>​					<img src=".\Q3\image-20230406160552994.png" alt="image-20230406160552994" style="zoom: 25%;" /></p>
<h1 id="2-文档流定位（默认布局）"><a href="#2-文档流定位（默认布局）" class="headerlink" title="2.文档流定位（默认布局）"></a>2.文档流定位（默认布局）</h1><h1 id="（元素分类inlineblock-元素类型转换display）"><a href="#（元素分类inlineblock-元素类型转换display）" class="headerlink" title="（元素分类inlineblock.元素类型转换display）"></a>（元素分类inlineblock.元素类型转换display）</h1><p>元素分类：</p>
<p>​			inline：两个inline元素之间会有一个间隙，需要去除。</p>
<p>​			block：</p>
<p>​			inline-block：</p>
<p>元素转换：</p>
<h1 id="3-浮动定位"><a href="#3-浮动定位" class="headerlink" title="3.浮动定位"></a>3.浮动定位</h1><h4 id="float属性值："><a href="#float属性值：" class="headerlink" title="float属性值："></a>float属性值：</h4><p>​			1.left</p>
<p>​			2.right</p>
<p>​			3.top</p>
<p>​			4.bottom</p>
<h4 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src=".\Q3\image-20230405161130046.png" alt="image-20230405161130046" style="zoom: 33%;" /><img src="C:\Users\11096\AppData\Roaming\Typora\typora-user-images\image-20230405161204082.png" alt="image-20230405161204082" style="zoom:33%;" /><img src="C:\Users\11096\AppData\Roaming\Typora\typora-user-images\image-20230405161227150.png" alt="image-20230405161227150" style="zoom: 25%;" /></h4><h4 id="易错点：1注意浮动时，宽度是否够用的情况"><a href="#易错点：1注意浮动时，宽度是否够用的情况" class="headerlink" title="易错点：1注意浮动时，宽度是否够用的情况"></a>易错点：1注意浮动时，宽度是否够用的情况</h4><p>​					<img src="C:\Users\11096\AppData\Roaming\Typora\typora-user-images\image-20230405161350930.png" alt="image-20230405161350930" style="zoom: 25%;" /><img src=".\Q3\image-20230405161312570.png" alt="image-20230405161312570" style="zoom: 25%;" /></p>
<h4 id="易错点：2浮动与flex互斥"><a href="#易错点：2浮动与flex互斥" class="headerlink" title="易错点：2浮动与flex互斥"></a>易错点：2浮动与flex互斥</h4><h4 id="clear清除浮动："><a href="#clear清除浮动：" class="headerlink" title="clear清除浮动："></a>clear清除浮动：</h4><p>​	易错点：清除某一方向的浮动不是把某方向上的浮动元素删除，</p>
<p>​								而是该元素的某一方向不能有浮动元素。也就是说，该元素会另起一行。</p>
<p>​	属性值：both（两侧）left right</p>
<p>​	举例：</p>
<p>​			单向清除浮动举例<img src=".\Q3\image-20230405165442568.png" alt="image-20230405165442568" style="zoom:25%;" /></p>
<p>​			both清除浮动举例</p>
<p>​											<img src="C:\Users\11096\AppData\Roaming\Typora\typora-user-images\image-20230405165348256.png" alt="image-20230405165348256" style="zoom:25%;" /><img src=".\Q3\image-20230405165322218.png" alt="image-20230405165322218" style="zoom: 25%;" /></p>
<h4 id="float总结："><a href="#float总结：" class="headerlink" title="float总结："></a>float总结：</h4><p>​		1.浮动定位是在同一层面的，可以两个都设置成向左浮动或者一个向左一个向右，来实现同样的效果。 </p>
<p>​		2.清除浮动不是删除元素，相当于另起一行的效果 。</p>
<p>​		3.实现几行几列的效果，最初用的都是浮动。想要实现分行，就用清除浮动，想要实现分列，就用增加浮动。</p>
<h1 id="4-层定位"><a href="#4-层定位" class="headerlink" title="4.层定位"></a>4.层定位</h1><h4 id="1-position属性"><a href="#1-position属性" class="headerlink" title="1.position属性"></a>1.position属性</h4><p><a href="https://www.w3school.com.cn/css/css_positioning.asp">CSS 布局 - position 属性 (w3school.com.cn)</a></p>
<p>​	概念：</p>
<p>​		<code>position</code> 属性规定应用于元素的定位方法的类型。</p>
<p>​	四个不同的平面定位属性：</p>
<p>​		top bottom left right</p>
<p>​	一个层叠定位属性：</p>
<p>​		z-index：哪个元素应放置在其他元素的前面或后面，正负都可，取值大的在上方。</p>
<p>​	五种不同的定位方式：</p>
<p>​		static（无定位，还是文件流模式定位）</p>
<p>​						易错点：top bottom left right z-index无效。</p>
<p>​		fixed（固定定位，相对于浏览器窗口进行定位）</p>
<p>​										<strong>用于侧边栏</strong></p>
<p>​										<strong>易错点：必须设置宽度高度，因为旧有的框架被position打破了。记得设置成100%</strong></p>
<p>​		relative（相对定位，相对于直接父元素进行定位，不管直接父元素是什么定位方式）</p>
<p>​						易错点：偏移后，偏移前的位置依然被保留，所以不会有其它元素自动占据它原来的位置。</p>
<p>​										如果附近有块级元素，它的相对定位会被影响。</p>
<p>​		absolute（绝对定位，从直接父元素开始向外层查找，</p>
<p>​						直到找到不是static定位的父元素。如果都是static，则相对于body进行定位）</p>
<p>​						易错点：偏移后，偏移前的位置不再被保留，所以会有其它元素自动占据它原来的位置。</p>
<p>​		sticky（粘性定位，根据用户的滚动位置进行定位）</p>
<p>​						适用于：导航栏本身并不在网页的边边上，在文章中间。直到用户下拉页面，使导航栏到了边边上，为了继续展示导航栏，导航栏就会附着在边上。不是这种情况的话，relative就行了。</p>
<p>​										<strong>用于吸顶吸底广告</strong>。</p>
<p>​										兼容性<a href="https://caniuse.com/?search=position:sticky;">“position:sticky;” | Can I use… Support tables for HTML5, CSS3, etc</a></p>
<p>​	粘性定位与固定定位的区别：</p>
<p>​					<a href="https://blog.csdn.net/weixin_51093047/article/details/126923647"> 固定定位（fixed）和粘性定位（sticky）的比较-CSDN博客</a>						</p>
<p>​					粘性定位算在文档流中，固定定位不算。所以固定的小广告会挡视线，粘性的不会</p>
<p>​	总结：</p>
<p>​					祖宗元素相对定位，子孙元素全部绝对定位。这样保证更改祖宗元素时，子孙元素都能跟它一起动。</p>
<p>​	实例：</p>
<p>​					<a href="https://juejin.cn/post/7175552665974210615">CSS固定定位与粘性定位4大企业级案例 - 掘金 (juejin.cn)</a></p>
<h1 id="3-盒子模型"><a href="#3-盒子模型" class="headerlink" title="3.盒子模型"></a>3.盒子模型</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/The_box_model">盒模型 - 学习 Web 开发 | MDN</a></p>
<p>内边距:   <strong>padding</strong></p>
<p>​                padding-left&#x2F;right&#x2F;top&#x2F;bottom:20px;  </p>
<p>​				padding:10px;（上下左右都是10）</p>
<p>​				<a href="https://www.w3school.com.cn/cssref/pr_padding.asp">CSS padding 属性更多用法</a></p>
<p>框架：<strong>border</strong></p>
<p>​				框架为宽度50px的实心黑色，border: 50px <strong>solid</strong> black;</p>
<p>外边距：   <strong>margin</strong></p>
<p>​                水平居中:margin-left: auto; &amp;&amp; margin-right: auto;</p>
<p>​				可用于块级标签，p、div等。</p>
<p>​                去除默认边框宽度：margin：0；（font-size：0是为了解决多余空白符的问题）</p>
<p>​                缩小上方过大的宽度： margin-top:-25px;（需要来回调试）</p>
<p>盒子大小：box-sizing</p>
<p>CSS3中对盒子进行2D变换的属性：<strong>transform</strong></p>
<p>​				旋转：**transform:rotate(30deg);**顺时针旋转30度。transform:rotate(-30deg);逆时针旋转30度。</p>
<p>​				缩放：<strong>transform:scale(x,y);</strong></p>
<p>​							xy取值范围为 【0-1缩小】 【1 ~ +∞放大】</p>
<h5 id="盒子种类"><a href="#盒子种类" class="headerlink" title="盒子种类:"></a>盒子种类:</h5><img src=".\Q3\image-20230404195037016.png" alt="image-20230404195037016" style="zoom:50%;" />

<h5 id="两种盒模型的区别："><a href="#两种盒模型的区别：" class="headerlink" title="两种盒模型的区别："></a>两种盒模型的区别：</h5><p>​		分别定义了user agent应该如何计算一个元素的总宽度和总高度的方法</p>
<ul>
<li>box-sizing：<code>content-box</code> 是默认值。如果你设置一个元素的宽为 100px，那么这个元素的内容区会有 100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。</li>
<li>box-sizing：<code>border-box</code> 告诉浏览器：你想要设置的边框和内边距的值是包含在 width 内的。也就是说，如果你将一个元素的 width 设为 100px，那么这 100px 会包含它的 border 和 padding，内容区的实际宽度是 width 减去 (border + padding) 的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。</li>
</ul>
<h5 id="盒子相关的问题："><a href="#盒子相关的问题：" class="headerlink" title="盒子相关的问题："></a>盒子相关的问题：</h5><p>​		<a href="https://zhuanlan.zhihu.com/p/110617108">CSS 的两种盒模型 - 及边距异常合并问题</a></p>
<h4 id="outline和border的区别"><a href="#outline和border的区别" class="headerlink" title="outline和border的区别"></a>outline和border的区别</h4><p>​	主要区别在于: </p>
<p>​		1.应用场景:一般border能适用于任何元素的样式，outline针对链接、表单控件和ImageMap等元素设计(比如input&#x2F;textarea) </p>
<p>​		2.特性不一样：border一般会被计算在元素的宽高大小里面，影响元素的尺寸、位置。outline不会</p>
<p>​		3.outline 的效果将随元素的 focus 而自动出现，相应的由 blur 而自动消失，常设置悬停的动态效果。</p>
<h3 id="相关层次图"><a href="#相关层次图" class="headerlink" title="相关层次图"></a>相关层次图</h3><p>​	margin：外边距</p>
<p>​	border：边框</p>
<p>​	outline：边框</p>
<p>​	padding：内边距</p>
<img src=".\Q3\image-20230329124305228.png" alt="image-20230329124305228" style="zoom: 33%;" />
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS学习笔记-2.3flex布局实现</title>
    <url>/2023/04/01/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CSS/Q3-CSS-3%E5%AE%9E%E8%B7%B5%EF%BC%88flex%E5%B8%83%E5%B1%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="CSS学习笔记-2-3实践"><a href="#CSS学习笔记-2-3实践" class="headerlink" title="CSS学习笔记-2.3实践"></a>CSS学习笔记-2.3实践</h1><p><a href="https://www.bilibili.com/video/BV1Lp4y1S7XM/?spm_id_from=333.337.search-card.all.click&vd_source=ef1cf51b50e94d98e56cf1e5ecbbeb92">五分钟掌握 css3 flex弹性布局</a></p>
<p>Flex 布局教程：语法篇</p>
<p><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p>
<p>Flex 布局教程：实例篇</p>
<p><a href="https://www.ruanyifeng.com/blog/2015/07/flex-examples.html">https://www.ruanyifeng.com/blog/2015/07/flex-examples.html</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">  &lt;link  rel=&quot;stylesheet&quot; href=&quot;../CSS/实践二参考答案.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">/*1水平垂直居中*/</span><br><span class="line">/*2第一个点不动，第二个点用水平垂直flex-end*/</span><br><span class="line">/*3第一个点不动，第二个点水平垂直居中，第三个点用水平垂直flex-end*/</span><br><span class="line">/*4第一个第二个点用between分开，第三四个用垂直end且between*/</span><br><span class="line">/*5上一个的基础上加上一个水平垂直居中的*/</span><br><span class="line">/*6三个between / 自动换行且between / 挨个设置横纵轴位置*/</span><br><span class="line"></span><br><span class="line">/*1水平垂直居中*/</span><br><span class="line">/*2水平垂直flex-end*/</span><br><span class="line">/*3between*/</span><br><span class="line">/*4水平垂直且between*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以上内容，不用self无法实现</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;first-face&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;second-face&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;third-face&quot;&gt;</span><br><span class="line">  &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;fourth-face&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;column&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;column&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;fifth-face&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;column&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;column&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;column&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;sixth-face&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;column&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;column&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;pip&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--【为什么写div的话，再写flex就没有用了？因为是块级元素，flex只能作用于内联样式得元素，所以要display：inline-block】--&gt;</span><br><span class="line">&lt;!--【【【【【【【为什么把dotdiv改成span后，除了只有一个点的，其它得一个点都没有？】】】】】--&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.first-face &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.second-face &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line">/*nth-child(n) 选择器：选择其父元素的第n个子元素*/</span><br><span class="line">.second-face .pip:nth-of-type(2) &#123;</span><br><span class="line">    align-self: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.third-face &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.third-face .pip:nth-of-type(2) &#123;</span><br><span class="line">    align-self: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.third-face .pip:nth-of-type(3) &#123;</span><br><span class="line">    align-self: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fourth-face, .sixth-face &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fourth-face .column, .sixth-face .column &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fifth-face &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fifth-face .column &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fifth-face .column:nth-of-type(2) &#123;</span><br><span class="line">    justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* OTHER STYLES */</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">html, body &#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    vertical-align: center;</span><br><span class="line">    flex-wrap: wrap;</span><br><span class="line">    align-content: center;</span><br><span class="line">    font-family: &#x27;Open Sans&#x27;, sans-serif;</span><br><span class="line"></span><br><span class="line">    background: linear-gradient(top, #222, #333);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*这是什么选择器*/</span><br><span class="line">[class$=&quot;face&quot;] &#123;</span><br><span class="line">    margin: 16px;</span><br><span class="line">    padding: 4px;</span><br><span class="line"></span><br><span class="line">    background-color: #e7e7e7;</span><br><span class="line">    width: 104px;</span><br><span class="line">    height: 104px;</span><br><span class="line">    object-fit: contain;</span><br><span class="line"></span><br><span class="line">    /*insert 不会用*/</span><br><span class="line">    box-shadow:</span><br><span class="line">            inset 0 5px white,</span><br><span class="line">            inset 0 -5px #bbb,</span><br><span class="line">            inset 5px 0 #d7d7d7,</span><br><span class="line">            inset -5px 0 #d7d7d7;</span><br><span class="line"></span><br><span class="line">    border-radius: 10%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pip &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    width: 24px;</span><br><span class="line">    height: 24px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    margin: 4px;</span><br><span class="line"></span><br><span class="line">    background-color: #333;</span><br><span class="line">    box-shadow: inset 0 3px #111, inset 0 -3px #555;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习笔记-3进阶标签与属性</title>
    <url>/2023/03/28/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML/Q1-HTML-Note3/</url>
    <content><![CDATA[<h1 id="HTML学习笔记-3进阶标签与属性"><a href="#HTML学习笔记-3进阶标签与属性" class="headerlink" title="HTML学习笔记-3进阶标签与属性"></a>HTML学习笔记-3进阶标签与属性</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.超链接     	&lt;a href=&quot;网址&quot; target=&quot;_blank&quot; &gt; 文字或图片 &lt;/a&gt;</span><br><span class="line"> 注：href就是属性的一种</span><br><span class="line"></span><br><span class="line">2.内联元素与块级元素</span><br><span class="line"> 内联：不会自动换行，比如em、strong、input、button。也就是说。如果不特意指定button的作用的话，如果input、button相邻，button就会被默认关联在input上。</span><br><span class="line"> 块级：会自动换行，比如p、fieldset。注：section跟他们有点像,不管什么东西，都要记得用section包裹。</span><br><span class="line">【【【【【【【&lt;article&gt;是干什么用的？？】】】】】</span><br><span class="line">&lt;article&gt; 标签规定独立的自包含内容。</span><br><span class="line">一篇文章应有其自身的意义，应该有可能独立于站点的其余部分对其进行分发。【【【分发是什么意思】】】</span><br><span class="line">&lt;article&gt; 元素的潜在来源：</span><br><span class="line">论坛帖子</span><br><span class="line">报纸文章</span><br><span class="line">博客条目</span><br><span class="line">用户评论】</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">11.内容分块元素      &lt;section&gt;&lt;/section&gt;</span><br><span class="line">section 元素的使用禁忌如下：</span><br><span class="line">.不要将section元素用作设置样式的页面容器，那是div的工作；</span><br><span class="line">.如果article元素或者aside元素或者nav元素更符合使用条件，不要使用section元素；</span><br><span class="line">.不要为没有标题的内容区块使用section元素；</span><br><span class="line"></span><br><span class="line">3.空元素/自闭合元素</span><br><span class="line">  比如&lt;img&gt; &lt;input&gt;</span><br><span class="line">4.属性与布尔属性</span><br><span class="line">  属性：元素的附加限定。用于控制这个元素的行为。</span><br><span class="line">  布尔属性：用布尔值来代表“是否”允许元素做什么事</span><br><span class="line"> eg.输入框   使用 disabled 属性来禁止在输入框里输入</span><br><span class="line">          	&lt;input type=&quot;text&quot; disabled /&gt;</span><br><span class="line">          	下面这个输入框不包含 disabled 属性，所以用户可以向其中输入</span><br><span class="line">        	&lt;input type=&quot;text&quot; /&gt;</span><br><span class="line"></span><br><span class="line">6.特殊字符的引用     https://zh.wikipedia.org/wiki/XML%E4%B8%8EHTML%E5%AD%97%E7%AC%A6%E5%AE%9E%E4%BD%93%E5%BC%95%E7%94%A8%E5%88%97%E8%A1%A8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">12.无/有序列表        &lt;ul&gt;   &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt;   &lt;/ul&gt;</span><br><span class="line">                    &lt;ol&gt;   &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt;   &lt;/ol&gt;</span><br><span class="line"></span><br><span class="line">13.全局属性</span><br><span class="line">13.1id</span><br><span class="line">        id 属性用于标识特定的 HTML 元素。 每个 id 属性的值必须不同于整个页面的所有其他 id 值。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">表单相关</span><br><span class="line">14.表单（接下来的东西都与表单有关）             &lt;form action=&quot;/页面地址&quot; required&gt;&lt;/form&gt;</span><br><span class="line">   # form表单元素，用来收集来自用户的信息</span><br><span class="line">   # action属性，就是我需要把这表单信息提交到后台，action相当于指明哪个接口。例如，&lt;form action=&quot;http://localhost:30/form-submit&quot;&gt;&lt;/form&gt; 告诉浏览器应该将表单数据发送到路径/submit-url</span><br><span class="line">   # required属性，用于防止用户不输入信息也能提交。</span><br><span class="line">    不过现在form的action用的比较少了，了解一下action属性的用途就行</span><br><span class="line">    一般我们实际开发很少用action去发送请求，而是收集表单数据，用fetch之类去发送给后端（js）</span><br><span class="line"></span><br><span class="line">15.可点击的按钮      &lt;button&gt;&lt;/button&gt;</span><br><span class="line">单击没有任何属性的表单按钮的默认行为，会将表单提交到表单的 action 属性中指定的位置。</span><br><span class="line">【一般来说是一个form里面有一个type为submit的按钮。这个按钮的作用就是把form表单的数据进行提交。</span><br><span class="line">即使你在文本输入下方添加了按钮，它们也会在页面上彼此相邻。 这是因为 input 和 button 元素都是内联元素，它们不会出现在新的行上。</span><br><span class="line">你添加的按钮将默认提交表单。 然而，依赖默认行为可能造成混乱。 type=“submit” 添加到 button 以明确它是一个提交按钮。】</span><br><span class="line"></span><br><span class="line">16.单选按钮值  radio</span><br><span class="line">radio是input标签中，type属性的一种值。比如&lt;input type=&quot;radio&quot;&gt;</span><br><span class="line">重点：想要实现几个单选按钮互斥（如男女），就要把两个单选按钮所在的index加上相同的name属性.</span><br><span class="line">          &lt;label&gt;&lt;input id=&quot;indoor&quot; type=&quot;radio&quot; name=&quot;indoor-outdoor&quot;&gt; Indoor&lt;/label&gt;</span><br><span class="line">          &lt;label&gt;&lt;input id=&quot;outdoor&quot; type=&quot;radio&quot; name=&quot;indoor-outdoor&quot;&gt; Outdoor&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">17.给某一块增加实线框用的块级标签     &lt;fieldset&gt;&lt;/fieldset&gt;</span><br><span class="line">      相当于表单分块，会形成一个实线框框。不分块就会默认分出超级多的块，乱的要死。 fieldset 元素是块级元素，这意味着它们出现在新的一行上。</span><br><span class="line">17.1 fieldset 元素中内容的标题      &lt;legend&gt;文字提示&lt;/legend&gt;</span><br><span class="line">      会在fieldset形成的实现框之上，显示文字。一般用于提示用户应该输入什么样的数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">图片相关：img figure figcaption</span><br><span class="line">8.图片标签                     &lt;img src=&quot;地址&quot; alt=&quot;代替地址所显示的文本&quot;&gt;</span><br><span class="line">    所有的 img 元素都应该有一个 alt 属性。 alt 属性的文本（值）有两个作用，</span><br><span class="line">    第一个作用是让屏幕阅读器可以知晓图片的内容，这会对网页的可访问性有很大提升；另一个作用是当图片无法加载时，页面需要显示的替代文本。</span><br><span class="line">9.独立的内容                 &lt;figure&gt;&lt;/figure&gt;</span><br><span class="line">图像，并允许你将图像与标题相关联。</span><br><span class="line">10.图像标题                  &lt;figcaption&gt;&lt;/&gt;figcaption&gt;</span><br><span class="line">用于描述 figure 元素中包含的图像,比如某张图的标题叫“图1”。</span><br><span class="line"> &lt;figure&gt;</span><br><span class="line">          &lt;img src=&quot;链接&quot; alt=&quot;文字&quot;&gt;</span><br><span class="line">          &lt;figcaption&gt;Cats love lasagna.&lt;/figcaption&gt;</span><br><span class="line"> &lt;/figure&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输入相关</span><br><span class="line">5.输入框     &lt;input&gt;</span><br><span class="line">    最复杂的标签，以下为常用属性</span><br><span class="line">    #type=“text”                  待输入数据类型为text文字</span><br><span class="line">    </span><br><span class="line">    #type=“radio”                 单选项</span><br><span class="line">            1.使文本与radio绑定的方法</span><br><span class="line">            &lt;label&gt;&lt;input type=&quot;radio&quot;&gt;Indoor&lt;/label&gt;表示有一个单选项Indoor</span><br><span class="line">            </span><br><span class="line">    #type=&quot;checkbox&quot;       复选框</span><br><span class="line">            使文本与checkbox绑定的方法</span><br><span class="line">            1.id与for      &lt;input id=&quot;loving&quot; type=&quot;checkbox&quot;&gt;  </span><br><span class="line">            			   &lt;label for=&quot;loving&quot;&gt;Loving&lt;/label&gt;</span><br><span class="line">            			   </span><br><span class="line">    #&lt;label&gt;&lt;/label&gt;     包裹含有radio/checkbox属性的input元素。</span><br><span class="line">                         【一句input一对儿label。】</span><br><span class="line">                         用于将 input 元素与其近邻的文本进行绑定，达到点击文本也能单选的效果。</span><br><span class="line">                         </span><br><span class="line">    #checked属性         使复选框或单选按钮默认被选中</span><br><span class="line"></span><br><span class="line">    #name               name是给后端人员搜索用的，id是给前端人员写代码用的。</span><br><span class="line">                        【input这一类属于原生的控件，</span><br><span class="line">                        name属性的主要作用就是用来在发送的时候作为url拼接，</span><br><span class="line">                        拼接成查询条件，可以理解成：后端需要什么查询条件，前端的传对应的name】</span><br><span class="line">                        主要是用于用户提交时，将自动拼接给程序员看</span><br><span class="line">                        （注：多个input有同一个name会使他们互斥）</span><br><span class="line">                        </span><br><span class="line">    #placeholder         占位符（提示用户该输入什么）</span><br><span class="line">    </span><br><span class="line">    #value               默认值（如果用户不输入，就提交默认值）</span><br><span class="line"></span><br><span class="line">    注：&lt;input type=&quot;radio&quot;&gt;Indoor表示有一个单选项Indoor</span><br><span class="line">    注：&lt;input type=&quot;checkbox&quot;&gt; Loving请确保元素和文本之间有一个空格。</span><br><span class="line">    教程：https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#attr-disabled</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">6.文字相关</span><br><span class="line">	分割线：&lt;hr&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习笔记-2基础标签</title>
    <url>/2023/03/28/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML/Q1-HTML-Note2/</url>
    <content><![CDATA[<h1>HTML学习笔记-2基础标签</h1>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.定义预格式化的文本         &lt;pre&gt;&lt;/pre&gt;    比如以下内容中，空格空行都会保留</span><br><span class="line">1.空格与段内换行            &amp;nbsp;&lt;br/&gt;</span><br><span class="line"> 无论你在 HTML 元素的内容中使用多少空格（包括一个或多个空白字符或换行），</span><br><span class="line"> 当渲染这些代码的时候，HTML 解释器会将连续出现的空白字符减少为一个单独的空格符。</span><br><span class="line">2.行内组合                &lt;span&gt;&lt;/span&gt;</span><br><span class="line">3.水平线                  &lt;hr/&gt;</span><br><span class="line">4.段                     &lt;p&gt;&lt;/p&gt;</span><br><span class="line">5.强调      &lt;strong&gt;&lt;/strong&gt;</span><br><span class="line">6.斜体      &lt;em&gt;&lt;/em&gt;</span><br><span class="line">7.n级标题                 &lt;h1&gt;一级标题只能有一个&lt;/h1&gt;</span><br><span class="line">8.标识页面的主要部分  &lt;main&gt;&lt;/main&gt;</span><br><span class="line">    HTML5 有些元素能够指明不同的内容区域。</span><br><span class="line">     这些元素能让你的 HTML 易于阅读，并有助于搜索引擎优化（SEO）和无障碍访问。</span><br><span class="line">9.表示预定义格式文本		&lt;pre&gt;&lt;/pre&gt;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;pre&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;1.空格与换行</span><br><span class="line">        这里将会有三个空格&amp;nbsp;&amp;nbsp;&amp;nbsp;然后换行</span><br><span class="line">        &lt;br/&gt;</span><br><span class="line">        换行结束</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;2.行内组合</span><br><span class="line">        这里的&lt;span&gt;标签用于标记，被标记的文字将可以通过css进行格式化的美化&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;3.hr水平线</span><br><span class="line">        以下是水平线</span><br><span class="line">      &lt;hr/&gt;</span><br><span class="line">      水平线结束</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习笔记-4head</title>
    <url>/2023/03/28/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML/Q1-HTML-Note4/</url>
    <content><![CDATA[<h1 id="HTML学习笔记-4head"><a href="#HTML学习笔记-4head" class="headerlink" title="HTML学习笔记-4head"></a>HTML学习笔记-4head</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--</span><br><span class="line"></span><br><span class="line">&lt;meta &gt;:</span><br><span class="line">    name 指定了 meta 元素的类型；说明该元素包含了什么类型的信息。</span><br><span class="line">    content 指定了实际的元数据内容【就是搜索网页时，标题下面的一连串简述】。</span><br><span class="line"></span><br><span class="line">    &lt; meta name=&quot;author&quot; content=&quot;Chris Mills&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;description&quot; content=&quot;The MDN Web &quot; /&gt;</span><br><span class="line"></span><br><span class="line">     比如搜索MDN Web Docs会显示</span><br><span class="line">     标题：MDN Web Docs</span><br><span class="line">     链接：https://developer.mozilla.org/zh</span><br><span class="line">     简述：The MDN Web</span><br><span class="line"></span><br><span class="line">&lt;link&gt;:</span><br><span class="line">    &lt;link&gt; 用来添加CSS。link元素经常位于文档的头部，</span><br><span class="line">    rel=&quot;stylesheet&quot; 表明这是文档的样式表（固定不变）</span><br><span class="line">    href 包含了样式表文件的路径</span><br><span class="line"></span><br><span class="line">    图标类型</span><br><span class="line">     含有高分辨率 Retina 显示屏的第三代 iPad：</span><br><span class="line">       &lt;link</span><br><span class="line">        rel=&quot;apple-touch-icon-precomposed&quot;</span><br><span class="line">        sizes=&quot;144x144&quot;</span><br><span class="line">        href=&quot;https://developer.mozilla.org/static/img/favicon144.png&quot; /&gt;</span><br><span class="line">这些注释解释了每个图标的用途——这些元素涵盖的东西提供一个高分辨率图标，这些高分辨率图标当网站保存到 iPad 的主屏幕时使用。</span><br><span class="line"></span><br><span class="line">不用担心现在实现所有这些类型的图标——这是一个相当先进的功能，不要求你有这方面的知识来通过课程的进展。</span><br><span class="line">这里的主要目的是让你提前了解有这一样东西，以防当你浏览其他网站的源代码时不理解源代码的含义。</span><br><span class="line"></span><br><span class="line">&lt;script&gt; ：</span><br><span class="line">&lt;script&gt; 用来添加JavaScript来让王爷具有交互功能。</span><br><span class="line">script元素也应当放在文档的头部，并包含 src 属性来指向需要加载的 JavaScript 文件路径，</span><br><span class="line">同时最好加上 defer 以告诉浏览器在解析完成 HTML 后再加载 JavaScript。</span><br><span class="line">这样可以确保在加载脚本之前浏览器已经解析了所有的 HTML 内容。</span><br><span class="line">这样你就不会因为 JavaScript 试图访问页面上不存在的 HTML 元素而产生错误。</span><br><span class="line">实际上有很多方法来处理在你的页面上加载 JavaScript，但对于现代浏览器来说，这是最可靠的方法（对于其他方法，请阅读脚本加载策略）。</span><br><span class="line">&lt;script src=&quot;my-js-file.js&quot; defer&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习笔记-6实践</title>
    <url>/2023/03/28/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML/Q1-HTML-Note6/</url>
    <content><![CDATA[<h1>HTML学习笔记-6实践</h1>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;CatPhotoApp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;main&gt;</span><br><span class="line">  &lt;section&gt;&lt;!--[[[[[[[[[]]]]]]]]]]--&gt;</span><br><span class="line">    &lt;h1&gt;CatPhotoApp&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;Cat Photos&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      See more &lt;a href=&quot;../img/cat1.jpg&quot;&gt;cat photos&lt;/a&gt; in our gallery&lt;br&gt;</span><br><span class="line">      &lt;img src=&quot;https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg&quot; alt=&quot;A text.&quot;&gt;</span><br><span class="line">      &lt;!--[[[[[[[[[[[[alt是备注]]]]]]]]]]]--&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">  &lt;section&gt;</span><br><span class="line">    &lt;h2&gt;Cat Lists&lt;/h2&gt;</span><br><span class="line">    &lt;h3&gt;Things cats love:&lt;/h3&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;cat nip&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;laser pointers&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;lasagna&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;figure&gt;&lt;!--[[[[[[[[[图像标题]]]]]]]]]]]]]]--&gt;</span><br><span class="line">      &lt;img src=&quot;https://cdn.freecodecamp.org/curriculum/cat-photo-app/lasagna.jpg&quot; alt=&quot;A slice of lasagna on a plate.&quot;&gt;</span><br><span class="line">      &lt;figcaption&gt;&lt;!--[[[[[[[[[]]]]]]]]]]]]]--&gt;</span><br><span class="line">        Cats</span><br><span class="line">        &lt;em&gt;love&lt;/em&gt;</span><br><span class="line">        lasagna.</span><br><span class="line">      &lt;/figcaption&gt;</span><br><span class="line">    &lt;/figure&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">  &lt;section&gt;</span><br><span class="line">    &lt;h2&gt;Top 3 things cats hate:&lt;/h2&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">      &lt;li&gt;flea treatment&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;thunder&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;other cats&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">    &lt;figure&gt;</span><br><span class="line">      &lt;img src=&quot;https://cdn.freecodecamp.org/curriculum/cat-photo-app/cats.jpg&quot; alt=&quot;Five cats looking around a field.&quot;&gt;</span><br><span class="line">      &lt;figcaption&gt;</span><br><span class="line">        Cats &lt;strong&gt;hate&lt;/strong&gt; other cats.</span><br><span class="line">      &lt;/figcaption&gt;</span><br><span class="line">    &lt;/figure&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">  &lt;section&gt;</span><br><span class="line">    &lt;h2&gt;Cat form&lt;/h2&gt;</span><br><span class="line">    &lt;fieldset&gt;&lt;!--给form增加实线框--&gt;</span><br><span class="line">      &lt;legend&gt;Is your cat an indoor or outdoor cat?&lt;/legend&gt;&lt;!--给块增加标题--&gt;</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">          &lt;!--[[[[[[[[[[label用于将 input 元素与其近邻的文本进行绑定]]]]]]]]]--&gt;</span><br><span class="line">          &lt;input name=&quot;door&quot; id=&quot;indoor&quot; value=&quot;indoor&quot; type=&quot;radio&quot; checked&gt;indoor</span><br><span class="line">          &lt;!--用checked给本块（legend）设置默认选项--&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">          &lt;input name=&quot;door&quot; id=&quot;outdoor&quot; value=&quot;outdoor&quot; type=&quot;radio&quot;&gt;out door</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    &lt;/fieldset&gt;</span><br><span class="line">    &lt;fieldset&gt;</span><br><span class="line">      &lt;legend&gt;What&#x27;s your cat&#x27;s personality?&lt;/legend&gt;</span><br><span class="line">      &lt;!--id应与选项相同，是具有唯一性的，不能当成name用--&gt;</span><br><span class="line">      &lt;!--label是必须加的,for 对应的是input的id，label和input直接看成元组就行--&gt;</span><br><span class="line">      &lt;label for=&quot;loving&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; value=&quot;personality&quot; id=&quot;loving&quot; checked&gt; Loving</span><br><span class="line">      &lt;label for=&quot;lazy&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; value=&quot;personality&quot; id=&quot;lazy&quot;&gt; lazy</span><br><span class="line">      &lt;label for=&quot;energetic&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; value=&quot;personality&quot; id=&quot;energetic&quot;&gt; energetic</span><br><span class="line">    &lt;/fieldset&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot;  placeholder=&quot;cat photo URL&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/main&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">  No Copyright - &lt;a href=&quot;https://www.freecodecamp.org&quot;&gt;freeCodeCamp.org&lt;/a&gt;</span><br><span class="line">&lt;/footer&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习笔记-5体系补充</title>
    <url>/2023/03/28/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML/Q1-HTML-Note5/</url>
    <content><![CDATA[<h1 id="HTML学习笔记-5体系补充"><a href="#HTML学习笔记-5体系补充" class="headerlink" title="HTML学习笔记-5体系补充"></a>HTML学习笔记-5体系补充</h1><p>前文关于内容的错误理解以本文的“整体分类”为主。</p>
<p>整体分类：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Content_categories">url</a></p>
<p>主要分成几类:</p>
<p>​	内容类（比如文字&#x2F;图片&#x2F;视频&#x2F;画布）</p>
<p>​	表单相关（比如下拉菜单，文本输入框）</p>
<p>​	结构(比如div span)</p>
<p>了解块级元素和行内元素</p>
<p>块级元素就是自成一行，比如div p h1 table ul ol</p>
<p>行内元素和块级元素不一样，不会自成一行，可以多个排列成一行, 比如:img span button input</p>
<p>补充一些常用的HTML标签</p>
<p>input 输入元素的几种种类 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input"></a><br>textarea 文本区元素 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/textarea"></a><br>select 下拉菜单 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/select"></a><br>table 表格 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/table"></a><br>video 视频 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video"></a></p>
<p>补充和css有关的HTML元素</p>
<ol>
<li><p>div元素: 主要用于设计布局</p>
</li>
<li><p>article元素: 方便搜索的元素,属于父级元素。</p>
</li>
<li></li>
</ol>
<ul>
<li><h4 id="易错点归档："><a href="#易错点归档：" class="headerlink" title="易错点归档："></a>易错点归档：</h4><ol>
<li><h5 id="链接相关：url、href、src"><a href="#链接相关：url、href、src" class="headerlink" title="链接相关：url、href、src"></a>链接相关：url、href、src</h5><p>a：href</p>
<p>link：href</p>
<p>script：src</p>
<p>img：src</p>
<h6 id="作用结果不同"><a href="#作用结果不同" class="headerlink" title="作用结果不同"></a>作用结果不同</h6><p>（1）href 用于在当前文档和引用资源之间确立联系；</p>
<p>（2）src 用于替换当前内容；</p>
</li>
<li><h5 id="附加：link和-import的区别"><a href="#附加：link和-import的区别" class="headerlink" title="附加：link和@import的区别"></a>附加：link和@import的区别</h5><p>（1）link是XHTML标签，除了能够加载CSS，还可以定义RSS等其他事务；而@import属于CSS范畴，只可以加载CSS。</p>
<p>（2）link引用CSS时，在页面载入时同时加载；@import需要页面完全载入以后再加载。</p>
<p>（3）link是XHTML标签，无兼容问题；@import则是在CSS2.1提出的，低版本的浏览器不支持。</p>
<p>（4）link支持使用Javascript控制DOM改变样式；而@import不支持。</p>
<h5 id="3-为什么js用script标签的src引入，而css用link标签的href引入"><a href="#3-为什么js用script标签的src引入，而css用link标签的href引入" class="headerlink" title="3.为什么js用script标签的src引入，而css用link标签的href引入"></a>3.为什么js用script标签的src引入，而css用link标签的href引入</h5><p>外部共享的JavaScript文件，通过 <code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code>来引入，共享的样式文件不是通过 <code>&lt;style src=&quot;&quot;&gt;&lt;/style&gt;</code> 的形式引入，而是通过 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt;</code>形式引入。</p>
<p>w3c最初的设计中<script>标签也没有src属性，使用 <code>&lt;link rel=&quot;...&quot; href=&quot;...&quot;&gt;</code> 来引入当前文档外部的资源，如：父文档，翻译，或者层叠样式表等。<code>&lt;link rel=&quot;&quot; href=&quot;&quot; meidia=&quot;&quot;&gt;</code> 元素规定了当前文档和外部资源之间的关系，它常用来引入外部的样式表，我们可以通过rel属性设置为stylesheet来使用。后来为<code>&lt;script&gt;</code>添加了src属性。</p>
<p><strong><code>href</code>是引用和页面关联，是在当前元素和引用资源之间建立联系，<code>src</code>表示引用资源，表示替换当前元素，用在img，script，iframe上，src是页面内容不可缺少的一部分。</strong></p>
<script src="js.js"></script>当浏览器解析到这一句的时候会暂停其他资源的下载和处理，直至将该资源加载，编译，执行完毕，图片和框架等元素也是如此，类似于该元素所指向的资源嵌套如当前标签内，这也是为什么要把放在底部而不是头部。

<link href="common.css" rel="stylesheet"/>当浏览器解析到这一句的时候会识别该文档为css文件，会下载并且不会停止对当前文档的处理，这也是为什么建议使用link方式来加载css而不是使用@import。</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>前端英文列表</title>
    <url>/2023/03/29/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%85%B6%E5%AE%83/Q0-Word/</url>
    <content><![CDATA[<p>margin：外边距</p>
<p>border：框架</p>
<p>padding：内边距</p>
<p>br：Barter rabbet  </p>
<p>en： &#x2F;ˈbär-tər    ræbɪt&#x2F;  换行</p>
<p>span：行内组合, 被用来组合文档中的行内元素, 没有固定的格式表现。 </p>
<p>跨越</p>
<p>pre: 预定义格式文本,空白符照常显示，不格式化。</p>
<p>先前的</p>
<p>fieldset：给某一块增加实线框</p>
<p>领域设置</p>
<p>legend：fieldset中的标题</p>
<p>传奇</p>
<p>section：</p>
<p>章节</p>
<p>article：语义化</p>
<p>条款、文章</p>
<p>disabled：放input里表示禁止输入</p>
<p>radio：单选框</p>
<p>老式收音机按钮，按下一个其它弹起。</p>
<p>figure：可以和图像关联起来的独立内容</p>
<p>图</p>
<p>placeholder</p>
<p>flex布局</p>
<p>row：行    </p>
<p>column：柱子</p>
<h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><ol>
<li><p>HTML - 超文本标记语言</p>
</li>
<li><p>Head - 文档头部</p>
</li>
<li><p>Body - 文档主体</p>
</li>
<li><p>H1-H6 - 标题（从大到小）</p>
</li>
<li><p>Div - 无语义块级元素</p>
</li>
<li><h4 id="Span-无语义行内元素"><a href="#Span-无语义行内元素" class="headerlink" title="Span - 无语义行内元素"></a>Span - 无语义行内元素</h4></li>
<li><p>Img - 图片</p>
</li>
<li><p>Src - 图片链接地址</p>
</li>
<li><h5 id="Alt-替代文本"><a href="#Alt-替代文本" class="headerlink" title="Alt - 替代文本"></a>Alt - 替代文本</h5></li>
<li><p>A - 链接</p>
</li>
<li><p>Href - 链接地址</p>
</li>
<li><h5 id="Target-打开方式"><a href="#Target-打开方式" class="headerlink" title="Target - 打开方式"></a>Target - 打开方式</h5></li>
<li><p>Title - 标题</p>
</li>
<li><p>Style - 样式</p>
</li>
<li><p>Class - 类名</p>
</li>
<li><p>ID - 元素 ID</p>
</li>
<li><p>Table - 表格</p>
</li>
<li><p>Tr - 行</p>
</li>
<li><p>Th - 表头单元格</p>
</li>
<li><p>Td - 数据单元格</p>
</li>
<li><p>Colspan - 列合并</p>
</li>
<li><p>Rowspan - 行合并</p>
</li>
<li><p>Form - 表单</p>
</li>
<li><p>Input - 输入框</p>
</li>
<li><p>Type - 输入类型</p>
</li>
<li><p>Name - 名称</p>
</li>
<li><p>Value - 值</p>
</li>
<li><p>Checked - 是否勾选</p>
</li>
<li><h5 id="Radio-单选框"><a href="#Radio-单选框" class="headerlink" title="Radio - 单选框"></a>Radio - 单选框</h5></li>
<li><h5 id="Checkbox-多选框"><a href="#Checkbox-多选框" class="headerlink" title="Checkbox - 多选框"></a>Checkbox - 多选框</h5></li>
<li><p>Select - 下拉框</p>
</li>
<li><p>Option - 选项</p>
</li>
<li><h5 id="Disabled-禁用"><a href="#Disabled-禁用" class="headerlink" title="Disabled - 禁用"></a>Disabled - 禁用</h5></li>
<li><p>Readonly - 只读</p>
</li>
<li><p>Button - 按钮</p>
</li>
<li><p>Submit - 提交按钮</p>
</li>
<li><p>Reset - 重置按钮</p>
</li>
<li><h5 id="Label-文本标签"><a href="#Label-文本标签" class="headerlink" title="Label - 文本标签"></a>Label - 文本标签</h5></li>
<li><p>Textarea - 文本域</p>
</li>
<li><h5 id="Rows-行数"><a href="#Rows-行数" class="headerlink" title="Rows - 行数"></a>Rows - 行数</h5></li>
<li><h5 id="Cols-列数"><a href="#Cols-列数" class="headerlink" title="Cols - 列数"></a>Cols - 列数</h5></li>
<li><p>Placeholder - 提示语</p>
</li>
<li><p>Required - 是否必填</p>
</li>
<li><p>Maxlength - 最大长度</p>
</li>
<li><p>Minlength - 最小长度</p>
</li>
<li><p>Pattern - 格式匹配</p>
</li>
<li><p>Email - 邮箱类型</p>
</li>
<li><p>Tel - 电话类型</p>
</li>
<li><p>Password - 密码类型</p>
</li>
<li><p>Number - 数字类型</p>
</li>
<li><p>Date - 日期类型</p>
</li>
<li><p>Time - 时间类型</p>
</li>
<li><p>Range - 范围类型</p>
</li>
<li><p>Color - 颜色类型</p>
</li>
<li><p>Search - 搜索类型</p>
</li>
<li><p>Datetime - 日期时间类型</p>
</li>
<li><p>Datetime-local - 本地日期时间类型</p>
</li>
<li><p>Week - 星期类型</p>
</li>
<li><p>Month - 月份类型</p>
</li>
<li><h5 id="Fieldset-表单元素组"><a href="#Fieldset-表单元素组" class="headerlink" title="Fieldset - 表单元素组"></a>Fieldset - 表单元素组</h5></li>
<li><h5 id="Legend-表单元素组标题"><a href="#Legend-表单元素组标题" class="headerlink" title="Legend - 表单元素组标题"></a>Legend - 表单元素组标题</h5></li>
<li><h5 id="Label-表单控件标签"><a href="#Label-表单控件标签" class="headerlink" title="Label - 表单控件标签"></a>Label - 表单控件标签</h5></li>
<li><p>Optgroup - 选项组</p>
</li>
<li><p>Command - 命令</p>
</li>
<li><p>Menu - 上下文菜单</p>
</li>
<li><p>Footer - 底部</p>
</li>
<li><p>Header - 页眉</p>
</li>
<li><p>Video - 视频</p>
</li>
<li><p>Audio - 音频</p>
</li>
<li><p>Source - 媒体资源</p>
</li>
<li><p>Track - 字幕轨道</p>
</li>
<li><p>Canvas - 画布</p>
</li>
<li><p>SVG - 矢量图</p>
</li>
<li><p>Path - 路径</p>
</li>
<li><p>Rect - 矩形</p>
</li>
<li><p>Circle - 圆形</p>
</li>
<li><p>Ellipse - 椭圆</p>
</li>
<li><p>Line - 直线</p>
</li>
<li><p>Polygon - 多边形</p>
</li>
<li><p>Polyline - 折线</p>
</li>
<li><p>Text - 文本</p>
</li>
<li><p>Tspan - 文本段落</p>
</li>
<li><p>Gradient - 渐变</p>
</li>
<li><p>Stop - 渐变停止点</p>
</li>
<li><p>Clippath - 剪裁路径</p>
</li>
<li><p>Mask - 遮罩</p>
</li>
<li><p>Filter - 滤镜</p>
</li>
<li><p>FeGaussianBlur - 高斯模糊滤镜</p>
</li>
<li><p>FeBlend - 混合滤镜</p>
</li>
<li><p>FeColorMatrix - 颜色矩阵滤镜</p>
</li>
<li><p>FeOffset - 偏移滤镜</p>
</li>
<li><p>FeMerge - 合并滤镜</p>
</li>
<li><p>FeComponentTransfer - 分量转换滤镜</p>
</li>
<li><p>FeTurbulence - 纹理滤镜</p>
</li>
<li><p>FeDisplacementMap - 位移映射滤镜</p>
</li>
<li><p>FeConvolveMatrix - 卷积矩阵滤镜</p>
</li>
<li><p>FeSpecularLighting - 镜面反射滤镜</p>
</li>
<li><p>FeDiffuseLighting - 漫反射滤镜</p>
</li>
<li><p>ForeignObject - 外部对象</p>
</li>
<li><p>Embed - 多媒体（已弃用）</p>
</li>
<li><p>Iframe - 内嵌框架</p>
</li>
<li><p>Source - 多媒体资源</p>
</li>
<li><p>Object - 对象</p>
</li>
<li><h5 id="Param-参数"><a href="#Param-参数" class="headerlink" title="Param - 参数"></a>Param - 参数</h5></li>
<li><p>Style - 样式</p>
</li>
<li><p>Script - 脚本</p>
</li>
<li><h5 id="Src-脚本链接地址"><a href="#Src-脚本链接地址" class="headerlink" title="Src - 脚本链接地址"></a>Src - 脚本链接地址</h5></li>
<li><h5 id="Type-脚本类型"><a href="#Type-脚本类型" class="headerlink" title="Type - 脚本类型"></a>Type - 脚本类型</h5></li>
<li><h5 id="Async-异步加载"><a href="#Async-异步加载" class="headerlink" title="Async - 异步加载"></a>Async - 异步加载</h5></li>
<li><p>Defer - 延迟加载</p>
</li>
<li><p>Charset - 字符集</p>
</li>
<li><p>Comment - 注释</p>
</li>
<li><p>Doctype - 文档类型</p>
</li>
<li><p>Html - 页面根元素</p>
</li>
<li><p>Lang - 语言</p>
</li>
<li><p>Meta - 页面元数据</p>
</li>
<li><p>Charset - 字符集</p>
</li>
<li><p>Viewport - 视口</p>
</li>
<li><p>Content - 属性值</p>
</li>
<li><p>Http-equiv - HTTP 头部</p>
</li>
<li><p>Refresh - 定时刷新</p>
</li>
<li><p>Link - 文档关联</p>
</li>
<li><p>Rel - 关联类型</p>
</li>
<li><p>Hreflang - 关联语言</p>
</li>
<li><p>Sizes - 图标尺寸</p>
</li>
<li><p>Media - 媒体查询条件</p>
</li>
<li><p>Icon - 页面图标</p>
</li>
<li><p>Base - 基础 URL</p>
</li>
<li><p>Target - 目标窗口</p>
</li>
<li><p>Download - 下载链接</p>
</li>
<li><p>Charset - 字符集</p>
</li>
<li><p>Manifest - 应用程序清单</p>
</li>
<li><p>Contenteditable - 可编辑性</p>
</li>
<li><p>Spellcheck - 拼写检查</p>
</li>
<li><p>Translate - 翻译</p>
</li>
<li><p>Accesskey - 快捷键</p>
</li>
<li><p>AutoFocus - 自动聚焦</p>
</li>
<li><p>Enterkeyhint - 回车键提示</p>
</li>
<li><p>Formaction - 自定义提交地址</p>
</li>
<li><p>Formenctype - 自定义编码类型</p>
</li>
<li><p>Formmethod - 自定义提交方法</p>
</li>
<li><p>Formnovalidate - 自定义表单验证</p>
</li>
<li><p>Formtarget - 自定义打开方式</p>
</li>
<li><p>Hidden - 隐藏元素</p>
</li>
<li><p>Ismap - 图像地图</p>
</li>
<li><p>Longdesc - 图像说明文本</p>
</li>
<li><p>Usemap - 链接到图像地图</p>
</li>
<li><p>Noresize - 禁止调整窗口大小</p>
</li>
<li><p>Noshade - 禁止阴影</p>
</li>
<li><p>Wrap - 文本换行方式</p>
<h1 id="css"><a href="#css" class="headerlink" title="css"></a>css</h1></li>
<li><p>selector - 选择器</p>
</li>
<li><p>property - 属性</p>
</li>
<li><p>value - 值</p>
</li>
<li><p>class - 类</p>
</li>
<li><p>id - ID</p>
</li>
<li><p>element - 元素</p>
</li>
<li><p>width - 宽度</p>
</li>
<li><p>height - 高度</p>
</li>
<li><h5 id="margin-边距"><a href="#margin-边距" class="headerlink" title="margin - 边距"></a>margin - 边距</h5></li>
<li><h5 id="padding-内边距"><a href="#padding-内边距" class="headerlink" title="padding - 内边距"></a>padding - 内边距</h5></li>
<li><h5 id="border-边框"><a href="#border-边框" class="headerlink" title="border - 边框"></a>border - 边框</h5></li>
<li><p>background - 背景</p>
</li>
<li><p>color - 颜色</p>
</li>
<li><p>font - 字体</p>
</li>
<li><p>text - 文本</p>
</li>
<li><h5 id="display-显示"><a href="#display-显示" class="headerlink" title="display - 显示"></a>display - 显示</h5></li>
<li><p>position - 定位</p>
</li>
<li><p>float - 浮动</p>
</li>
<li><h5 id="clear-清除浮动"><a href="#clear-清除浮动" class="headerlink" title="clear - 清除浮动"></a>clear - 清除浮动</h5></li>
<li><p>overflow - 溢出</p>
</li>
<li><p>z-index - 层级</p>
</li>
<li><p>cursor - 鼠标指针</p>
</li>
<li><p>transition - 过渡</p>
</li>
<li><p>animation - 动画</p>
</li>
<li><h5 id="flexbox-弹性盒子布局"><a href="#flexbox-弹性盒子布局" class="headerlink" title="flexbox - 弹性盒子布局"></a>flexbox - 弹性盒子布局</h5></li>
<li><h5 id="grid-网格布局"><a href="#grid-网格布局" class="headerlink" title="grid - 网格布局"></a>grid - 网格布局</h5></li>
<li><p>box-shadow - 盒子阴影</p>
</li>
<li><p>text-shadow - 文本阴影</p>
</li>
<li><p>opacity - 不透明度</p>
</li>
<li><p>transform - 变换</p>
</li>
<li><h5 id="filter-滤镜"><a href="#filter-滤镜" class="headerlink" title="filter - 滤镜"></a>filter - 滤镜</h5></li>
<li><p>gradient - 渐变</p>
</li>
<li><p>media query - 媒体查询</p>
</li>
<li><p>box model - 盒子模型</p>
</li>
<li><p>inline - 行内</p>
</li>
<li><p>block - 块级</p>
</li>
<li><p>inline-block - 行内块级</p>
</li>
<li><p>font-size - 字体大小</p>
</li>
<li><p>line-height - 行高</p>
</li>
<li><h5 id="text-align-文本对齐"><a href="#text-align-文本对齐" class="headerlink" title="text-align - 文本对齐"></a>text-align - 文本对齐</h5></li>
<li><h5 id="vertical-align-垂直对齐"><a href="#vertical-align-垂直对齐" class="headerlink" title="vertical-align - 垂直对齐"></a>vertical-align - 垂直对齐</h5></li>
<li><p>list-style - 列表样式</p>
</li>
<li><h5 id="border-radius-边框圆角"><a href="#border-radius-边框圆角" class="headerlink" title="border-radius - 边框圆角"></a>border-radius - 边框圆角</h5></li>
<li><p>outline - 外边框</p>
</li>
<li><p>word-wrap - 换行</p>
</li>
<li><p>text-overflow - 文本溢出</p>
</li>
<li><h5 id="white-space-空格处理"><a href="#white-space-空格处理" class="headerlink" title="white-space - 空格处理"></a>white-space - 空格处理</h5></li>
<li><p>letter-spacing - 字符间距</p>
</li>
<li><p>word-spacing - 单词间距</p>
</li>
<li><p>box-sizing - 盒子尺寸</p>
</li>
<li><p>top - 上方距离</p>
</li>
<li><p>right - 右侧距离</p>
</li>
<li><p>bottom - 下方距离</p>
</li>
<li><p>left - 左侧距离</p>
</li>
<li><p>visibility - 显示状态</p>
</li>
<li><p>table - 表格</p>
</li>
<li><p>table-cell - 单元格</p>
</li>
<li><p>table-row - 表格行</p>
</li>
<li><p>text-decoration - 文本装饰</p>
</li>
<li><p>user-select - 用户选择</p>
</li>
<li><p>pointer-events - 指针事件</p>
</li>
<li><p>font-weight - 字体粗细</p>
</li>
<li><p>font-style - 字体样式</p>
</li>
<li><p>text-transform - 文本转换</p>
</li>
<li><p>background-size - 背景尺寸</p>
</li>
<li><p>background-position - 背景位置</p>
</li>
<li><p>background-repeat - 背景重复</p>
</li>
<li><h5 id="line-break-自动换行"><a href="#line-break-自动换行" class="headerlink" title="line-break - 自动换行"></a>line-break - 自动换行</h5></li>
<li><h5 id="justify-content-主轴对齐方式"><a href="#justify-content-主轴对齐方式" class="headerlink" title="justify-content - 主轴对齐方式"></a>justify-content - 主轴对齐方式</h5></li>
<li><h5 id="align-items-侧轴对齐方式"><a href="#align-items-侧轴对齐方式" class="headerlink" title="align-items - 侧轴对齐方式"></a>align-items - 侧轴对齐方式</h5></li>
<li><h5 id="align-self-元素自身在侧轴方向上的对齐方式"><a href="#align-self-元素自身在侧轴方向上的对齐方式" class="headerlink" title="align-self - 元素自身在侧轴方向上的对齐方式"></a>align-self - 元素自身在侧轴方向上的对齐方式</h5></li>
<li><h5 id="flex-direction-主轴方向"><a href="#flex-direction-主轴方向" class="headerlink" title="flex-direction - 主轴方向"></a>flex-direction - 主轴方向</h5></li>
<li><h5 id="flex-wrap-换行方式"><a href="#flex-wrap-换行方式" class="headerlink" title="flex-wrap - 换行方式"></a>flex-wrap - 换行方式</h5></li>
<li><h5 id="flex-grow-扩张比例"><a href="#flex-grow-扩张比例" class="headerlink" title="flex-grow - 扩张比例"></a>flex-grow - 扩张比例</h5></li>
<li><h5 id="flex-shrink-缩小比例"><a href="#flex-shrink-缩小比例" class="headerlink" title="flex-shrink - 缩小比例"></a>flex-shrink - 缩小比例</h5></li>
<li><p>flex-basis - 基准大小</p>
</li>
<li><h5 id="grid-template-columns-网格列定义"><a href="#grid-template-columns-网格列定义" class="headerlink" title="grid-template-columns - 网格列定义"></a>grid-template-columns - 网格列定义</h5></li>
<li><h5 id="grid-template-rows-网格行定义"><a href="#grid-template-rows-网格行定义" class="headerlink" title="grid-template-rows - 网格行定义"></a>grid-template-rows - 网格行定义</h5></li>
<li><h5 id="grid-gap-网格间距"><a href="#grid-gap-网格间距" class="headerlink" title="grid-gap - 网格间距"></a>grid-gap - 网格间距</h5></li>
<li><h5 id="grid-column-start-开始列"><a href="#grid-column-start-开始列" class="headerlink" title="grid-column-start - 开始列"></a>grid-column-start - 开始列</h5></li>
<li><h5 id="grid-column-end-结束列"><a href="#grid-column-end-结束列" class="headerlink" title="grid-column-end - 结束列"></a>grid-column-end - 结束列</h5></li>
<li><h5 id="grid-row-start-开始行"><a href="#grid-row-start-开始行" class="headerlink" title="grid-row-start - 开始行"></a>grid-row-start - 开始行</h5></li>
<li><h5 id="grid-row-end-结束行"><a href="#grid-row-end-结束行" class="headerlink" title="grid-row-end - 结束行"></a>grid-row-end - 结束行</h5></li>
<li><h5 id="justify-items-项目在网格交叉区域内对齐方式"><a href="#justify-items-项目在网格交叉区域内对齐方式" class="headerlink" title="justify-items - 项目在网格交叉区域内对齐方式"></a>justify-items - 项目在网格交叉区域内对齐方式</h5></li>
<li><h5 id="grid-template-areas-网格区域定义"><a href="#grid-template-areas-网格区域定义" class="headerlink" title="grid-template-areas - 网格区域定义"></a>grid-template-areas - 网格区域定义</h5></li>
<li><p>gap - 网格间距</p>
</li>
<li><p>counter-reset - 计数器重置</p>
</li>
<li><p>counter-increment - 计数器递增</p>
</li>
<li><p>content - 内容</p>
</li>
<li><p>attr() - 获取元素属性值</p>
</li>
<li><p>calc() - 计算值</p>
</li>
<li><h5 id="hover-鼠标悬停伪类"><a href="#hover-鼠标悬停伪类" class="headerlink" title=":hover - 鼠标悬停伪类"></a>:hover - 鼠标悬停伪类</h5></li>
<li><h5 id="active-鼠标点击伪类"><a href="#active-鼠标点击伪类" class="headerlink" title=":active - 鼠标点击伪类"></a>:active - 鼠标点击伪类</h5></li>
<li><p>:focus - 获取焦点伪类</p>
</li>
<li><h5 id="nth-child-n-选择特定位置的元素"><a href="#nth-child-n-选择特定位置的元素" class="headerlink" title=":nth-child(n) - 选择特定位置的元素"></a>:nth-child(n) - 选择特定位置的元素</h5></li>
<li><p>::before - 在元素前插入内容</p>
</li>
<li><p>::after - 在元素后插入内容</p>
</li>
<li><p>::first-letter - 对文本的第一个字母进行特殊处理</p>
</li>
<li><p>::first-line - 对文本的第一行进行特殊处理</p>
</li>
<li><p>@media - 媒体查询</p>
<h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1></li>
<li><p>alert - 弹出警告框</p>
</li>
<li><p>anchor - 创建锚元素</p>
</li>
<li><p>append - 添加元素</p>
</li>
<li><p>apply - 调用函数</p>
</li>
<li><p>argument - 参数</p>
</li>
<li><p>array - 数组</p>
</li>
<li><p>assign - 对象赋值</p>
</li>
<li><p>async - 异步</p>
</li>
<li><p>await - 等待异步执行结束</p>
</li>
<li><p>bind - 绑定函数到对象上</p>
</li>
<li><p>boolean - 布尔数据类型</p>
</li>
<li><p>break - 跳出循环</p>
</li>
<li><p>buffer - 缓冲区</p>
</li>
<li><p>callback - 回调函数</p>
</li>
<li><p>catch - 捕获异常</p>
</li>
<li><p>charAt - 字符串方法，返回指定位置字符</p>
</li>
<li><p>chartCode - 字符串方法，返回指定字符编码</p>
</li>
<li><p>class - 类</p>
</li>
<li><p>clear - 清除控制台</p>
</li>
<li><p>clone - 克隆对象</p>
</li>
<li><p>close - 关闭窗口</p>
</li>
<li><p>console - 控制台对象</p>
</li>
<li><p>const - 常量</p>
</li>
<li><p>constructor - 构造函数</p>
</li>
<li><p>continue - 跳过本轮循环</p>
</li>
<li><p>cookie - cookie</p>
</li>
<li><p>createElement - 创建元素</p>
</li>
<li><p>createTextNode - 创建文本节点</p>
</li>
<li><p>crypto - 加密相关</p>
</li>
<li><p>CSS - 层叠样式表</p>
</li>
<li><p>date - 日期对象</p>
</li>
<li><p>debugger - 断点调试</p>
</li>
<li><p>decodeURI - 解码 URI</p>
</li>
<li><p>decodeURIComponent - 解码 URI 组件</p>
</li>
<li><p>default - 默认值</p>
</li>
<li><p>delete - 删除属性</p>
</li>
<li><p>do - 循环结构</p>
</li>
<li><p>document - 文档对象模型</p>
</li>
<li><p>DOM - 文档对象模型</p>
</li>
<li><p>double - 双精度浮点数数据类型</p>
</li>
<li><p>else - if 语句中的分支</p>
</li>
<li><p>empty - 空值</p>
</li>
<li><p>encodeURI - 编码 URI</p>
</li>
<li><p>encodeURIComponent - 编码 URI 组件</p>
</li>
<li><p>error - 错误信息</p>
</li>
<li><p>escape - 转义字符串</p>
</li>
<li><p>eval - 计算字符串表达式</p>
</li>
<li><p>event - 事件</p>
</li>
<li><p>false - 布尔值，表示假</p>
</li>
<li><p>fetch - 发送网络请求</p>
</li>
<li><p>filter - 数组过滤器</p>
</li>
<li><p>find - 查找数组元素</p>
</li>
<li><p>flat - 扁平化数组</p>
</li>
<li><p>float - 单精度浮点数数据类型</p>
</li>
<li><p>floor - 取整函数</p>
</li>
<li><p>forEach - 数组迭代器</p>
</li>
<li><p>for…in - 对象属性遍历</p>
</li>
<li><p>for…of - 遍历可迭代对象</p>
</li>
<li><p>function - 函数</p>
</li>
<li><p>get - 获取对象属性</p>
</li>
<li><p>global - 全局对象</p>
</li>
<li><p>hash - URL 哈希值</p>
</li>
<li><p>history - 浏览器访问历史记录</p>
</li>
<li><p>HTML - 超文本标记语言</p>
</li>
<li><p>http - 超文本传输协议</p>
</li>
<li><p>https - 安全超文本传输协议</p>
</li>
<li><p>if - 条件语句</p>
</li>
<li><p>import - 导入其他模块</p>
</li>
<li><p>in - 属性是否存在</p>
</li>
<li><p>includes - 判断元素是否在数组中</p>
</li>
<li><p>index - 在字符串中的位置</p>
</li>
<li><p>indexOf - 在数组中的位置</p>
</li>
<li><p>Infinity - 无穷大</p>
</li>
<li><p>innerHTML - 获取或设置元素的 HTML 内容</p>
</li>
<li><p>instanceOf - 判断对象类型</p>
</li>
<li><p>isFinite - 判断是否为有限数</p>
</li>
<li><p>isNaN - 判断是否为 NaN</p>
</li>
<li><p>join - 连接数组元素</p>
</li>
<li><p>JSON - JavaScript 对象表示法</p>
</li>
<li><p>key - 对象键名</p>
</li>
<li><p>label - 表单标签</p>
</li>
<li><p>length - 字符串或数组长度</p>
</li>
<li><p>let - 块级作用域变量</p>
</li>
<li><p>link - 创建链接元素</p>
</li>
<li><p>load - 页面加载事件</p>
</li>
<li><p>location - URL 相关信息</p>
</li>
<li><p>log - 控制台输出</p>
</li>
<li><p>map - 数组映射</p>
</li>
<li><p>match - 字符串匹配</p>
</li>
<li><p>Math - 数学计算对象</p>
</li>
<li><p>max - 最大值</p>
</li>
<li><p>message - 消息传递</p>
</li>
<li><p>min - 最小值</p>
</li>
<li><p>module - 模块化</p>
</li>
<li><p>moveBy - 移动窗口</p>
</li>
<li><p>navigator - 浏览器信息</p>
</li>
<li><p>new - 创建实例对象</p>
</li>
<li><p>null - 空对象</p>
</li>
<li><p>number - 数字数据类型</p>
</li>
<li><p>object - 对象数据类型</p>
</li>
<li><p>of - 创建数组</p>
</li>
<li><p>on - 绑定事件</p>
</li>
<li><p>open - 打开新窗口</p>
</li>
<li><p>operator - 运算符</p>
</li>
<li><p>optional - 可选链</p>
</li>
<li><p>or - 或运算</p>
</li>
<li><p>outerHTML - 获取或设置元素的 HTML 包含外部标签</p>
</li>
<li><p>output - 输出</p>
</li>
<li><p>package - 包</p>
</li>
<li><p>parseFloat - 字符串转换为浮点数</p>
</li>
<li><p>parseInt - 字符串转换为整数</p>
</li>
<li><p>parent - 父节点</p>
</li>
<li><p>parse - 解析 JSON</p>
</li>
<li><p>pass - 传递参数</p>
</li>
<li><p>pop - 删除数组末尾元素</p>
</li>
<li><p>preventDefault - 阻止默认事件</p>
</li>
<li><p>print - 打印内容</p>
</li>
<li><p>prompt - 提示用户输入</p>
</li>
<li><p>prototype - 实例原型对象</p>
</li>
<li><p>push - 向数组末尾添加元素</p>
</li>
<li><p>querySelector - 返回第一个匹配的元素</p>
</li>
<li><p>random - 随机数</p>
</li>
<li><p>range - 数值范围</p>
</li>
<li><p>reduce - 数组归并操作</p>
</li>
<li><p>RegExp - 正则表达式</p>
</li>
<li><p>reload - 重新加载页面</p>
</li>
<li><p>replace - 替换文本</p>
</li>
<li><p>return - 返回函数值</p>
</li>
<li><p>reverse - 反转数组</p>
</li>
<li><p>screen - 屏幕信息</p>
</li>
<li><p>script - JavaScript 脚本</p>
</li>
<li><p>scroll - 滚动</p>
</li>
<li><p>scrollBy - 滚动指定像素</p>
</li>
<li><p>scrollTo - 滚动到指定位置</p>
</li>
<li><p>search - URL 查询参数</p>
</li>
<li><p>select - 选择表单元素</p>
</li>
<li><p>set - 设置对象属性</p>
</li>
<li><p>setInterval - 定时操作，按指定间隔重复执行</p>
</li>
<li><p>setTimeout - 定时操作，延迟执行一次</p>
</li>
<li><p>shift - 删除数组首个元素</p>
</li>
<li><p>slice - 截取数组片段</p>
</li>
<li><p>sort - 数组排序</p>
</li>
<li><p>source - 源代码</p>
</li>
<li><p>splice - 插入或删除元素</p>
</li>
<li><p>split - 字符串分割成数组</p>
</li>
<li><p>static - 静态属性与方法</p>
</li>
<li><p>strict - 严格模式</p>
</li>
<li><p>string - 字符串数据类型</p>
</li>
<li><p>style - 行内样式</p>
</li>
<li><p>switch - 多分支语句</p>
</li>
</ol>
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/15/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JS/VSCode%E4%BB%A3%E7%A0%81/%E5%AF%B9%E8%B1%A1%E5%B5%8C%E5%A5%97/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="zh-CN">
  <head>
    <meta charset="UTF-8" />
    <title></title>
  </head>
  <body></body>
</html>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/14/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JS/VSCode%E4%BB%A3%E7%A0%81/%E8%AE%BF%E9%97%AE%E5%87%BD%E6%95%B0%E5%86%85%E5%B5%8C%E5%A5%97%E7%9A%84%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>1.访问函数内嵌套的对象</title>
  </head>
  <body>
    <script>
      /*函数将会检查通讯录中是否存在一个 firstName 与传入的 name 相同的联系人。 如果存在，那么还需要检查对应的联系人中是否存在 prop 属性。
      如果它们都存在，函数返回 prop 属性对应的值。
      如果 name 不对应于任何联系人，然后返回字符串 No such contact。
      如果 prop 属性在匹配 name 的联系人里不存在，返回 No such property。 */

      const contacts = [
        {
          firstName: 'Akira',
          lastName: 'Laine',
          number: '0543236543',
          likes: ['Pizza', 'Coding', 'Brownie Points'],
        },
        {
          firstName: 'Harry',
          lastName: 'Potter',
          number: '0994372684',
          likes: ['Hogwarts', 'Magic', 'Hagrid'],
        },
        {
          firstName: 'Sherlock',
          lastName: 'Holmes',
          number: '0487345643',
          likes: ['Intriguing Cases', 'Violin'],
        },
        {
          firstName: 'Kristian',
          lastName: 'Vos',
          number: 'unknown',
          likes: ['JavaScript', 'Gaming', 'Foxes'],
        },
      ];

      // 1.[{1}{2}{3}{4}]结构,forin的结果并不是取[]内的几个{}，而是数数。
      // for (let sq in contacts) {
      //   console.log(sq); //0 1 2 3
      // }
      // 2.for in 在js中只能用来遍历对象的属性,py里是for i in range(10);
      //   for (let i in contacts.length) {
      //     console.log('2222');
      //   }
      function lookUpProfile(name, prop) {
        for (let i = 0; i < contacts.length; ++i) {
          console.log(contacts[i]);
          if (contacts[i].firstName === name) {
            console.log('name findable');
            for (let j in contacts[1]) {
              if (j === prop) {
                console.log(contacts[i][prop]);
                return contacts[i][prop];
              }
            }
            return 'No such property';
          }
        }
        return 'No such contact';
      }
      lookUpProfile('Harry', 'likes');
    </script>
  </body>
</html>
]]></content>
  </entry>
  <entry>
    <title>JS学习笔记-4.1JS基础（base mooc）</title>
    <url>/2023/04/07/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JS/Q4-JS-1%E5%9F%BA%E7%A1%80%EF%BC%88mooc%EF%BC%89/</url>
    <content><![CDATA[<h1 id="4-1JS基础（mooc）"><a href="#4-1JS基础（mooc）" class="headerlink" title="4.1JS基础（mooc）"></a>4.1JS基础（mooc）</h1><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul>
<li><input checked="" disabled="" type="checkbox"> 1.了解js的数据类型:</li>
</ul>
<p>​		基础数据类型：number string boolean undefined null<br>​		引用类型:object(对象) array(数组)</p>
<ul>
<li><p><input checked="" disabled="" type="checkbox"> 
2.string（字符串）</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		获取长度 (length属性)</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		字符串的拼接(使用加号)</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		字符串的访问 (string[0],或者<strong>charAt方法</strong>)</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		换行符号(\n)</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		转义(&quot;hello&quot;)</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		string的方法: <a href="https://www.w3school.com.cn/js/js_string_methods.asp">https://www.w3school.com.cn/js/js_string_methods.asp</a></p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
3.object （对象）</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		定义一组键值对</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		object的构造方式 (var a &#x3D; {b:1} 或者 var a &#x3D; new Object({b:1}))</p>
<p>​			推荐使用前者，后者了解即可</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		对象的赋值 (a.b &#x3D; xx)</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		访问对象的所有属性（Object.keys）</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		删除对象的键值对 (delete )</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		检查属性（键） 是否存在 (in)</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		遍历 (for …in)</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		对象的访问 (object.a 访问object的a属性)</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		了解对象的引用</p>
<p>​			var a &#x3D; {b:1}  var c &#x3D; a</p>
<p>​			a.b &#x3D; 2 </p>
<p>​			console.log(c.b) &#x2F;&#x2F; 打印c.b&#x3D;1</p>
<p>​			&#x2F;&#x2F; 从引用的角度去思考，为什么对象c发生了变化。可以用展开运算符…来定义一个新的对象</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		object的方法 <a href="https://www.w3school.com.cn/js/js_object_methods.asp">https://www.w3school.com.cn/js/js_object_methods.asp</a></p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		this关键字(重要)</p>
</li>
</ul>
<p>4.function 函数<br>        函数的声明<br>            function fn() {} &#x2F;&#x2F; function 声明<br>            var fn &#x3D; function() {} &#x2F;&#x2F; 变量声明<br>            var fn &#x3D; new Function() {} &#x2F;&#x2F; 使用Function构造，了解就好，很少使用<br>        函数的参数<br>            function fn(text){ &#x2F;&#x2F; 变量text是形式参数<br>                return text &#x2F;&#x2F; return  关键词将返回指定的值<br>            }<br>        函数的调用<br>            fn() &#x2F;&#x2F; 调用fn函数<br>            fn(1,2) &#x2F;&#x2F; 传入实际参数<br>            call方法 <a href="https://www.w3school.com.cn/js/js_function_call.asp">https://www.w3school.com.cn/js/js_function_call.asp</a><br>            apply方法 <a href="https://www.w3school.com.cn/js/js_function_apply.asp">https://www.w3school.com.cn/js/js_function_apply.asp</a></p>
<p>​		重复声明函数，会覆盖原有的定义<br>​			function fn() {<br>​				console.log(1)<br>​			}	<br>​			function fn() {<br>​				console.log(2)<br>​			}<br>​		递归<br>​			反复调用自身<br>​			了解递归的定义和实现思路，<br>​				 计算斐波那契数列 的函数如何实现</p>
<ul>
<li><p><input disabled="" type="checkbox"> 
​		了解函数的作用域</p>
</li>
<li><p><input disabled="" type="checkbox"> 
​			函数内部可以读取到外部定义的变量</p>
</li>
<li><p><input disabled="" type="checkbox"> 
​			函数内部定义的变量，无法被外部读取</p>
<p>​			var a &#x3D; 5</p>
<p>​			function fn() {</p>
<p>​				var b &#x3D; 10</p>
<p>​				console.log(b)</p>
<p>​				console.log(a)</p>
<p>​			}</p>
<p>​			console.log(b)</p>
</li>
<li><p><input disabled="" type="checkbox"> 
​		arguments对象，可以获取参数</p>
<p>​			&#x2F;&#x2F; 可以等看过数组再回头看这个</p>
<p>​			var add &#x3D; function (a,b) {</p>
<p>​				console.log(arguments[0]) </p>
<p>​			}</p>
</li>
<li><p><input disabled="" type="checkbox"> 
​		闭包(后续再理解)</p>
<p>​			理解一下定义，后续再了解深入的原因</p>
<p>​			<a href="https://www.w3school.com.cn/js/js_function_closures.asp">https://www.w3school.com.cn/js/js_function_closures.asp</a></p>
</li>
</ul>
<p>​		5.数组(array)</p>
<ul>
<li><p><input checked="" disabled="" type="checkbox"> 
​		数组的定义</p>
</li>
<li><p><input disabled="" type="checkbox"> 
​		声明数组</p>
<p>​			var arr &#x3D; [11,22,33]</p>
<p>​			var arr &#x3D; new Array([11,22,33])</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		数组的访问</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		数组的长度</p>
<p>​			arr.length (length属性)</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		通过索引访问，从0开始</p>
<p>​			arr[0] &#x2F;&#x2F; 第一个元素</p>
<p>​			arr[arr.length-1] &#x2F;&#x2F; 最后一个元素</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
​		循环</p>
<p>​			for</p>
<p>​			for in </p>
</li>
<li><p><input disabled="" type="checkbox"> 
​		数组的方法:</p>
<p>​			<a href="https://www.w3school.com.cn/js/js_array_methods.asp">https://www.w3school.com.cn/js/js_array_methods.asp</a></p>
<p>​			<a href="https://www.w3school.com.cn/js/js_array_sort.asp">https://www.w3school.com.cn/js/js_array_sort.asp</a></p>
<p>​			<a href="https://www.w3school.com.cn/js/js_array_iteration.asp">https://www.w3school.com.cn/js/js_array_iteration.asp</a></p>
</li>
</ul>
<h2 id="1-分类"><a href="#1-分类" class="headerlink" title="1.分类"></a>1.分类</h2><p>​		1.ECMAJS：基础语法</p>
<p>​		2.DOM：文档对象模型，可以访问某个元素</p>
<p>​		3.BOM：浏览器对象模型，可以对浏览器操作</p>
<h2 id="2-基础语法"><a href="#2-基础语法" class="headerlink" title="2.基础语法"></a>2.基础语法</h2><p>​	作为属性引用：console.log();    document.write();</p>
<p>​	外部引用1：head里写<code>&lt;script src=&quot;js文件名称.js&quot;&gt;不允许出现任何js代码&lt;/script&gt;</code></p>
<p>​	内部引用：《script》需要出现js代码《&#x2F;script》</p>
<p>​	多文件引用:<code>&lt;script src=&quot;/js/script1.js&quot;&gt;&lt;/script&gt; </code><br>​			   		 <code>&lt;script src=&quot;/js/script2.js&quot;&gt;&lt;/script&gt;</code></p>
<p>​	注释：&#x2F;&#x2F; 			 &#x2F;**&#x2F;</p>
<p>​	易错点：大小写敏感</p>
<h2 id="3-变量与作用域"><a href="#3-变量与作用域" class="headerlink" title="3.变量与作用域"></a>3.变量与作用域</h2><p>变量：</p>
<p>​		局部变量：   var 变量名&#x3D;   ；</p>
<p>​						  或者    var 变量名； 变量名&#x3D;   ；</p>
<p>​		全局变量：  变量名&#x3D;   ； </p>
<p>​		多个变量：  var 变量名1&#x3D;值1,变量名2,变量名3,变量名4&#x3D;值2；</p>
<p>​		变量名命名规范：和c语言唯一的区别是可以以字母数字下划线及＄组成。</p>
<p>作用域：</p>
<p>​		JavaScript 使用大括号，将多个相关的语句组合在一起，称为“区块”（block），单并不构成单独的作用域。</p>
<p>​		对于<code>var</code>命令来说，JavaScript 的区块不构成单独的作用域（scope）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  var a = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a // 1</span><br></pre></td></tr></table></figure>



<h2 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4.数据类型"></a>4.数据类型</h2><h4 id="1-原始类型"><a href="#1-原始类型" class="headerlink" title="1.原始类型"></a>1.原始类型</h4><p>​				<a href="https://wangdoc.com/javascript/types/general#typeof-%E8%BF%90%E7%AE%97%E7%AC%A6">数据类型概述 - JavaScript 教程 - 网道 (wangdoc.com)</a>（非常详细且有用，不要只看自己的笔记）</p>
<h5 id="1-分类-1"><a href="#1-分类-1" class="headerlink" title="1.分类"></a>1.分类</h5><p>​				1.unmber数字类型</p>
<p>​						整数：4字节32位</p>
<p>​						小数（浮点数）：8字节64位</p>
<p>​				2.string字符串                         </p>
<p>​						方法: <a href="https://www.w3school.com.cn/js/js_string_methods.asp">https://www.w3school.com.cn/js/js_string_methods.asp</a></p>
<p>​						转义:斜杠(\ “hello \ “)</p>
<p>​						方法：</p>
<p>​								charAt() - 返回指定索引位置的字符<br>​								<strong>charCodeAt() - 返回指定索引位置字符的 Unicode 编码</strong><br>​								<strong>concat() - 连接两个字符串</strong><br>​								endsWith() - 检查字符串是否以指定的字符结束<br>​								<strong>includes() - 检查字符串是否包含指定的字符</strong><br>​								indexOf() - 检索字符首次出现的索引位置<br>​								lastIndexOf() - 从后向前检索字符最后一次出现的索引位置<br>​								<strong>localeCompare() - 根据本地排序规则比较两个字符串</strong><br>​								<strong>match() - 找到一个或多个正则表达式的匹配</strong><br>​								<strong>replace() - 替换与正则表达式匹配的子串</strong><br>​								<strong>search() - 检索与正则表达式相匹配的值</strong><br>​								<strong>slice() - 提取字符串的片断,并返回新的字符串</strong><br>​								<strong>split() - 把字符串分割为字符串数组</strong><br>​								startsWith() - 检查字符串是否以指定的字符开始<br>​								substring() - 提取字符串中两个指定的索引位置之间的字符<br>​								toLowerCase() - 转换字符串为小写<br>​								toUpperCase() - 转换字符串为大写<br>​								trim() - 移除字符串首尾空白</p>
<p>例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">js</span><br><span class="line">let str = &quot;Hello World!&quot;;</span><br><span class="line"></span><br><span class="line">str.charAt(0);     // H</span><br><span class="line">str.concat(&quot;Claude&quot;); // Hello World!Claude</span><br><span class="line">str.endsWith(&quot;d!&quot;);  // true</span><br><span class="line">str.includes(&quot;o&quot;);   // true </span><br><span class="line">str.indexOf(&quot;o&quot;);    // 4</span><br><span class="line">str.lastIndexOf(&quot;o&quot;); // 7 </span><br><span class="line">str.match(/o/g);     // [&quot;o&quot;, &quot;o&quot;, &quot;o&quot;]</span><br><span class="line">str.replace(&quot;o&quot;, &quot;_&quot;); // Hell_ W_rld!</span><br><span class="line">str.slice(0, 5);     // Hello</span><br><span class="line">str.split(&quot; &quot;);      // [&quot;Hello&quot;, &quot;World!&quot;]</span><br><span class="line">str.startsWith(&quot;He&quot;); // true</span><br><span class="line">str.substring(0, 5);  // Hello </span><br><span class="line">str.toUpperCase();   // HELLO WORLD!</span><br></pre></td></tr></table></figure>

<p>​				3.boolean布尔</p>
<p>​				4.null空</p>
<p>​				5.undefined未定义		声明变量未赋值，访问对象不存在</p>
<p>​					</p>
<h5 id="2-数据转换"><a href="#2-数据转换" class="headerlink" title="2.数据转换"></a>2.数据转换</h5><p>​				取类型并赋值：typeof（）</p>
<p>​										   作用：判断变量是否未定义的同时，避免抛出错误。</p>
<p>​												  	<img src="../其它/markdown-img\Q4-JS-1基础.assets\image-20230408212824971.png" alt="image-20230408212824971" style="zoom:50%;" /></p>
<p>​				判断是否为数字类型：isNaN</p>
<p>​				强制转换字符串：变量.toString（）</p>
<p>​				强制转换整数（小数点后的全部舍掉）：parseInt（数据）；</p>
<p>​				强制转换小数：parseFloat（数据）；</p>
<p>​										易错点：如果数据里包含非数字型数据，则会输出转换好的数据，并停止转换异常数据。</p>
<p>​										例子：var  i &#x3D; parseFloat（13.2你好442）；将会输出13.2。</p>
<h4 id="2-引用类型"><a href="#2-引用类型" class="headerlink" title="2.引用类型"></a>2.引用类型</h4><h2 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5.运算符"></a>5.运算符</h2><h4 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1.算数运算符"></a>1.算数运算符</h4><h4 id="2-关系运算符"><a href="#2-关系运算符" class="headerlink" title="2.关系运算符"></a>2.关系运算符</h4><p>​				<img src="../其它/markdown-img\Q4-JS-1基础.assets\image-20230408111058932.png" alt="image-20230408111058932" style="zoom: 33%;" /></p>
<p>​					</p>
<p>​					&#x3D;&#x3D;与&#x3D;&#x3D;&#x3D;的区别：&#x3D;&#x3D;会使两侧进行类型转换，并比较。&#x3D;&#x3D;&#x3D;会严格比较类型和数据。</p>
<h4 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3.逻辑运算符"></a>3.逻辑运算符</h4><p>​					<img src="../其它/markdown-img\Q4-JS-1基础.assets\image-20230408111154450.png" alt="image-20230408111154450" style="zoom: 50%;" /></p>
<h4 id="4-条件-x2F-三目运算符"><a href="#4-条件-x2F-三目运算符" class="headerlink" title="4.条件&#x2F;三目运算符"></a>4.条件&#x2F;三目运算符</h4><p>​					普通：</p>
<p>​					<img src="../其它/markdown-img\Q4-JS-1基础.assets\image-20230408111436303.png" alt="image-20230408111436303" style="zoom:33%;" /></p>
<p>​					嵌套：</p>
<p>​					<img src="../其它/markdown-img\Q4-JS-1基础.assets\image-20230408111514675.png" alt="image-20230408111514675" style="zoom:33%;" /></p>
<h2 id="6-标签（label）"><a href="#6-标签（label）" class="headerlink" title="6.标签（label）"></a>6.标签（label）</h2><p>JavaScript 语言允许，语句的前面有标签（label），相当于定位符，用于跳转到程序的任意位置，标签的格式如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">label:</span><br><span class="line">  语句</span><br></pre></td></tr></table></figure>

<p>标签可以是任意的标识符，但不能是保留字，语句部分可以是任意语句。</p>
<p>标签通常与<code>break</code>语句和<code>continue</code>语句配合使用，跳出特定的循环。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top:</span><br><span class="line">  for (var i = 0; i &lt; 3; i++)&#123;</span><br><span class="line">    for (var j = 0; j &lt; 3; j++)&#123;</span><br><span class="line">      if (i === 1 &amp;&amp; j === 1) break top;</span><br><span class="line">      console.log(&#x27;i=&#x27; + i + &#x27;, j=&#x27; + j);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">// i=0, j=0</span><br><span class="line">// i=0, j=1</span><br><span class="line">// i=0, j=2</span><br><span class="line">// i=1, j=0</span><br></pre></td></tr></table></figure>

<p>上面代码为一个双重循环区块，<code>break</code>命令后面加上了<code>top</code>标签（注意，<code>top</code>不用加引号），满足条件时，直接跳出双层循环。如果<code>break</code>语句后面不使用标签，则只能跳出内层循环，进入下一次的外层循环。</p>
<p>标签也可以用于跳出代码块。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">foo: &#123;</span><br><span class="line">  console.log(1);</span><br><span class="line">  break foo;</span><br><span class="line">  console.log(&#x27;本行不会输出&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(2);</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br></pre></td></tr></table></figure>

<p>上面代码执行到<code>break foo</code>，就会跳出区块。</p>
<p><code>continue</code>语句也可以与标签配合使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top:</span><br><span class="line">  for (var i = 0; i &lt; 3; i++)&#123;</span><br><span class="line">    for (var j = 0; j &lt; 3; j++)&#123;</span><br><span class="line">      if (i === 1 &amp;&amp; j === 1) continue top;</span><br><span class="line">      console.log(&#x27;i=&#x27; + i + &#x27;, j=&#x27; + j);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">// i=0, j=0</span><br><span class="line">// i=0, j=1</span><br><span class="line">// i=0, j=2</span><br><span class="line">// i=1, j=0</span><br><span class="line">// i=2, j=0</span><br><span class="line">// i=2, j=1</span><br><span class="line">// i=2, j=2</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>continue</code>命令后面有一个标签名，满足条件时，会跳过当前循环，直接进入下一轮外层循环。如果<code>continue</code>语句后面不使用标签，则只能进入下一轮的内层循环。</p>
<h2 id="7-分支语句"><a href="#7-分支语句" class="headerlink" title="7.分支语句"></a>7.分支语句</h2><p>1.if else</p>
<p>2.switch-case：优先用于等值判断</p>
<p>​						  <img src="./markdown-img\Q4-JS-1基础.assets\image-20230408111942096.png" alt="image-20230408111942096" style="zoom:33%;" /></p>
<p>​				1.break</p>
<p>​				2.<strong>continue用于立即终止本轮循环，返回循环结构的头部，开始下一轮循环。</strong></p>
<p>​						<img src="../其它/markdown-img\Q4-JS-1基础.assets\image-20230408205506290.png" alt="image-20230408205506290" style="zoom: 50%;" /></p>
<p>7.循环</p>
<p>1.while</p>
<p>2.do while：先执行再判断</p>
<p>​							<img src="../其它/markdown-img\Q4-JS-1基础.assets\image-20230408112304642.png" alt="image-20230408112304642" style="zoom:33%;" /></p>
<p>3.for</p>
<p>for in循环会遍历对象上所有可枚举的属性，包括从原型链继承下来的属性。 例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const obj = &#123; a: 1, b: 2, c: 3 &#125;;</span><br><span class="line">for (let prop in obj) &#123;</span><br><span class="line">  console.log(prop);</span><br><span class="line">&#125;</span><br><span class="line">// 输出 a, b, c</span><br></pre></td></tr></table></figure>

<p>for of是ES6中新增的遍历数据结构的循环方式，它可以遍历所有具有迭代器的数据结构（例如数组、Set、Map等）。for of循环不能直接迭代对象，因为对象不是可迭代的数据结构。 例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const arr = [1, 2, 3];</span><br><span class="line">for (let value of arr) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 输出 1, 2, 3</span><br></pre></td></tr></table></figure>

<h2 id="8-数组——类型为object，而不是数组类型"><a href="#8-数组——类型为object，而不是数组类型" class="headerlink" title="8.数组——类型为object，而不是数组类型"></a>8.数组——类型为object，而不是数组类型</h2><h3 id="1-索引数组"><a href="#1-索引数组" class="headerlink" title="1.索引数组"></a>1.索引数组</h3><h5 id="1-动态数组"><a href="#1-动态数组" class="headerlink" title="1.动态数组"></a>1.动态数组</h5><p>​											var arr&#x3D;new Array（“add”，“okm”，“fnwk”）；</p>
<h5 id="2-静态数组（在JS里，这也是动态数组）"><a href="#2-静态数组（在JS里，这也是动态数组）" class="headerlink" title="2.静态数组（在JS里，这也是动态数组）"></a>2.静态数组（在JS里，这也是动态数组）</h5><p>​											var arr&#x3D;【15，1，3】；</p>
<h5 id="3-最好的方法"><a href="#3-最好的方法" class="headerlink" title="3.最好的方法"></a>3.最好的方法</h5><p>​											先声明空数组，再通过arr[index]访问并赋值。</p>
<h5 id="4-arr-length没有括号"><a href="#4-arr-length没有括号" class="headerlink" title="4.arr.length	没有括号"></a>4.arr.length	没有括号</h5><p>​											console.log（arr.length）</p>
<h5 id="5-访问倒数第n个数据"><a href="#5-访问倒数第n个数据" class="headerlink" title="5.访问倒数第n个数据"></a>5.访问倒数第n个数据</h5><p>​											倒数第一个：arr[length-1]</p>
<p>​											<strong>倒数第n个：arr[length-n]</strong></p>
<h3 id="2-关联数组-hash数组（只希望快速查找时使用）"><a href="#2-关联数组-hash数组（只希望快速查找时使用）" class="headerlink" title="2.关联数组   hash数组（只希望快速查找时使用）"></a>2.关联数组   hash数组（只希望快速查找时使用）</h3><h5 id="1-区别"><a href="#1-区别" class="headerlink" title="1.区别"></a>1.区别</h5><p>​											1.可以自定义下标名称。</p>
<p>​											2.查找快，o（1）.</p>
<p>​											3.查找不用遍历，也无法遍历。</p>
<h5 id="2-创建方式"><a href="#2-创建方式" class="headerlink" title="2.创建方式"></a>2.创建方式</h5><p>​											1.创建空数组</p>
<p>​											2.以自定义字符串为下标，给数组赋值</p>
<p>​												<img src="../其它/markdown-img\Q4-JS-1基础.assets\image-20230408132738093.png" alt="image-20230408132738093" style="zoom: 25%;" /></p>
<h5 id="3-易错点"><a href="#3-易错点" class="headerlink" title="3.易错点"></a>3.易错点</h5><p>​											不能用for循环，不能遍历，和存储位置无关</p>
<p>​											<img src="../其它/markdown-img\Q4-JS-1基础.assets\image-20230408133014313.png" alt="image-20230408133014313" style="zoom: 33%;" /></p>
<h3 id="3-数组API"><a href="#3-数组API" class="headerlink" title="3.数组API"></a>3.数组API</h3><h5 id="1-String-arr-；数组转字符串"><a href="#1-String-arr-；数组转字符串" class="headerlink" title="1.String(arr)；数组转字符串"></a>1.String(arr)；<strong>数组转字符串</strong></h5><p>​											概念：转化成字符串，并用逗号隔开。</p>
<p>​											作用：打印出arr，判断一下数据有没有被更改过。</p>
<h5 id="2-arr-join-“连接符”-；拼接数组元素"><a href="#2-arr-join-“连接符”-；拼接数组元素" class="headerlink" title="2.arr.join(“连接符”)；拼接数组元素"></a>2.arr.join(“连接符”)；<strong>拼接数组元素</strong></h5><p>​									概念：将array中每个部分，用”连接符“连接成字符串</p>
<p>​												<img src="../其它/markdown-img\Q4-JS-1基础.assets\image-20230408135220827.png" alt="image-20230408135220827" style="zoom:25%;" /></p>
<p>​									作用1：判断数组为空。</p>
<p>​									作用2：字符串连接，将数组转化为html内容。<strong>（动态页面）</strong></p>
<p>​												方法1：”&lt;开始1&gt;&lt;开始2&gt;”+arr.join(“&lt;&#x2F;结束2&gt;&lt;开始2&gt;”)+”&lt;&#x2F;结束2&gt;&lt;&#x2F;结束1&gt;“</p>
<p>​												方法2：”&lt;开始标签1&gt;”+arr.join(“&lt;&#x2F;结束标签1&gt;&lt;开始标签1&gt;”)+”&lt;&#x2F;结束标签1&gt;“</p>
<p>​												看不懂后面有说明。</p>
<h5 id="3-concat-拼接"><a href="#3-concat-拼接" class="headerlink" title="3.concat()拼接"></a>3.concat()拼接</h5><p>​								1.概念：引用并拼接多个数组（不改变原数组值），返回结果值。（表面是复制数组值并拼接，本质还是引用）</p>
<h5 id="4-arr-slice-index1，index2-查数组元素"><a href="#4-arr-slice-index1，index2-查数组元素" class="headerlink" title="4.arr.slice(index1，index2)查数组元素"></a>4.arr.slice(index1，index2)<strong>查数组元素</strong></h5><p>​								1.概念：</p>
<p>​												1.选取一个范围的：选取arr[index1]~arr[index2]的值。</p>
<p>​												2.选取到尾部的：arr.slice(index1)省略第二个值。</p>
<p>​												3.复制数组：arr.slice(0,arr.length)&#x3D;&#x3D;&#x3D;arr.slice();</p>
<p>​								2.例子：<img src="../其它/markdown-img\Q4-JS-1基础.assets\image-20230408151232135.png" alt="image-20230408151232135" style="zoom:33%;" /></p>
<p>​								3.重点：下标可以用负数</p>
<h3 id="4-arr-splice增删改数组元素"><a href="#4-arr-splice增删改数组元素" class="headerlink" title="4.arr.splice增删改数组元素"></a>4.arr.splice<strong>增删改数组元素</strong></h3><p>​								注：是改变数组本身，而不是引用。<strong>删除和插入的元素个数不必一致，数组下标会自动后移。</strong></p>
<h5 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h5><p>​								1.arr.splice(start,<strong>0</strong>,var1,var2….varn);</p>
<h5 id="2-删"><a href="#2-删" class="headerlink" title="2.删"></a>2.删</h5><p>​								1.arr.splice(start,n);</p>
<p>​										删除从start开始的（含start）n个元素，<strong>返回值为被删除数据组成的临时数组</strong>。</p>
<h5 id="3-改"><a href="#3-改" class="headerlink" title="3.改"></a>3.改</h5><p>​								1.arr.splice(start,n,<strong>var1,var2….varn</strong>);</p>
<p>​										删除从start开始的（含start）n个元素，并用n种var填充。</p>
<p>​								2.arr.splice(start,n,<strong>…arr2</strong>);</p>
<p>​										删除从start开始的（含start）n个元素，并用数组的所有值填充。<strong>易错点：…必须有</strong></p>
<p>​								3.例<img src="../其它/markdown-img\Q4-JS-1基础.assets\image-20230408155222560.png" alt="image-20230408155222560" style="zoom: 50%;" /></p>
<h4 id="5-颠倒arr-reverse"><a href="#5-颠倒arr-reverse" class="headerlink" title="5.颠倒arr.reverse();"></a>5.颠倒arr.reverse();</h4><p>​							只颠倒，不排序。</p>
<h4 id="6-排序arr-sort"><a href="#6-排序arr-sort" class="headerlink" title="6.排序arr.sort();"></a>6.排序arr.sort();</h4><p>​							缺点：默认将所有类型转成字符串，再从小到大排序。</p>
<p>​							解决方法：重构比较函数。</p>
<blockquote>
<p>arr.join()说明</p>
<p>​			arr.join()<code>方法取出的是数组</code>arr<code>中的每个元素，将它们用</code>&lt;&#x2F;结束标签&gt;&lt;开始标签&gt;&#96; 连接起来形成一个新的字符串。</p>
<p>​			&lt;开始标签1&gt;<code>和</code>&lt;&#x2F;结束标签1&gt;<code>是代码里本来就有的标签，分别表示HTML元素的开始标签和结束标签；而</code>&lt;开始标签2&gt;<code>和</code>&lt;&#x2F;结束标签2&gt;&#96;是你添加进去的标签。</p>
<p>​			<code>arr.join()</code>方法取出的是数组<code>arr</code>中的每个元素，可以是任何类型的值，例如字符串或数字。将它们用<code>&lt;/结束标签2&gt;&lt;开始标签2&gt;</code>连接起来形成一个新的字符串。这里的<code>&lt;/结束标签2&gt;&lt;开始标签2&gt;</code>是你添加的标签内容。</p>
<p>以下是一个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;];</span><br><span class="line">let result = &#x27;&lt;ul&gt;&lt;li&gt;&#x27; + arr.join(&#x27;&lt;/li&gt;&lt;li&gt;&#x27;) + &#x27;&lt;/li&gt;&lt;/ul&gt;&#x27;;</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure>

<p>​			在这个例子中，<code>&lt;开始标签1&gt;</code>是<code>&lt;ul&gt;</code>，<code>&lt;/结束标签1&gt;</code>是<code>&lt;/ul&gt;</code>，<code>&lt;开始标签2&gt;</code>是<code>&lt;li&gt;</code>，<code>&lt;/结束标签2&gt;</code>是<code>&lt;/li&gt;</code>。<code>arr.join(&#39;&lt;/li&gt;&lt;li&gt;&#39;)</code>取出的数组值是<code>&#39;apple&#39;</code>、<code>&#39;banana&#39;</code>和<code>&#39;orange&#39;</code>，它们将被用<code>&lt;/li&gt;&lt;li&gt;</code>连接起来形成一个新的字符串<code>&#39;apple&lt;/li&gt;&lt;li&gt;banana&lt;/li&gt;&lt;li&gt;orange&#39;</code>，最后生成的完整HTML元素如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;apple&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;banana&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;orange&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p>​			该HTML元素包含了多个子元素，子元素的内容从数组<code>arr</code>中取出，并且用<code>&lt;li&gt;</code>和<code>&lt;/li&gt;</code>标签包裹起来，每个子元素之间用<code>&lt;/li&gt;&lt;li&gt;</code>连接，而这些子元素整体则用<code>&lt;ul&gt;</code>和<code>&lt;/ul&gt;</code>标签包裹。</p>
</blockquote>
<p>​							</p>
<h2 id="9-函数"><a href="#9-函数" class="headerlink" title="9.函数"></a>9.函数</h2><p>1.输出：console.log();</p>
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS学习笔记-4.2JS标准库（base mooc）</title>
    <url>/2023/04/08/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JS/Q4-JS-2%E6%A0%87%E5%87%86%E5%BA%93%EF%BC%88mooc%EF%BC%89/</url>
    <content><![CDATA[<h1 id="3-2JS标准库（mooc）"><a href="#3-2JS标准库（mooc）" class="headerlink" title="3.2JS标准库（mooc）"></a>3.2JS标准库（mooc）</h1><h2 id="1-Object对象"><a href="#1-Object对象" class="headerlink" title="1.Object对象"></a>1.Object对象</h2><p><a href="https://wangdoc.com/javascript/stdlib/object">Object 对象 - JavaScript 教程 - 网道 (wangdoc.com)</a></p>
<ol>
<li>Object() 是用来创建一个新的对象的构造函数；</li>
<li>Object.keys() 和 Object.getOwnPropertyNames() 是用来获取对象属性名的方法；</li>
<li>Object.prototype.toString() 是判断数据类型的重要方法；</li>
<li>Object.prototype.hasOwnProperty() 可以用来判断一个对象是否包含指定的属性。</li>
</ol>
<p>需要注意的是，Object.keys()和Object.getOwnPropertyNames()这两个方法虽然类似，但是在获取对象属性名时有一些不同的地方。</p>
<h2 id="2-属性描述对象"><a href="#2-属性描述对象" class="headerlink" title="2.属性描述对象"></a>2.属性描述对象</h2><p><a href="https://wangdoc.com/javascript/stdlib/attributes">属性描述对象 - JavaScript 教程 - 网道 (wangdoc.com)</a></p>
<ol>
<li><p>Object.getOwnPropertyDescriptor() 获取对象属性的描述符，并返回一个包含属性信息的对象；</p>
<p>通常在需要了解或控制属性的特性（例如是否可枚举、可写、可配置）时使用。</p>
</li>
<li><p>Object.getOwnPropertyNames() 返回一个由一个对象自己拥有的属性名称组成的数组，不包括继承的属性名称；</p>
<p>通常用于遍历对象的属性。</p>
</li>
<li><p>Object.defineProperty() 给对象添加新属性或者修改已存在属性并返回修改后的对象；</p>
<p>通常在需要控制属性的一些特性时使用。</p>
</li>
<li><p>Object.defineProperties() 批量添加属性或修改已存在属性并返回修改后的对象；</p>
<p>通常用于一次性操作多个属性。</p>
</li>
<li><p>Object.prototype.propertyIsEnumerable() 判断对象的某个属性是否可枚举，返回一个布尔值；</p>
<p>通常用于判断对象的属性是否可以通过 for…in 循环枚举出来。</p>
</li>
<li><p>value等元属性 属性描述符对象中的 value、get 和 set 分别表示属性的值、getter 函数和 setter 函数；</p>
<p>通常用于控制属性的访问和赋值行为。</p>
</li>
<li><p>Object.preventExtensions() 禁止一个对象添加新属性并返回原对象；</p>
<p>通常在需要冻结一个对象时使用。</p>
</li>
<li><p>Object.isExtensible() 判断一个对象是否可扩展，返回一个布尔值；</p>
<p>通常用于判断对象是否可以添加新属性。</p>
</li>
<li><p>Object.seal() 让一个对象不可扩展并将其所有属性的 configurable 特性设置为 false；</p>
<p>通常用于保护对象，防止意外修改其属性。</p>
</li>
<li><p>Object.isSealed() 判断一个对象是否被封闭，返回一个布尔值；</p>
<p>通常用于判断对象是否可以添加或删除属性。</p>
</li>
<li><p>Object.freeze() 冻结一个对象并将其所有属性的 writable、configurable 特性都设置为 false；</p>
<p>通常用于保护对象，防止任何修改。</p>
</li>
<li><p>Object.isFrozen() 判断一个对象是否被冻结，返回一个布尔值；</p>
<p>通常用于判断对象是否可以被修改。</p>
</li>
</ol>
<p>这些方法在前端和 Node.js 开发中经常用得到。例如在 React 中，通过 Object.freeze() 冻结组件的 props 和 state 属性，防止意外修改；在 Vue.js 中，则通过 Object.defineProperty() 和 Object.defineProperties() 来实现双向绑定等功能。这些方法使用方便灵活，但需要注意不同方法的使用场景和属性特性，以避免出现意外错误。</p>
<ol>
<li>Object.getOwnPropertyDescriptor() - 获取一个对象上指定属性的描述符</li>
</ol>
<p>该方法用于获取一个对象上指定属性的描述符。返回一个包含获取的描述符属性的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="keyword">const</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor)</span><br><span class="line"><span class="comment">// 输出: &#123; value: &#x27;Tom&#x27;, writable: true, enumerable: true, configurable: true &#125;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>Object.getOwnPropertyNames() - 获取一个对象的所有属性名（包括不可遍历的属性名）</li>
</ol>
<p>该方法用于获取一个对象的所有属性名，返回一个数组，包括不可遍历的属性名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="keyword">const</span> propertyNames = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(propertyNames)</span><br><span class="line"><span class="comment">// 输出: [&quot;name&quot;, &quot;age&quot;]</span></span><br></pre></td></tr></table></figure>

<ol>
<li>Object.defineProperty() - 给一个对象定义一个新属性</li>
</ol>
<p>该方法用于给一个对象定义一个新属性。接收三个参数：对象obj、定义的属性名和属性描述符descriptor。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>) <span class="comment">// 输出: Tom</span></span><br></pre></td></tr></table></figure>

<ol>
<li>Object.defineProperties() - 给对象定义多个属性</li>
</ol>
<p>该方法用于给一个对象定义多个属性。接收两个参数：对象obj和一个包含属性名及对应属性描述符的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(obj, &#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line"><span class="comment">// 输出: &#123; name: &quot;Tom&quot;, age: 20 &#125;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>Object.prototype.propertyIsEnumerable() - 判断一个属性是否可枚举</li>
</ol>
<p>该方法用于判断一个对象上的属性是否可以被枚举。返回一个布尔值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;toString&#x27;</span>)) <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure>

<ol>
<li>value等元属性 - 改变属性的描述符</li>
</ol>
<p>描述符包括（value，writable，enumerable，configurable），是属性对象的一组元属性。可以使用Object.defineProperty()或Object.defineProperties()方法更改元属性描述符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> descriptor = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, descriptor)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>) <span class="comment">// 输出: Tom</span></span><br><span class="line">descriptor.<span class="property">value</span> = <span class="string">&#x27;Jerry&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>) <span class="comment">// 输出: Tom，由于writable为false，所以值没有被改变</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(descriptor)</span><br><span class="line">descriptor.<span class="property">value</span> = <span class="string">&#x27;Jerry&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>) <span class="comment">// 输出: Tom，由于value被冻结，所以值没有被改变</span></span><br></pre></td></tr></table></figure>

<ol>
<li>Object.preventExtensions() - 防止向一个对象添加新属性</li>
</ol>
<p>该方法用于防止向一个对象添加新属性。返回修改后的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(obj)</span><br><span class="line">obj.<span class="property">gender</span> = <span class="string">&#x27;male&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">gender</span>) <span class="comment">// 输出: undefined，由于已经预防拓展，gender属性没有被添加</span></span><br></pre></td></tr></table></figure>

<ol>
<li>Object.isExtensible() - 判断一个对象是否可以拓展</li>
</ol>
<p>该方法用于判断一个对象是否可以拓展。返回一个布尔值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(obj)) <span class="comment">// 输出: true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(obj)) <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure>

<ol>
<li>Object.seal() - 密封一个对象，防止添加和删除属性</li>
</ol>
<p>该方法用于密封一个对象，即防止向一个对象添加和删除属性。返回修改后的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">seal</span>(obj)</span><br><span class="line">obj.<span class="property">gender</span> = <span class="string">&#x27;male&#x27;</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">age</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line"><span class="comment">// 输出: &#123; name: &quot;Tom&quot;, age: 20 &#125;，由于已经被封闭，gender属性没有被添加，age属性没有被删除</span></span><br></pre></td></tr></table></figure>

<ol>
<li>Object.isSealed() - 判断一个对象是否被密封</li>
</ol>
<p>该方法用于判断一个对象是否被密封。返回一个布尔值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isSealed</span>(obj)) <span class="comment">// 输出: false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">seal</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isSealed</span>(obj)) <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure>

<ol>
<li>Object.freeze() - 冻结一个对象，防止添加、删除和更改属性</li>
</ol>
<p>该方法用于冻结一个对象，即防止向一个对象添加、删除、更改属性。返回修改后的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj)</span><br><span class="line">obj.<span class="property">gender</span> = <span class="string">&#x27;male&#x27;</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">age</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;Jerry&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line"><span class="comment">// 输出: &#123; name: &quot;Tom&quot;, age: 20 &#125;，由于已经被冻结，gender属性没有被添加，age属性没有被删除，name属性没有被更改</span></span><br></pre></td></tr></table></figure>

<ol>
<li>Object.isFrozen() - 判断一个对象是否被冻结</li>
</ol>
<p>该方法用于判断一个对象是否被冻结。返回一个布尔值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(obj)) <span class="comment">// 输出: false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(obj)) <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，Object.freeze()不仅会把属性的writable特性设置为false，还会把configurable特性设置为false，因此不能再通过Object.defineProperty()方法修改或删除现有属性。</p>
<h2 id="3-Array数组对象"><a href="#3-Array数组对象" class="headerlink" title="3.Array数组对象"></a>3.Array数组对象</h2><ol>
<li><p>构造函数 通过构造函数创建对象实例，由于 JS 中函数也是对象，因此也可以</p>
<p>为函数添加属性或方法。</p>
</li>
<li><p>静态方法 直接通过类（构造函数）调用的方法，而非实例方法，</p>
<p>用于对类进行操作或返回特定信息。</p>
</li>
<li><p>Array.isArray() 静态方法，判断传入的参数是否为数组，返回一个布尔值；</p>
<p>通常用于数组类型的检查。</p>
</li>
<li><p>实例方法 通过实例对象调用的方法，</p>
<p>一般用于操作实例的属性或方法。</p>
</li>
<li><p>valueOf()，toString() 均为实例方法，用于将一个对象转换成字符串或原始值；</p>
<p>通常在需要将对象转换为不同类型的数据时使用。</p>
</li>
<li><p>push()，pop() 向数组末尾添加一个或多个元素，或从数组末尾弹出一个元素；</p>
<p>通常用于对数组进行增删操作。</p>
</li>
<li><p>shift()，unshift() 向数组开头添加一个或多个元素，或从数组开头删除一个元素；</p>
<p>通常用于对数组进行增删操作。</p>
</li>
<li><p>join() 将数组转换为字符串，用指定的分隔符分隔各元素；</p>
<p>通常用于将数组内容连接为一串字符串。</p>
</li>
<li><p>concat() 将两个或多个数组合并为一个新数组；</p>
<p>通常用于将多个数组进行合并。</p>
</li>
<li><p>reverse() 将数组中的元素顺序反转；</p>
<p>通常用于对数组进行倒序排列。</p>
</li>
<li><p>slice() 返回一个数组的一部分浅拷贝，不改变原数组；</p>
<p>通常用于对数组进行截取或复制。</p>
</li>
<li><p>splice() 向数组中添加或删除元素，并返回被删除元素的数组；</p>
<p>通常用于对数组进行增删操作。</p>
</li>
<li><p>sort() 对数组进行升序或降序排列；</p>
<p>通常用于对数组进行排序。</p>
</li>
<li><p>map() 将数组中的每个元素通过函数映射为一个新的元素，并返回新数组；</p>
<p>通常用于对元素进行转换或提取。</p>
</li>
<li><p>forEach() 对数组中的每个元素执行指定的操作，不改变原数组；</p>
<p>通常用于对数组进行遍历或执行某个操作。</p>
</li>
<li><p>filter() 筛选数组中符合条件的元素并返回一个新数组；</p>
<p>通常用于对数组进行筛选或过滤。</p>
</li>
<li><p>some()，every() 均对数组中的所有元素进行指定的操作，并返回一个布尔值表示是否符合条件；</p>
<p>通常用于对数组进行条件判断。</p>
</li>
<li><p>reduce()，reduceRight() 通过对数组中的元素执行函数来将其转化为一个值并返回；</p>
<p>通常用于对数组进行聚合、求和、平均等操作。</p>
</li>
<li><p>indexOf()，lastIndexOf() 返回指定元素在数组中第一次出现的位置或最后一次出现的位置，如果未找到则返回 -1；</p>
<p>通常用于查询元素在数组中的位置。</p>
</li>
<li><p>链式使用 将以上方法进行链式调用，可简化代码且易于阅读；</p>
<p>通常用于多个数组操作进行合并，提高代码的可读性。</p>
</li>
<li><p>.length返回数组的长度</p>
</li>
</ol>
<p>在前端和 Node.js 开发中，数组的使用频率非常高。例如在 Vue.js 中，通过数组的相关方法来动态修改组件的值，从而实现数据的响应式更新。这些方法使用方便灵活，但需要注意不同方法的使用场景和不同方法之间的区别，以避免出现错误或代码可读性较差的情况。</p>
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS学习笔记-4.3脚本加载（base图灵）</title>
    <url>/2023/04/09/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JS/Q4-JS-3%E8%84%9A%E6%9C%AC%E5%8A%A0%E8%BD%BD%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%BE%E7%81%B5%EF%BC%89/</url>
    <content><![CDATA[<h1 id="4-3脚本的加载时机"><a href="#4-3脚本的加载时机" class="headerlink" title="4.3脚本的加载时机"></a>4.3脚本的加载时机</h1><h2 id="4-3-1script标签"><a href="#4-3-1script标签" class="headerlink" title="4.3.1script标签"></a>4.3.1script标签</h2><h3 id="1-属性"><a href="#1-属性" class="headerlink" title="1.属性"></a>1.属性</h3><p>​	1.crossorigin：可选。</p>
<p>​		配置相关请求的CORS（跨源资源共享）设置。默认不使用CORS。	</p>
<ul>
<li>​				crossorigin&#x3D;  “anonymous”配置文件请求不必设置凭据标志。</li>
<li>​				crossorigin&#x3D;”use-credentials”设置凭据 标志，意味着出站请求会包含凭据。</li>
</ul>
<p>​	2.integrity：可选。</p>
<p>​			允许比对加密签名以验证子资源完整性。用于确保中介网没有恶意篡改。</p>
<p>​	3.async：异步执行脚本, 可选。</p>
<p>​			表示立即开始下载脚本文件，但不会阻止其他资源的下载（如图片、CSS 等），也不会等待页面完全加载完毕</p>
<p>​			与<code>defer</code>不同的是，标记为<code>async</code>的脚本<strong>并不保证能按照它们出现的次序执行</strong>。</p>
<p>​			因此，该属性常用于不需要等待页面加载完毕就可以立即执行的脚本。</p>
<p>​	4.defer：可选。</p>
<p>​			表示<strong>外部脚本</strong>可以延迟到文档完全被解析和显示之后再执行。</p>
<p>​			因此，该属性常用于，我们想要延迟脚本的执行的情况。</p>
<p>5.举例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.async实例</span><br><span class="line">    &lt;h1&gt;async 示例&lt;/h1&gt;</span><br><span class="line">    &lt;script src=&quot;./example.js&quot; async&gt;&lt;/script&gt;</span><br><span class="line">    &lt;p&gt;此段文字不受脚本影响，可瞬间加载。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">由于 async 属性的作用，浏览器会立即下载该 JavaScript 文件，并在下载完成后会立即执行其中的代码。同时，页面内容也会立即显示出来，而不必等待 JavaScript 文件的下载和执行。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.defer实例</span><br><span class="line">    &lt;h1&gt;defer 示例&lt;/h1&gt;</span><br><span class="line">    &lt;script src=&quot;./example.js&quot; defer&gt;&lt;/script&gt;</span><br><span class="line">    &lt;p&gt;此段文字受脚本影响，需要等待脚本完成执行后才能完全加载。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">由于 defer 属性的作用，浏览器会延迟 JavaScript 文件的执行，直到页面完全加载完毕并且 JavaScript 文件下载完成后才会执行其中的代码。在执行完脚本后，页面内容也会完全显示出来。需要注意的是，如果有多个带有 defer 属性的脚本文件，它们会按照它们在文档中出现的顺序依次执行。</span><br><span class="line"></span><br><span class="line">综上所述，async 和 defer 属性可以用来控制 JavaScript 文件的下载和执行时间，从而优化页面加载速度和用户体验。</span><br></pre></td></tr></table></figure>

<h2 id="4-3-2动态加载脚本（未细看）"><a href="#4-3-2动态加载脚本（未细看）" class="headerlink" title="4.3.2动态加载脚本（未细看）"></a>4.3.2动态加载脚本（未细看）</h2><h3 id="1-本质"><a href="#1-本质" class="headerlink" title="1.本质"></a>1.本质</h3><p>因为JavaScript可以使用DOM API，所以通过向DOM中动态添加<code>script</code>元素同样可以加载指定的脚本。只要创建一个<code>script</code>元素并将其添加到DOM即可。</p>
<h3 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h3><p>JavaScript 代码可以通过创建 script 元素并将其添加到 DOM 中的方式来加载脚本。以下是一个示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascript复制代码// 创建一个 script 元素</span><br><span class="line">let script = document.createElement(&#x27;script&#x27;);</span><br><span class="line">// 设置该 script 元素要加载的 JavaScript 脚本文件路径</span><br><span class="line">script.src = &#x27;gibberish.js&#x27;;</span><br><span class="line">// 将创建的 script 元素添加到 head 元素中</span><br><span class="line">document.head.appendChild(script);</span><br></pre></td></tr></table></figure>

<p>这段代码首先使用 <code>document.createElement()</code> 方法创建一个 <code>script</code> 元素，然后将要加载的 JavaScript 文件路径设置为 <code>script.src</code> 属性的值，并将创建的 <code>script</code> 元素添加到了 <code>head</code> 元素中。</p>
<p>需要注意的是，默认情况下以这种方式创建的 <code>script</code> 元素都是以异步方式加载的，相当于添加了 <code>async</code> 属性。这意味着，当执行到上述代码时，浏览器会立即开始下载指定的 JavaScript 文件，但不会阻止其他资源（如图片、CSS 等）的下载，也不会等待页面内容完全加载完毕。</p>
<p>如果要统一动态脚本的加载行为，可以明确设置为同步加载。在上述示例代码中，只需要为创建的 <code>script</code> 元素设置 <code>async</code> 属性的值为 <code>false</code> 即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascript复制代码// 创建一个 script 元素</span><br><span class="line">let script = document.createElement(&#x27;script&#x27;);</span><br><span class="line">// 设置该 script 元素要加载的 JavaScript 脚本文件路径</span><br><span class="line">script.src = &#x27;gibberish.js&#x27;;</span><br><span class="line">// 明确设置该 script 元素以同步方式加载</span><br><span class="line">script.async = false;</span><br><span class="line">// 将创建的 script 元素添加到 head 元素中</span><br><span class="line">document.head.appendChild(script);</span><br></pre></td></tr></table></figure>

<p>需要注意的是，以这种方式获取的资源对浏览器预加载器是不可见的，这意味着它们在资源获取队列中的优先级比较低。如果想要让预加载器知道这些动态请求的文件存在，可以在文档头部显式声明它们：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html复制代码&lt;!-- 显式声明要预加载的 JavaScript 文件 --&gt;</span><br><span class="line">&lt;link rel=&quot;preload&quot; href=&quot;gibberish.js&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>在上述示例代码中，使用 <code>rel</code> 属性值为 <code>preload</code> 来声明该文件是要预加载的，<code>href</code> 属性指定要加载的文件路径。</p>
<p>总之，通过动态创建 <code>script</code> 标签并将其添加到 DOM 中的方式来加载 JavaScript 脚本，可以灵活地控制 JavaScript 的加载时间，提高页面性能。但需要注意的是，如果使用异步加载，可能会影响页面其他资源的下载和渲染，而如果使用同步加载，则可能会影响页面的加载速度。因此，需要根据具体情况进行权衡和选择。</p>
<h2 id="4-3-3弱类型进行转换"><a href="#4-3-3弱类型进行转换" class="headerlink" title="4.3.3弱类型进行转换"></a>4.3.3弱类型进行转换</h2><p>​		JS是弱类型，想要类型转换不用强制类型转换</p>
<p>​		var  a&#x3D;“asdf”；</p>
<p>​		a&#x3D;100；&#x2F;&#x2F;a由string类型转换为number类型。</p>
<h2 id="4-3-4小结"><a href="#4-3-4小结" class="headerlink" title="4.3.4小结"></a>4.3.4小结</h2><p>JavaScript是通过<code>&lt;script&gt;</code>元素插入到HTML页面中的。这个元素可用于把JavaScript代码嵌入到HTML页面中，跟其他标记混合在一起，也可用于引入保存在外部文件中的JavaScript。本章的重点可以总结如下。</p>
<ul>
<li>要包含外部JavaScript文件，必须将<code>src</code>属性设置为要包含文件的URL。文件可以跟网页在同一台服务器上，也可以位于完全不同的域。</li>
<li>所有<code>&lt;script&gt;</code>元素会依照它们在网页中出现的次序被解释。在不使用<code>defer</code>和<code>async</code>属性的情况下，包含在<code>&lt;script&gt;</code>元素中的代码必须严格按次序解释。</li>
<li>对不推迟执行的脚本，浏览器必须解释完位于<code>&lt;script&gt;</code>元素中的代码，然后才能继续渲染页面的剩余部分。为此，通常应该把<code>&lt;script&gt;</code>元素放到页面末尾，介于主内容之后及<code>&lt;/body&gt;</code>标签之前。</li>
<li>可以使用<code>defer</code>属性把脚本推迟到文档渲染完毕后再执行。推迟的脚本原则上按照它们被列出的次序执行。</li>
<li>可以使用<code>async</code>属性表示脚本不需要等待其他脚本，同时也不阻塞文档渲染，即异步加载。异步脚本不能保证按照它们在页面中出现的次序执行。</li>
<li>通过使用<code>&lt;noscript&gt;</code>元素，可以指定在浏览器不支持脚本时显示的内容。如果浏览器支持并启用脚本，则<code>&lt;noscript&gt;</code>元素中的任何内容都不会被渲染。</li>
</ul>
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS学习笔记-4.5语法基础（base阮一峰/gpt ）</title>
    <url>/2023/04/11/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JS/Q4-JS-5%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="4-5语法基础"><a href="#4-5语法基础" class="headerlink" title="4.5语法基础"></a>4.5语法基础</h1><h2 id="4-5-1数据类型转换"><a href="#4-5-1数据类型转换" class="headerlink" title="4.5.1数据类型转换"></a>4.5.1数据类型转换</h2><h2 id="4-5-2错误处理机制"><a href="#4-5-2错误处理机制" class="headerlink" title="4.5.2错误处理机制"></a>4.5.2错误处理机制</h2><h3 id="1-抛出异常"><a href="#1-抛出异常" class="headerlink" title="1.抛出异常"></a>1.抛出异常</h3><p>在 JavaScript 中,throw 语句用于抛出一个异常并停止运行。</p>
<p>1.函数参数校验</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function divide(x, y) &#123;</span><br><span class="line">  // 如果 y 为 0,抛出异常</span><br><span class="line">  if (y === 0) &#123; </span><br><span class="line">    throw &#x27;除数不能为 0&#x27;; </span><br><span class="line">  &#125;</span><br><span class="line">  // 否则进行除法运算</span><br><span class="line">  return x / y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.范围或类型校验</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getMonthName(month) &#123;</span><br><span class="line">  // 如果 month 超出 1-12 的范围,抛出异常</span><br><span class="line">  if (month &lt; 1 || month &gt; 12) &#123;</span><br><span class="line">    throw &#x27;月份参数不在范围内&#x27;; </span><br><span class="line">  &#125;</span><br><span class="line">  // 否则返回月份名称</span><br><span class="line">  return [&#x27;January&#x27;, &#x27;February&#x27;, &#x27;March&#x27;, &#x27;April&#x27;, &#x27;May&#x27;, &#x27;June&#x27;, </span><br><span class="line">          &#x27;July&#x27;, &#x27;August&#x27;, &#x27;September&#x27;, &#x27;October&#x27;, &#x27;November&#x27;, &#x27;December&#x27;][month-1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.自定义错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 定义自己的错误类型</span><br><span class="line">function CustomError(message) &#123;</span><br><span class="line">  this.message = message; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 之后可以抛出这个错误</span><br><span class="line">function doSomething() &#123;</span><br><span class="line">  // 如果出现错误情况,抛出自定义错误</span><br><span class="line">  if (someCondition) &#123;</span><br><span class="line">    throw new CustomError(&#x27;something went wrong!&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>4.终止程序执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 如果出现非常严重的错误,终止程序执行</span><br><span class="line">if (someSeriousError) &#123;</span><br><span class="line">  throw &#x27;程序遇到严重错误,终止执行&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-小结"><a href="#1-小结" class="headerlink" title="1.小结"></a>1.小结</h3><p>​	  1. 参数校验和输入验证</p>
<ol start="2">
<li>自定义错误和异常</li>
<li>严重错误情况下终止程序执行它使我们的程序在出现异常情况时可以抛出错误并准确地响应,而不是默默地失败,这是编写健壮程序的关键。</li>
</ol>
<h3 id="2尝试执行"><a href="#2尝试执行" class="headerlink" title="2尝试执行"></a>2尝试执行</h3><p>对于前端 JS 来说,try&#x2F;catch&#x2F;finally 更常用于:</p>
<ol>
<li><h4 id="捕获异常和错误处理。"><a href="#捕获异常和错误处理。" class="headerlink" title="捕获异常和错误处理。"></a>捕获异常和错误处理。</h4><p>这也是最主要和常见的用法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//异常处理</span><br><span class="line">try &#123;</span><br><span class="line">  somethingRisky();  // 可能抛出异常的代码</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">  handleError(e);   // 处理异常</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="执行环境资源管理。"><a href="#执行环境资源管理。" class="headerlink" title="执行环境资源管理。"></a>执行环境资源管理。</h4><p>比如 DOM 元素创建后,无论是否使用成功,最后都remove DOM 元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//dom元素（资源）管理</span><br><span class="line">let elem;</span><br><span class="line">try &#123;</span><br><span class="line">  elem = createElement();// 使用 elem</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">  handleError(e);</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">  removeElement(elem);  // 移除 DOM 元素</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//或普通资源管理</span><br><span class="line">let resource;</span><br><span class="line">try &#123;</span><br><span class="line">  resource = acquireResource();  // 获取资源</span><br><span class="line">  // 使用资源</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">  releaseResource(resource);   // 释放资源</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="定时器和监听管理。"><a href="#定时器和监听管理。" class="headerlink" title="定时器和监听管理。"></a>定时器和监听管理。</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//定时器和事件监听器管理 </span><br><span class="line">let timer;</span><br><span class="line">try &#123;</span><br><span class="line">  timer = setTimeout(() =&gt; &#123; /* ... */ &#125;, 1000);</span><br><span class="line">  // 延时1秒后执行</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">  clearTimeout(timer);   // 清除定时器</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="互斥"><a href="#互斥" class="headerlink" title="互斥"></a>互斥</h4><p>在前端 JS 中,try&#x2F;catch&#x2F;finally 用于资源互斥的情况并不太常见。这是因为:</p>
<ol>
<li>前端 JS 大多运行在单线程环境中,不会出现复杂的互斥资源争用情况。</li>
<li>前端 JS 中较少打开文件、数据库连接等低级资源操作,所以较少资源管理和释放的需求。</li>
<li>前端 JS 的执行环境大多提供了垃圾回收机制,可以自动管理和回收资源,减少了手动资源管理的需要。</li>
</ol>
</li>
</ol>
<h3 id="5-2-2小结"><a href="#5-2-2小结" class="headerlink" title="5.2.2小结"></a>5.2.2小结</h3><p><strong>捕获异常会了就行。资源处理学了dom就会了。</strong>前端用不上自己写互斥，有自动回收（todo：看看自动回收机制，有哪里需要手动回收的地方）。</p>
<p>无论定时器是否执行成功,最后都会清除定时器,防止定时器泄露。所以总的来说,尽管 try&#x2F;catch&#x2F;finally 也可用于资源互斥,但在前端 JS 中,更主要的是用于异常捕获、资源和执行环境管理。而复杂的低级资源互斥则较少出现。<br>无论 try 块中是否发生异常,finally 块中的代码都一定会执行,主要用于资源清理。catch 块用于捕获 try 块中的异常,并进行处理。</p>
<h2 id="4-5-3编程风格"><a href="#4-5-3编程风格" class="headerlink" title="4.5.3编程风格"></a>4.5.3编程风格</h2>]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS学习笔记-4.4语言基础（base图灵）</title>
    <url>/2023/04/10/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JS/Q4-JS-4%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%BE%E7%81%B5%EF%BC%89/</url>
    <content><![CDATA[<h1 id="4-4语言基础"><a href="#4-4语言基础" class="headerlink" title="4.4语言基础"></a>4.4语言基础</h1><h2 id="4-4-1标识符"><a href="#4-4-1标识符" class="headerlink" title="4.4.1标识符"></a>4.4.1标识符</h2><p>所谓<strong>标识符</strong>，就是变量、函数、属性或函数参数的名称。标识符可以由一或多个下列字符组成：</p>
<ul>
<li>开头：字母、下划线或美元符$；</li>
<li>剩下：字母数字下划线美元符。</li>
</ul>
<h2 id="4-4-2三种声明变量的方法"><a href="#4-4-2三种声明变量的方法" class="headerlink" title="4.4.2三种声明变量的方法"></a>4.4.2三种声明变量的方法</h2><h3 id="1-var"><a href="#1-var" class="headerlink" title="1.var"></a>1.var</h3><p>​		1.基本知识</p>
<p>​					<strong>var作用域</strong>：函数的局部变量。</p>
<p>​					<strong>var的冗余声明</strong>：允许，所以很有可能在冗余声明后造成脏数据问题。</p>
<p>​					<strong>var的全局变量声明</strong>：想让let在函数里也能变成全局变量，就干脆不声明变量，直接用。比如在函数里直接写age&#x3D;30；</p>
<p>​		2.声明提升</p>
<p>​					var声明在后面也行，ECMAScript会自动把它提升到第一行。</p>
<h3 id="2-let"><a href="#2-let" class="headerlink" title="2.let"></a>2.let</h3><p>​		1.基本知识</p>
<p>​					<strong>let作用域</strong>：块级的局部变量。（块级就是for之类的也算）</p>
<p>​					<strong>let的冗余声明</strong>：不允许。就是不能在同一个块内let  a；let a；</p>
<p>​					<strong>let的全局变量声明</strong>：let写在全局里可以在页面生命周期内使用，但永远也不可能变成全局变量，它的类型只会是undefined。</p>
<p>​		2.声明提升</p>
<p>​					let不会声明提升，声明必须写在第一行。</p>
<p>​		3.用处</p>
<p>​					写在for循环里。</p>
<h3 id="3-const"><a href="#3-const" class="headerlink" title="3.const"></a><strong>3.const</strong></h3><p>​		1.基本知识</p>
<p>​					<strong>const重点</strong>：常量必须给初始值，且不能更改。</p>
<p>​					<strong>const作用域</strong>：和let一样</p>
<p>​					<strong>const的冗余声明</strong>：和let一样</p>
<p>​					<strong>let的全局变量声明</strong>：和let一样	</p>
<ol start="2">
<li>易错点<br>const 定义的变量不能被重新赋值,但是如果是对象或数组,其内部的属性是可以被修改的。<br>const 只保证变量名的指针是固定的,指向的对象或数组的内部状态是可以被修改的。</li>
</ol>
<h2 id="4-4-3小结"><a href="#4-4-3小结" class="headerlink" title="4.4.3小结"></a>4.4.3小结</h2><ol>
<li><h3 id="不使用var"><a href="#不使用var" class="headerlink" title="不使用var"></a>不使用var</h3><p>有了<code>let</code>和<code>const</code>，大多数开发者会发现自己不再需要<code>var</code>了。限制自己只使用<code>let</code>和<code>const</code>有助于提升代码质量，因为变量有了明确的作用域、声明位置，以及不变的值。</p>
</li>
<li><h3 id="const优先，let次之"><a href="#const优先，let次之" class="headerlink" title="const优先，let次之"></a>const优先，let次之</h3><p>使用<code>const</code>声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作。因此，很多开发者认为应该优先使用<code>const</code>来声明变量，只在提前知道未来会有修改时，再使用<code>let</code>。这样可以让开发者更有信心地推断某些变量的值永远不会变，同时也能迅速发现因意外赋值导致的非预期行为。</p>
</li>
<li><h3 id="const有易错点"><a href="#const有易错点" class="headerlink" title="const有易错点"></a>const有易错点</h3><p>const 定义的变量不能被重新赋值,但是如果是对象或数组,其内部的属性是可以被修改的。<br>const 只保证变量名的指针是固定的,指向的对象或数组的内部状态是可以被修改的。</p>
</li>
</ol>
<p>在使用<code>var</code>的时候，最常见的问题就是对迭代变量的奇特声明和修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (var i = 0; i &lt; 5; ++i) &#123;</span><br><span class="line">    setTimeout(() =&gt; console.log(i), 0)</span><br><span class="line">&#125;</span><br><span class="line">// 你可能以为会输出0、1、2、3、4</span><br><span class="line">// 实际上会输出5、5、5、5、5</span><br></pre></td></tr></table></figure>

<p>之所以会这样，是因为在退出循环时，迭代变量保存的是导致循环退出的值：5。在之后执行超时逻辑时，所有的<code>i</code>都是同一个变量，因而输出的都是同一个最终值。</p>
<p>而在使用<code>let</code>声明迭代变量时，<strong>JavaScript引擎在后台会为每个迭代循环声明一个新的迭代变量</strong>。每个<code>setTimeout</code>引用的都是不同的变量实例，所以<code>console.log</code>输出的是我们期望的值，也就是循环执行过程中每个迭代变量的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (let i = 0; i &lt; 5; ++i) &#123;</span><br><span class="line">    setTimeout(() =&gt; console.log(i), 0)</span><br><span class="line">&#125;</span><br><span class="line">// 会输出0、1、2、3、4</span><br></pre></td></tr></table></figure>

<p>这种每次迭代声明一个独立变量实例的行为适用于所有风格的<code>for</code>循环，包括<code>for-in</code>和<code>for-of</code>循环。4.3.2标识符.</p>
<h2 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h2><p>null：空指针</p>
<p>NULL未声明的变量</p>
<h2 id="4-4-4各种符号"><a href="#4-4-4各种符号" class="headerlink" title="4.4.4各种符号"></a>4.4.4各种符号</h2><h3 id="4-4-4-1字符串连接的两种方法"><a href="#4-4-4-1字符串连接的两种方法" class="headerlink" title="4.4.4.1字符串连接的两种方法"></a>4.4.4.1字符串连接的两种方法</h3><h5 id="1"><a href="#1" class="headerlink" title="1.+"></a>1.+</h5><p>​		“adf”+“asd”</p>
<h5 id="2-x3D"><a href="#2-x3D" class="headerlink" title="2.+&#x3D;"></a>2.+&#x3D;</h5><p>​		let a&#x3D;“dfe”</p>
<p>​		let b&#x3D;“jin”</p>
<p>​		b+&#x3D;a</p>
<h3 id="4-4-4-2字符串长度"><a href="#4-4-4-2字符串长度" class="headerlink" title="4.4.4.2字符串长度"></a>4.4.4.2字符串长度</h3><h5 id="1-String-length（只能用于字符串）"><a href="#1-String-length（只能用于字符串）" class="headerlink" title="1.String.length（只能用于字符串）"></a>1.String.length（只能用于字符串）</h5><p>​		(123).length不成立</p>
<p>​		“123”.length</p>
<h3 id="4-4-4-3字符串也能当成数组用"><a href="#4-4-4-3字符串也能当成数组用" class="headerlink" title="4.4.4.3字符串也能当成数组用"></a>4.4.4.3字符串也能当成数组用</h3><h5 id="1-string-0"><a href="#1-string-0" class="headerlink" title="1.string[0]"></a>1.string[0]</h5><p>​				let string&#x3D;“asd”</p>
<p>​				string[0]</p>
<p>​				》’a’</p>
<h5 id="2-string-1"><a href="#2-string-1" class="headerlink" title="2.string[-1]"></a>2.string[-1]</h5><h5 id="3-string-n"><a href="#3-string-n" class="headerlink" title="3.string[-n]"></a>3.string[-n]</h5><h2 id="4-4-4小结"><a href="#4-4-4小结" class="headerlink" title="4.4.4小结"></a>4.4.4小结</h2><p>-*&#x2F;号，会使原始类型隐式转换成number类型</p>
<p>也就是说加减乘除里只有加号需要注意两端变量的类型（只有加号重载了）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 - &#x27;2&#x27; // -1</span><br><span class="line">1 * &#x27;2&#x27; // 2</span><br><span class="line">1 / &#x27;2&#x27; // 0.5</span><br></pre></td></tr></table></figure>

<h2 id="4-4-5数组"><a href="#4-4-5数组" class="headerlink" title="4.4.5数组"></a>4.4.5数组</h2><h5 id="1-多维数组"><a href="#1-多维数组" class="headerlink" title="1.多维数组"></a>1.多维数组</h5><p>​		1.声明</p>
<p>​				const arr &#x3D; [</p>
<p>​				  [1, 2, 3],<br>​				  [4, 5, 6],<br>​				  [7, 8, 9],<br>​				  [[10, 11, 12], 13, 14]<br>​				];</p>
<p>​				const ourPets &#x3D; [  &#x2F;&#x2F;数组嵌套object嵌套数组</p>
<p>​			  {<br>​			    animalType: “cat”,<br>​			    names: [<br>​			      “Meowzer”,<br>​			      “Fluffy”,<br>​			      “Kit-Cat”<br>​			    ]<br>​			  },<br>​			  {<br>                animalType: “dog”,<br>                names: [<br>​     			 “Spot”,<br>                  “Bowser”,<br>                  “Frankie”<br>​			    ]<br>​			  }<br>​			];</p>
<p>​		2.访问</p>
<p>​				<strong>const subarray &#x3D; arr[3];</strong><br>​				<strong>const nestedSubarray &#x3D; arr【3]【0];</strong><br>​				<strong>const element &#x3D; arr【3]【0]【1];</strong></p>
<p>​				<strong>ourPets[0].names[1];</strong><br>​				<strong>ourPets[1].names[0];</strong></p>
<p>​		3.操作</p>
<p>​					3.1push尾插</p>
<p>​								arr.push([“a”,”b”]);</p>
<p>​					3.2pop尾删（作返回值）</p>
<p>​								arr.pop();</p>
<p>​					3.3shift头删（作返回值）</p>
<p>​								arr.shift();</p>
<p>​					3.4unshift头插</p>
<p>​								arr.unshift();</p>
<h2 id="4-4-5小结"><a href="#4-4-5小结" class="headerlink" title="4.4.5小结"></a>4.4.5小结</h2><p>无</p>
<h2 id="4-4-6函数"><a href="#4-4-6函数" class="headerlink" title="4.4.6函数"></a>4.4.6函数</h2><h1 id="1-函数也可返回undefined（说明了什么？什么时候会返回这种？用于写错代码了的时候不会报错所以不用写异常处理了是么？）"><a href="#1-函数也可返回undefined（说明了什么？什么时候会返回这种？用于写错代码了的时候不会报错所以不用写异常处理了是么？）" class="headerlink" title="1.函数也可返回undefined（说明了什么？什么时候会返回这种？用于写错代码了的时候不会报错所以不用写异常处理了是么？）"></a>1.函数也可返回undefined（说明了什么？什么时候会返回这种？用于写错代码了的时候不会报错所以不用写异常处理了是么？）</h1><h2 id="4-4-7运算符"><a href="#4-4-7运算符" class="headerlink" title="4.4.7运算符"></a>4.4.7运算符</h2><p>1.等于</p>
<p>​		&#x3D;&#x3D;</p>
<p>​		&#x3D;&#x3D;&#x3D;</p>
<p>2.不等于</p>
<p>​		!&#x3D;</p>
<p>​		!&#x3D;&#x3D;</p>
<p>3.与或非</p>
<p>​		&amp;&amp;   ||  ！</p>
<p>4.大于小于</p>
<p>​		&gt;&lt;</p>
<p>​		注：如果是原始类型比较，那就会隐式转换成number类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 &gt; &#x27;4&#x27; // true</span><br><span class="line">// 等同于 5 &gt; Number(&#x27;4&#x27;)</span><br><span class="line">// 即 5 &gt; 4</span><br></pre></td></tr></table></figure>

<h2 id="4-4-7小结"><a href="#4-4-7小结" class="headerlink" title="4.4.7小结"></a>4.4.7小结</h2><p>&lt;&gt;号，会使原始类型隐式转换成number类型</p>
<h2 id="4-4-8对象（键值对）"><a href="#4-4-8对象（键值对）" class="headerlink" title="4.4.8对象（键值对）"></a>4.4.8对象（键值对）</h2><h6 id="1-创建对象"><a href="#1-创建对象" class="headerlink" title="1.创建对象"></a>1.创建对象</h6><p>​		法一：字面量（花括号里放固定的值）</p>
<p>​				可以使用数字作为属性。 </p>
<p>​				可以省略单字字符串属性中的引号。</p>
<p>​				有非字符串属性的话，JavaScript 会自动将它们转为字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cat = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Whiskers&quot;</span>,</span><br><span class="line">  <span class="string">&quot;legs&quot;</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="string">&quot;tails&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&quot;enemies&quot;</span>: [<span class="string">&quot;Water&quot;</span>, <span class="string">&quot;Dogs&quot;</span>]</span><br><span class="line">  <span class="attr">make</span>: <span class="string">&quot;Ford&quot;</span>,</span><br><span class="line">  <span class="number">5</span>: <span class="string">&quot;five&quot;</span>,</span><br><span class="line">  <span class="string">&quot;model&quot;</span>: <span class="string">&quot;focus&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>​		法二：new</p>
<p>​					var  a&#x3D;new Object（）；</p>
<p>​					a.age&#x3D;”15”;</p>
<p>​					a.name&#x3D;”xcy”;</p>
<p>​					a.sayHello&#x3D;function(){				&#x2F;&#x2F;sayHello方法，里面是个匿名函数（不传参的函数）</p>
<p>​							return “hello!!!!!!!”;</p>
<p>​					}</p>
<p>​					console.log(a.age);</p>
<p>​					</p>
<p>​		法三：构造函数(封装函数，和new一起用，相当于用于继承）</p>
<p>​					&#x2F;&#x2F;一定要用this，不然生成的多个子对象会被最后一个的值覆盖</p>
<p>​					function    Father（uname,uage）{</p>
<p>​									this.name&#x3D;uname;</p>
<p>​									this.age&#x3D;uage;</p>
<p>​									this.sayHello&#x3D;function(strHi){</p>
<p>​												return strHi;</p>
<p>​									}</p>
<p>​					}</p>
<p>​					&#x2F;&#x2F;实例化</p>
<p>​					var son&#x3D;new Father(“xcy”,”15”);</p>
<p>​					son.sayHello(“Hello!!”);</p>
<p>​					son.sayHello(“Hi~”);</p>
<h6 id="2-增加对象的新属性"><a href="#2-增加对象的新属性" class="headerlink" title="2.增加对象的新属性"></a>2.增加对象的新属性</h6><p>1.点</p>
<p>​				ourDog.bark &#x3D; “bow-wow”;</p>
<p>2.中括号</p>
<p>​				ourDog[“bark”] &#x3D; “bow-wow”;</p>
<h6 id="3-删除对象的属性"><a href="#3-删除对象的属性" class="headerlink" title="3.删除对象的属性"></a>3.删除对象的属性</h6><p>1.delete</p>
<p>​				const ourDog &#x3D; {<br>                  “name”: “Camper”,<br>​				  “legs”: 4,<br>​				  “tails”: 1,<br>​				  “friends”: [“everything!”],<br>​				  “bark”: “bow-wow”<br>​				};</p>
<p>​				delete ourDog.bark;</p>
<h6 id="4-改属性"><a href="#4-改属性" class="headerlink" title="4.改属性"></a>4.改属性</h6><p>1.点</p>
<p>​				ourDog.name &#x3D; “Happy Camper”; </p>
<p>2.中括号</p>
<p>​				 ourDog[“name”] &#x3D; “Happy Camper”;</p>
<h6 id="5-查属性"><a href="#5-查属性" class="headerlink" title="5.查属性 . []"></a>5.查属性 . []</h6><p>​		2.1用.访问属性（属性名没有空格）</p>
<p>​				const myObj &#x3D; {<br>​				  prop1: “val1”,<br>​				  prop2: “val2”<br>​				};</p>
<p>​				const prop1val &#x3D; myObj.prop1;<br>​				const prop2val &#x3D; myObj.prop2;</p>
<p>​		2.2用[]访问属性（属性名有空格）</p>
<p>​				如果属性名中包含空格，就必须使用方括号表示法来获取它的属性值。</p>
<p>​				如果属性名中包含空格，就必须使用引号（单引号或双引号）将它们包裹起来。</p>
<p>​				const myObj &#x3D; {<br>                  “Space Name”: “Kirk”,<br>​				  “More Space”: “Spock”,<br>​				  “NoSpace”: “USS Enterprise”<br>​				};</p>
<p>​				myObj[“Space Name”];<br>​				myObj[‘More Space’];<br>​				myObj[“NoSpace”];</p>
<p>​		2.3用变量访问</p>
<p>​				1.基础</p>
<p>​					const dogs &#x3D; {<br>​					  Fido: “Mutt”,<br>​					  Hunter: “Doberman”,<br>​					  Snoopie: “Beagle”<br>​					};</p>
<p>​					const myDog &#x3D; “Hunter”;<br>​					const myBreed &#x3D; dogs[myDog];<br>​					console.log(myBreed);</p>
<p>​				2.复合</p>
<p><img src="../markdown-img/Q4-JS-4语言基础（图灵）.assets\image-20230414163952811.png" alt="image-20230414163952811" style="zoom:33%;" /><img src="../markdown-img/Q4-JS-4语言基础（图灵）.assets\image-20230414174937591.png" alt="image-20230414174937591" style="zoom:50%;" /></p>
<p><img src="../markdown-img/Q4-JS-4语言基础（图灵）.assets\image-20230414164428406.png" alt="image-20230414164428406" style="zoom:50%;" /><img src="../markdown-img/Q4-JS-4语言基础（图灵）.assets\image-20230414173434503.png" alt="image-20230414173434503" style="zoom:50%;" /></p>
<p>​								</p>
<h6 id="6-查嵌套对象的属性"><a href="#6-查嵌套对象的属性" class="headerlink" title="6.查嵌套对象的属性"></a>6.查嵌套对象的属性</h6><p>​		const ourStorage &#x3D; </p>
<p>​		{<br>​		  “desk”: </p>
<p>​			  {<br>​		   		 “drawer”: “stapler”<br>​		  	},<br>​		  “cabinet”: </p>
<p>​			{<br>           	 “top drawer”:</p>
<p>​						 {<br>                              “folder1”: “a file”,<br>                              “folder2”: <strong>“secrets”</strong><br>                        },<br>                “bottom drawer”: “soda”<br>              }<br>​		};</p>
<p>​		<strong>ourStorage.cabinet[“top drawer”].folder2;</strong></p>
<h6 id="7-复杂对象举例（JS的糅杂数据结构）"><a href="#7-复杂对象举例（JS的糅杂数据结构）" class="headerlink" title="7.复杂对象举例（JS的糅杂数据结构）"></a>7.复杂对象举例（JS的糅杂数据结构）</h6><p>const ourMusic &#x3D; [<br>  {<br>    “artist”: “Daft Punk”,<br>    “title”: “Homework”,<br>    “release_year”: 1997,<br>    “formats”: [<br>      “CD”,<br>      “Cassette”,<br>      “LP”<br>    ],<br>    “gold”: true<br>  }<br>];</p>
<p><strong>提示：</strong>数组中有多个 JSON 对象的时候，对象与对象之间要用逗号隔开。</p>
<h6 id="8-判断对象是否有指定属性"><a href="#8-判断对象是否有指定属性" class="headerlink" title="8.判断对象是否有指定属性"></a>8.判断对象是否有指定属性</h6><p>1.方法</p>
<p>​		.hasOwnProperty(propname)</p>
<p>2.举例</p>
<p>​		myObj.hasOwnProperty(“top”);<br>​		myObj.hasOwnProperty(“middle”);</p>
<h6 id="9-对象遍历for-in"><a href="#9-对象遍历for-in" class="headerlink" title="9.对象遍历for  in"></a>9.对象遍历for  in</h6><p>1.取属性名（而非整个属性）</p>
<p>​		for(var k in son){</p>
<p>​		console.log（k）;</p>
<p>​		}</p>
<p>2.取属性值(只能用【】不能用   .    )</p>
<p>​		console.log（k.name);</p>
<h3 id="4-4-8小结"><a href="#4-4-8小结" class="headerlink" title="4.4.8小结"></a>4.4.8小结</h3><p>1.对象之间赋值是引用的  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let a = new Object();  </span><br><span class="line">let b = a;                //则b===a（地址完全一样）。</span><br></pre></td></tr></table></figure>



<h3 id="4-4-9其它"><a href="#4-4-9其它" class="headerlink" title="4.4.9其它"></a>4.4.9其它</h3><h4 id="1-随机数"><a href="#1-随机数" class="headerlink" title="1.随机数"></a>1.随机数</h4><p>​	1.随机小数[0,1)</p>
<p>​			let a&#x3D;Math.random();</p>
<p>​	2.向下取整</p>
<p>​			Math.floor(a) ；</p>
<p>​	3.生成某范围内的随机数</p>
<p>​			Math.floor(Math.random() * (myMax - myMin + 1) + myMin)；</p>
<h4 id="2-递归"><a href="#2-递归" class="headerlink" title="2.递归"></a>2.递归</h4><p>​	1.</p>
<p>​	2.</p>
<p>​	3.</p>
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS学习笔记-4.6标准库（base阮一峰/gpt ）</title>
    <url>/2023/04/12/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JS/Q4-JS-6%E6%A0%87%E5%87%86%E5%BA%93/</url>
    <content><![CDATA[<h1 id="4-6标准库"><a href="#4-6标准库" class="headerlink" title="4.6标准库"></a>4.6标准库</h1><h2 id="4-6-0基础知识"><a href="#4-6-0基础知识" class="headerlink" title="4.6.0基础知识"></a>4.6.0基础知识</h2><h3 id="1-C-和-JS-中的构造函数和析构函数的异同"><a href="#1-C-和-JS-中的构造函数和析构函数的异同" class="headerlink" title="1.C++ 和 JS 中的构造函数和析构函数的异同"></a>1.C++ 和 JS 中的构造函数和析构函数的异同</h3><p>C++ 和 JS 中的构造函数和析构函数有以下的异同:异同点一:初始化资源申请以及释放。它们都是用来初始化申请资源以及释放资源的。异同点二:以类名一样的方法命名。构造函数都是以类名命名的,析构函数都是以类名加上 ~ 符号命名的。</p>
<p>不同点一:调用时机不同。</p>
<p>C++: 构造函数在对象定义时或通过 new 关键字动态分配内存时调用;析构函数在对象释放时或 delete 关键字释放内存时调用。<br>JS:构造函数在通过 new 关键字调用时执行;没有析构函数的概念,JS 中由垃圾回收机制实现内存释放。</p>
<p>不同点二:继承的调用关系不同。</p>
<p>C++:在继承关系中,如果子类没有定义构造函数,会自动调用父类的构造函数;如果子类定义了构造函数,需要在子类构造函数中显式调用父类的构造函数;析构函数与构造函数相反,会先调用子类的析构函数,然后调用父类的析构函数。<br>JS:在继承关系中,如果子类没有定义构造函数,不会自动调用父类的构造函数;子类需要显示调用父类的构造函数;没有析构函数的概念。不同点三:重载与重写不同。</p>
<p>C++: 构造函数和析构函数都可以重载;子类可以重写父类的构造函数和析构函数。<br>JS:构造函数不能重载,但可以在子类中重写父类的构造函数;没有重写析构函数的概念。</p>
<p>总体来说,C++ 中的这两个概念更加丰富,而 JS 中针对对象初始化和释放的处理较为简单。</p>
<h3 id="2-什么是浅拷贝"><a href="#2-什么是浅拷贝" class="headerlink" title="2.什么是浅拷贝"></a>2.什么是浅拷贝</h3><p>就是愚蠢的拷贝，如果对象里嵌套了对象，那么就会把内部对象的引用给拷贝下来（引用类型的拷贝不会改变引用地址，也就是说拷贝下来的新引用还是旧的那个引用）。由于只是拷贝引用,所以如果引用所指向的对象发生变化,浅拷贝得到的对象也会发生变化。</p>
<h4 id="最直观的例子："><a href="#最直观的例子：" class="headerlink" title="最直观的例子："></a>最直观的例子：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let obj = &#123; a: 1, b: &#123; c: 2 &#125; &#125;;</span><br><span class="line">let copy = Object.assign(&#123;&#125;, obj);  // 浅拷贝</span><br><span class="line">obj.b.c = 3;</span><br><span class="line">obj.a = 4;</span><br><span class="line">console.log(copy.b.c);  // 3  发生变化</span><br><span class="line">console.log(copy.a);    //1   无变化</span><br></pre></td></tr></table></figure>

<h4 id="具体解释："><a href="#具体解释：" class="headerlink" title="具体解释："></a>具体解释：</h4><p>对上面这个例子,我们来分析浅拷贝后 copy 对象的结构:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">js</span><br><span class="line">obj = &#123;</span><br><span class="line">  a: 1,     // 基本类型,值 </span><br><span class="line">  b: &#123;      // 引用类型,地址1</span><br><span class="line">    c: 2 </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">copy = &#123;</span><br><span class="line">  a: 1,     // 基本类型,值 </span><br><span class="line">  b: &#123;      // 引用类型,地址1</span><br><span class="line">    c: 2 </span><br><span class="line">  &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>然后当我们修改 obj 时:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">js</span><br><span class="line">obj.b.c = 3;  // 修改的是地址1指向的对象</span><br><span class="line">obj.a = 4;     // 修改的是值</span><br></pre></td></tr></table></figure>

<p>此时,obj 和 copy 的结构变为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">js</span><br><span class="line">obj = &#123;</span><br><span class="line">  a: 4,      // 新的基本类型值 </span><br><span class="line">  b: &#123;       // 地址1</span><br><span class="line">    c: 3    </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">copy = &#123;</span><br><span class="line">  a: 1,       // 原基本类型值</span><br><span class="line">  b: &#123;        // 地址1</span><br><span class="line">    c: 3     </span><br><span class="line">  &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>可以看到:- 当我们修改 obj 的引用类型成员 b 时,由于 copy 中的 b 也指向地址 1,所以 copy 的 b 也发生了变化。- 但是,当我们修改 obj 的基本类型成员 a 时,copy 中的 a 不发生变化,因为它有自己的独立值。所以结果是:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">js</span><br><span class="line">console.log(copy.b.c);  // 3  发生变化</span><br><span class="line">console.log(copy.a);    //1   无变化  </span><br></pre></td></tr></table></figure>

<p>这个过程很好地证明了浅拷贝的特征:- 对引用类型的成员,拷贝的是地址,变化会相互影响<br>- 对基本类型的成员,拷贝的是值,变化互不影响</p>
<h4 id="浅拷贝常见的实现方式有"><a href="#浅拷贝常见的实现方式有" class="headerlink" title="浅拷贝常见的实现方式有:"></a>浅拷贝常见的实现方式有:</h4><ol>
<li><h5 id="Object-assign-obj1-obj2-对象的浅拷贝"><a href="#Object-assign-obj1-obj2-对象的浅拷贝" class="headerlink" title="Object.assign(obj1, obj2)对象的浅拷贝:"></a>Object.assign(obj1, obj2)对象的浅拷贝:</h5></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let obj = &#123; a: 1, b: &#123; c: 2 &#125; &#125;;</span><br><span class="line">let copy = Object.assign(&#123;&#125;, obj);  // 浅拷贝</span><br><span class="line">obj.b.c = 3;</span><br><span class="line">console.log(copy.b.c);  // 3  发生变化</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><h5 id="arr-slice-数组的浅拷贝"><a href="#arr-slice-数组的浅拷贝" class="headerlink" title="arr.slice()数组的浅拷贝:"></a>arr.slice()数组的浅拷贝:</h5></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr = [1, &#123; a: 2 &#125;]; </span><br><span class="line">let copy = arr.slice();   // 浅拷贝</span><br><span class="line">arr[1].a = 3;</span><br><span class="line">console.log(copy[1].a);   // 3  发生变化</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><h5 id="…obj-…arr-展开语法进行浅拷贝"><a href="#…obj-…arr-展开语法进行浅拷贝" class="headerlink" title="{ …obj }  […arr]展开语法进行浅拷贝:"></a>{ …obj }  […arr]展开语法进行浅拷贝:</h5></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let obj = &#123; a: 1, b: &#123; c: 2 &#125; &#125;;</span><br><span class="line">let copy = &#123; ...obj &#125;;   // 浅拷贝</span><br><span class="line">obj.b.c = 3;</span><br><span class="line">console.log(copy.b.c);   // 3  发生变化</span><br></pre></td></tr></table></figure>

<p>所以,浅拷贝的主要用途是快速复制对象,但是由于它只复制引用,对于引用类型的成员来说,如果原对象发生变化,拷贝对象也会变化。如果要避免这种情况,可以使用深拷贝,深拷贝会完整复制一个新对象,两者之间不再有任何引用关系,变化互不影响。</p>
<h4 id="常见的深拷贝实现方式有"><a href="#常见的深拷贝实现方式有" class="headerlink" title="常见的深拷贝实现方式有:"></a>常见的深拷贝实现方式有:</h4><p>JSON.parse(JSON.stringify(obj))<br>lodash工具库的 _.cloneDeep() 方法<br>手动实现深度遍历对象并复制（及其简单的递归，就是一层层拨开嵌套对象，直到到达内部找到对象内的键值对，浅拷贝它）</p>
<p>所以,总结来说,浅拷贝和深拷贝的主要区别在于对引用类型的成员的处理方式,理解两者的区别可以更好地选择适合的拷贝方式。</p>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>在工作中,如果要考虑兼容性,或需要灵活指定下标获取部分数组,arr.slice() 会更常用。</p>
<p>如果项目环境支持 ES6,并且需要获取数组的完整拷贝,展开语法 …arr 会更简洁,也是较常见的用法。</p>
<p>两者的底层实现原理都是浅拷贝,对于一维数组来说,效果是相同的。</p>
<p>但也要注意,如果数组包含复杂类型,那么对原数组的修改会影响拷贝得到的数组。</p>
<p>除此之外,也可以选择 lodash 等工具库提供的深拷贝方法,如 _.cloneDeep(),来完全避免两个数组之间的影响,这在某些场景下也比较常用。</p>
<h2 id="4-6-1Object"><a href="#4-6-1Object" class="headerlink" title="4.6.1Object"></a>4.6.1Object</h2><h3 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1.常用方法"></a>1.常用方法</h3><p>在工作中,Object 对象属性和方法中常用的主要有:</p>
<ol>
<li><strong>Object.defineProperty() 和 Object.defineProperties()</strong>:用于在对象上定义属性或修改属性,常用于<em><strong>数据响应式</strong></em>。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let obj = &#123;&#125;;</span><br><span class="line">Object.defineProperty(obj, &quot;prop&quot;, &#123;</span><br><span class="line">  value: true,</span><br><span class="line">  writable: false,</span><br><span class="line">  enumerable: true </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Object.keys() 和 Object.values():用于获得对象的键名数组和键值数组。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let obj = &#123; a: 1, b: 2 &#125;;</span><br><span class="line">Object.keys(obj); // [&#x27;a&#x27;, &#x27;b&#x27;]</span><br><span class="line">Object.values(obj); // [1, 2]</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Object.assign():用于对象合并，B合并到A里（是浅拷贝）。&#x2F;&#x2F;assign：分配、指派（任务）<br>                            不会去重，但是如果键值对的key是一样的，新的会把旧的覆盖，即旧的value消失</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let target = &#123; a: 1 &#125;;</span><br><span class="line">let source = &#123; b: 2 &#125;;</span><br><span class="line">Object.assign(target, source);</span><br><span class="line">// target is now &#123;a: 1, b: 2&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Object.freeze():用于冻结对象,使其不能被修改。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let obj = &#123; a: 1 &#125;;</span><br><span class="line">Object.freeze(obj);</span><br><span class="line">obj.a = 2; // 无效</span><br></pre></td></tr></table></figure>

<p>除此之外,对象的元属性(writable、enumerable 等)和存取器(getter、setter)也会使用,但是相对来说较少。控制对象状态的方法(Object.preventExtensions、Object.seal 等)用得比较少,一般只会在需要严格控制对象状态的场景下使用。所以,总的来说,在日常工作中 Object 对象的常用方面主要是属性的操作与管理,包括定义、获取和控制属性。</p>
<blockquote>
<p>注：数据响应式是一种设计模式,其核心思想是:当数据变化时,自动更新视图。在 JavaScript 中,定义响应式数据常用的手段就是 Object.defineProperty()。我们可以在定义对象属性时,指定 getter 和 setter 方法。当属性值发生变化时,getter 和 setter 就会自动调用,这样我们可以在 setter 中更新视图,达到数据响应式的效果。例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let data = &#123;</span><br><span class="line">    name: &quot;John&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Object.defineProperty(data, &quot;name&quot;, &#123;</span><br><span class="line">    get() &#123;</span><br><span class="line">        return this._name;</span><br><span class="line">    &#125;,</span><br><span class="line">    set(newValue) &#123;</span><br><span class="line">        this._name = newValue;</span><br><span class="line">        document.querySelector(&quot;#name&quot;).textContent = newValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">data.name = &quot;Jack&quot;; </span><br><span class="line">// 视图自动更新,页面上#name元素的文本变为&quot;Jack&quot;</span><br></pre></td></tr></table></figure>

<p>这里我们定义了 name 属性的 getter 和 setter。当对 name 进行重新赋值时,setter 会自动调用,更新视图中的文本内容。Vue.js 中的响应式就是建立在 Object.defineProperty() 之上的。它通过递归定义对象属性的 getter 和 setter,实现视图的响应更新。所以,我们说 Object.defineProperty() 常用于数据响应式,就是因为它提供了定义属性访问器(getter 和 setter)的能力,可以结合 getter 和 setter 达到响应式更新视图的目的。</p>
</blockquote>
<h3 id="2-Object-prototype（后几个不会用）"><a href="#2-Object-prototype（后几个不会用）" class="headerlink" title="2.Object.prototype（后几个不会用）"></a>2.Object.prototype（后几个不会用）</h3><p>在工作中,Object.prototype 最常用于:</p>
<ol>
<li>扩展内置对象。我们会在 Object.prototype 上添加方法,扩展 String、Array、Date 等内置对象的功能。例如:</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String.prototype.reverse = function() &#123;</span><br><span class="line">  return this.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x27;hello&#x27;.reverse() // olleh</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>实现继承和共享方法。我们会在 Object.prototype 上定义方法,让多个对象类型共享这些方法,实现继承。例如:</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Object.prototype.sayHi = function() &#123;</span><br><span class="line">  console.log(&#x27;Hi!&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let str = &#x27;Hello&#x27; </span><br><span class="line">let obj = &#123;name: &#x27;Jack&#x27;&#125;</span><br><span class="line"></span><br><span class="line">str.sayHi() // Hi!</span><br><span class="line">obj.sayHi() // Hi!</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>模拟类。在 JS 中我们会使用构造函数和原型来模拟类,Object.prototype 就是在这里发挥作用。例如:</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Person(name) &#123;</span><br><span class="line">  this.name = name </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = function() &#123;</span><br><span class="line">  console.log(this.name); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let jack = new Person(&#x27;Jack&#x27;);</span><br><span class="line">jack.sayName(); // Jack</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>实现 utility 方法。我们会在 Object.prototype 上实现一些通用的工具方法,供所有对象使用。例如:</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Object.prototype.isArray = function() &#123;</span><br><span class="line">  return Object.prototype.toString.call(this) === &#x27;[object Array]&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[].isArray() // true </span><br><span class="line">&#123;&#125;.isArray() // false</span><br></pre></td></tr></table></figure>

<p>所以,总的来说,在工作中 Object.prototype 最常用于扩展内置对象、实现继承和共享方法、模拟类、以及实现通用工具方法。它让 JS 的框架和库设计变得简单高效,也使我们的代码更加优雅。</p>
<h2 id="4-6-1小结"><a href="#4-6-1小结" class="headerlink" title="4.6.1小结"></a>4.6.1小结</h2><p>Object有的函数能继承，有的不能。但不知道怎么主动让它继承，也不知道都哪些能继承。</p>
<h2 id="4-6-2原始类型的对象化"><a href="#4-6-2原始类型的对象化" class="headerlink" title="4.6.2原始类型的对象化"></a>4.6.2原始类型的对象化</h2><h3 id="1-三种包装对象"><a href="#1-三种包装对象" class="headerlink" title="1.三种包装对象"></a>1.三种包装对象</h3><p>Number、String、Boolean</p>
<h3 id="2-包装成对象的原因"><a href="#2-包装成对象的原因" class="headerlink" title="2.包装成对象的原因"></a>2.包装成对象的原因</h3><p>用于继承并使用Object类型中的函数。其中三者公用的是valueOf()<code>和</code>toString()。</p>
<h4 id="2-1valueOf"><a href="#2-1valueOf" class="headerlink" title="2.1valueOf()"></a>2.1valueOf()</h4><p>返回包装对象实例对应的原始类型的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Number(123).valueOf()  // 123</span><br><span class="line">new String(&#x27;abc&#x27;).valueOf() // &quot;abc&quot;</span><br><span class="line">new Boolean(true).valueOf() // true</span><br></pre></td></tr></table></figure>

<h4 id="2-2toString"><a href="#2-2toString" class="headerlink" title="2.2toString()"></a>2.2toString()</h4><p>返回对应的字符串形式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Number(123).toString() // &quot;123&quot;</span><br><span class="line">new String(&#x27;abc&#x27;).toString() // &quot;abc&quot;</span><br><span class="line">new Boolean(true).toString() // &quot;true&quot;</span><br></pre></td></tr></table></figure>

<h2 id="4-6-2小结"><a href="#4-6-2小结" class="headerlink" title="4.6.2小结"></a>4.6.2小结</h2><p>有些类型直接使用太麻烦，包装成对象可以调用更多的库函数。</p>
<h2 id="4-6-3Boolean"><a href="#4-6-3Boolean" class="headerlink" title="4.6.3Boolean"></a>4.6.3Boolean</h2><h4 id="0-使用与易错点"><a href="#0-使用与易错点" class="headerlink" title="0.使用与易错点"></a>0.使用与易错点</h4><p>0.1使用：直接 let a&#x3D;true；就行。</p>
<p>0.2易错点：小心使用，并不是只有0和false是false，空字符串等也是。</p>
<h4 id="1-Boolean中得到true的例子（都要记住）"><a href="#1-Boolean中得到true的例子（都要记住）" class="headerlink" title="1.Boolean中得到true的例子（都要记住）"></a>1.Boolean中得到true的例子（都要记住）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Boolean(1) // true				数字</span><br><span class="line">Boolean(&#x27;false&#x27;) // true		字符串</span><br><span class="line">Boolean([]) // true				空数组</span><br><span class="line">Boolean(&#123;&#125;) // true				空对象</span><br><span class="line">Boolean(function () &#123;&#125;) // true	空函数</span><br><span class="line">Boolean(/foo/) // true			正则</span><br></pre></td></tr></table></figure>

<h3 id="2-JS和C中的bool类型的异同"><a href="#2-JS和C中的bool类型的异同" class="headerlink" title="2.JS和C中的bool类型的异同"></a>2.JS和C中的bool类型的异同</h3><p>异同点:</p>
<p>都只有两个值:true 和 false。</p>
<p>都用于表示逻辑上的真假。</p>
<h4 id="2-1不同点一-存储方式不同。"><a href="#2-1不同点一-存储方式不同。" class="headerlink" title="2.1不同点一:存储方式不同。"></a>2.1不同点一:存储方式不同。</h4><p>JS:Boolean 是基本数据类型,占据1个字节。<br>C:没有标准的 bool 类型,一般使用整型来存储,占据1个字节(char)或4个字节(int)。</p>
<h4 id="2-2不同点二-转换规则不同。"><a href="#2-2不同点二-转换规则不同。" class="headerlink" title="2.2不同点二:转换规则不同。"></a>2.2不同点二:转换规则不同。</h4><p>JS:在 Boolean 上下文中,以下值会转换为 false:<br> - false<br> - 0<br> - “”(空字符串)<br> - null<br> - undefined<br> - NaN<br>C:所有非零的值都会转换为 true,0 转换为 false。</p>
<h4 id="2-3不同点三-操作方式不同。"><a href="#2-3不同点三-操作方式不同。" class="headerlink" title="2.3不同点三:操作方式不同。"></a>2.3不同点三:操作方式不同。</h4><p>JS:可以直接对 Boolean 类型的值进行逻辑运算(&amp;&amp;、||、!)<br>C:需要先将值转换为整型,再进行逻辑运算。</p>
<p>例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">js</span><br><span class="line">let t = true;</span><br><span class="line">let f = false;</span><br><span class="line"></span><br><span class="line">t &amp;&amp; f;     // false</span><br><span class="line">t || f;     // true </span><br><span class="line">!t;         // false</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c</span><br><span class="line">int t = 1;  // true</span><br><span class="line">int f = 0;  // false</span><br><span class="line"></span><br><span class="line">t &amp;&amp; f;     // 0 </span><br><span class="line">t || f;     // 1</span><br><span class="line">!t;         // 0</span><br></pre></td></tr></table></figure>

<p>所以,Boolean 作为两种语言的基本数据类型,在概念上是相通的,但是具体的实现与使用上存在一定的差异。总体来说,JS 对 Boolean 的支持更加丰富,使用也更加方便,而 C 由于缺乏标准的 bool 类型, Boolean 的表达相对局限。这也是两种语言的特点的体现:JS 侧重表达,C 侧重底层实现。理解两者在这一点上的差异,有助于更好的使用两种语言。</p>
<h3 id="3-boolean类型与Boolean对象"><a href="#3-boolean类型与Boolean对象" class="headerlink" title="3.boolean类型与Boolean对象"></a>3.boolean类型与Boolean对象</h3><p>在 JS 中,boolean 类型和 Boolean 对象是不同的:</p>
<h4 id="3-1boolean-类型"><a href="#3-1boolean-类型" class="headerlink" title="3.1boolean 类型:"></a>3.1boolean 类型:</h4><p>是 JS 的基本数据类型之一,只有 true 和 false 两个值。<br>- 表示逻辑上的真或假。<br>- 大小写敏感,true 和 True 是不同的。<br>- 可以直接在条件语句中使用,如 if 和 while。例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">js</span><br><span class="line">let bool = true;     // boolean 类型</span><br><span class="line"></span><br><span class="line">if (bool) &#123; ... &#125;    // 可以直接用于条件判断</span><br></pre></td></tr></table></figure>

<h4 id="3-2Boolean-对象"><a href="#3-2Boolean-对象" class="headerlink" title="3.2Boolean 对象:"></a>3.2Boolean 对象:</h4><p>是 JS 的内置对象,继承自 Object。<br>- 包装了 boolean 基本类型,有 true 和 false 两个值。<br>- 大小写不敏感,TRUE 和 true 是同一个值。<br>- 不能直接在条件语句中使用,需要调用 valueOf() 方法。<br>- 除了 true 和 false,可以有其他的属性和方法。例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">js</span><br><span class="line">let bool = new Boolean(true);   // Boolean 对象</span><br><span class="line"></span><br><span class="line">if (bool.valueOf()) &#123; ... &#125;    // 需要调用 valueOf() 方法</span><br><span class="line"></span><br><span class="line">bool.constructor = 123;        // 可以添加属性</span><br></pre></td></tr></table></figure>

<p>所以,boolean 类型和 Boolean 对象的主要区别在于:- boolean 是基本数据类型,Boolean 是对象。<br>- boolean 只有 true 和 false 两个字面量,Boolean 除了 true 和 false 值外,还可以有其他属性和方法。<br>- boolean 可以直接用于条件判断,Boolean 需要调用 valueOf() 方法。但是,在大多数情况下,我们可以把 Boolean 对象当作 boolean 类型来使用,因为:- Boolean 对象在布尔表达式中会自动调用 valueOf() 方法,返回基本类型值。</p>
<h2 id="4-6-3小结"><a href="#4-6-3小结" class="headerlink" title="4.6.3小结"></a>4.6.3小结</h2><p><strong>基于性能考虑,大多数情况下我们会使用基本类型boolean而不是Boolean对象。</strong>所以,boolean 和 Boolean的关系可以看作,boolean 是基本数据类型,Boolean 是它的对象包装形式。</p>
<h2 id="4-6-4Number"><a href="#4-6-4Number" class="headerlink" title="4.6.4Number"></a>4.6.4Number</h2><p>只有可继承的原型函数prototype.toString（）值得一看</p>
<h2 id="4-6-5-String"><a href="#4-6-5-String" class="headerlink" title="4.6.5.String"></a>4.6.5.String</h2><h4 id="5-1原型属性"><a href="#5-1原型属性" class="headerlink" title="5.1原型属性"></a>5.1原型属性</h4><ol>
<li>字符串实例的length属性返回字符串的长度。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;abc&#x27;.length // 3</span><br></pre></td></tr></table></figure>

<h4 id="5-2原型函数"><a href="#5-2原型函数" class="headerlink" title="5.2原型函数"></a>5.2原型函数</h4><ol>
<li>charAt():返回指定索引处的字符,索引从 0 开始。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;hello&#x27;.charAt(0);  // &#x27;h&#x27;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>concat():连接两个或多个字符串,返回连接后的字符串。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;hello&#x27;.concat(&#x27; &#x27;, &#x27;world&#x27;);  // &#x27;hello world&#x27;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>startsWith():检查字符串是否以指定的子字符串开头,返回 true 或 false。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;hello&#x27;.startsWith(&#x27;he&#x27;);   // true</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>endsWith():检查字符串是否以指定的子字符串结尾,返回 true 或 false。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;hello&#x27;.endsWith(&#x27;lo&#x27;);   // true</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>indexOf():返回指定子字符串首次出现的索引,如果不存在则返回 -1。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;hello&#x27;.indexOf(&#x27;l&#x27;);   // 2</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>lastIndexOf():返回指定子字符串最后一次出现的索引,如果不存在则返回 -1。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;hello&#x27;.lastIndexOf(&#x27;l&#x27;);   // 3</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>slice():提取字符串的一部分,返回提取后的字符串。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;hello&#x27;.slice(1, 3);   // &#x27;el&#x27;</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>substring():提取字符串的一部分,返回提取后的字符串。与 slice() 类似。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;hello&#x27;.substring(1, 3);   // &#x27;el&#x27;</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>split():将字符串按指定分隔符拆分成数组,返回数组。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">js</span><br><span class="line">&#x27;a-b-c&#x27;.split(&#x27;-&#x27;);   // [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>replace():替换字符串中的指定子字符串,返回替换后的字符串。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;hello&#x27;.replace(&#x27;l&#x27;, &#x27;x&#x27;);   // &#x27;hexxo&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="4-6-6Math"><a href="#4-6-6Math" class="headerlink" title="4.6.6Math"></a>4.6.6Math</h3><h4 id="6-1（只有）静态函数"><a href="#6-1（只有）静态函数" class="headerlink" title="6.1（只有）静态函数"></a>6.1（只有）静态函数</h4><ul>
<li><p><code>Math.abs()</code>：绝对值（负数也适用，求ab差的绝对值：Math.abs(2 - 3)）</p>
<p>两下标之间的距离不能用a+b，要用abs（a-b），防止有负数下标</p>
</li>
<li><p><code>Math.ceil()</code>：向上取整</p>
</li>
<li><p><code>Math.floor()</code>：向下取整</p>
</li>
<li><p><code>Math.max()</code>：最大值</p>
</li>
<li><p><code>Math.min()</code>：最小值</p>
</li>
<li><p><code>Math.pow()</code>：幂运算</p>
<p>Math.pow方法返回以第一个参数为底数、第二个参数为指数的幂运算值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 等同于 2 ** 2</span><br><span class="line">Math.pow(2, 2) // 4</span><br><span class="line">// 等同于 2 ** 3</span><br><span class="line">Math.pow(2, 3) // 8</span><br></pre></td></tr></table></figure>

<p>下面是计算圆面积的方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var radius = 20;</span><br><span class="line">var area = Math.PI * Math.pow(radius, 2);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Math.sqrt()</code>：平方根</p>
<p>Math.sqrt方法返回参数值的平方根。如果参数是一个负值，则返回<code>NaN</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Math.sqrt(4) // 2</span><br><span class="line">Math.sqrt(-4) // NaN</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Math.log()</code>：自然对数</p>
</li>
<li><p><code>Math.exp()</code>：<code>e</code>的指数</p>
</li>
<li><p><code>Math.round()</code>：四舍五入</p>
</li>
<li><p><code>Math.random()</code>：随机数</p>
<p><code>Math.random()</code>返回0到1之间的一个伪随机数，可能等于0，但是一定小于1。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Math.random() // 0.7151307314634323</span><br></pre></td></tr></table></figure>

<p>任意范围的随机数生成函数如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getRandomArbitrary(min, max) &#123;</span><br><span class="line">  return Math.random() * (max - min) + min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getRandomArbitrary(1.5, 6.5)</span><br><span class="line">// 2.4942810038223864</span><br></pre></td></tr></table></figure>

<p>任意范围的随机整数生成函数如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getRandomInt(min, max) &#123;</span><br><span class="line">  return Math.floor(Math.random() * (max - min + 1)) + min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getRandomInt(1, 6) // 5</span><br></pre></td></tr></table></figure>

<p>返回随机字符的例子如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function random_str(length) &#123;</span><br><span class="line">  var ALPHABET = &#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;;</span><br><span class="line">  ALPHABET += &#x27;abcdefghijklmnopqrstuvwxyz&#x27;;</span><br><span class="line">  ALPHABET += &#x27;0123456789-_&#x27;;</span><br><span class="line">  var str = &#x27;&#x27;;</span><br><span class="line">  for (var i = 0; i &lt; length; ++i) &#123;</span><br><span class="line">    var rand = Math.floor(Math.random() * ALPHABET.length);</span><br><span class="line">    str += ALPHABET.substring(rand, rand + 1);</span><br><span class="line">  &#125;</span><br><span class="line">  return str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">random_str(6) // &quot;NdQKOr&quot;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>random_str</code>函数接受一个整数作为参数，返回变量<code>ALPHABET</code>内的随机字符所组成的指定长度的字符串。</p>
</li>
</ul>
<h3 id="4-6-7Date-x2F-x2F-主要了解如何创建日期-new-Date，get方法"><a href="#4-6-7Date-x2F-x2F-主要了解如何创建日期-new-Date，get方法" class="headerlink" title="4.6.7Date&#x2F;&#x2F;主要了解如何创建日期 new Date，get方法"></a>4.6.7Date&#x2F;&#x2F;主要了解如何创建日期 new Date，get方法</h3><h4 id="7-1作为普通函数"><a href="#7-1作为普通函数" class="headerlink" title="7.1作为普通函数"></a>7.1作为普通函数</h4><p>无论有没有参数，直接调用<code>Date</code>总是返回当前时间。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Date()</span><br><span class="line">// &quot;Tue Dec 01 2015 09:34:43 GMT+0800 (CST)&quot;</span><br></pre></td></tr></table></figure>

<h4 id="7-2作为构造函数"><a href="#7-2作为构造函数" class="headerlink" title="7.2作为构造函数"></a>7.2作为构造函数</h4><p>作为构造函数时，<code>Date</code>对象可以接受多种格式的参数，返回一个该参数对应的时间实例。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 参数为日期字符串</span><br><span class="line">new Date(&#x27;January 6, 2013&#x27;);</span><br><span class="line">// Sun Jan 06 2013 00:00:00 GMT+0800 (CST)</span><br><span class="line"></span><br><span class="line">// 参数为多个整数，</span><br><span class="line">// 代表年、月、日、小时、分钟、秒、毫秒</span><br><span class="line">new Date(2013, 0, 1, 0, 0, 0, 0)</span><br><span class="line">// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)</span><br></pre></td></tr></table></figure>

<h4 id="7-3包含的静态函数"><a href="#7-3包含的静态函数" class="headerlink" title="7.3包含的静态函数"></a>7.3包含的静态函数</h4><p>没啥用</p>
<h4 id="7-4实例方法"><a href="#7-4实例方法" class="headerlink" title="7.4实例方法"></a>7.4实例方法</h4><p><strong>（1）只有get函数有用</strong>（暂时记住年月日星期就行）</p>
<ul>
<li><code>getTime()</code>：返回实例距离1970年1月1日00:00:00的毫秒数，等同于<code>valueOf</code>方法。</li>
<li><code>getDate()</code>：返回实例对象对应每个月的几号（从1开始）。</li>
<li><code>getDay()</code>：返回星期几，星期日为0，星期一为1，以此类推。</li>
<li><code>getFullYear()</code>：返回四位的年份。</li>
<li><code>getMonth()</code>：返回月份（0表示1月，11表示12月）。</li>
<li><code>getHours()</code>：返回小时（0-23）。</li>
<li><code>getMilliseconds()</code>：返回毫秒（0-999）。</li>
<li><code>getMinutes()</code>：返回分钟（0-59）。</li>
<li><code>getSeconds()</code>：返回秒（0-59）。</li>
<li><code>getTimezoneOffset()</code>：返回当前时间与 UTC 的时区差异，以分钟表示，返回结果考虑到了夏令时因素。</li>
</ul>
<p><strong>（2）本地时间</strong></p>
<p>以下三种方法，可以将 Date 实例转为表示本地时间的字符串。</p>
<ul>
<li>Date.prototype.toLocaleString()：完整的本地时间。</li>
<li>Date.prototype.toLocaleDateString()：本地日期（不含小时、分和秒）。</li>
<li>Date.prototype.toLocaleTimeString()：本地时间（不含年月日）。</li>
</ul>
<p>下面是用法实例。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var d = new Date(2013, 0, 1);</span><br><span class="line"></span><br><span class="line">d.toLocaleString()</span><br><span class="line">// 中文版浏览器为&quot;2013年1月1日 上午12:00:00&quot;</span><br><span class="line">// 英文版浏览器为&quot;1/1/2013 12:00:00 AM&quot;</span><br><span class="line"></span><br><span class="line">d.toLocaleDateString()</span><br><span class="line">// 中文版浏览器为&quot;2013年1月1日&quot;</span><br><span class="line">// 英文版浏览器为&quot;1/1/2013&quot;</span><br><span class="line"></span><br><span class="line">d.toLocaleTimeString()</span><br><span class="line">// 中文版浏览器为&quot;上午12:00:00&quot;</span><br><span class="line">// 英文版浏览器为&quot;12:00:00 AM&quot;</span><br></pre></td></tr></table></figure>

<p>这三个方法都有两个可选的参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dateObj.toLocaleString([locales[, options]])</span><br><span class="line">dateObj.toLocaleDateString([locales[, options]])</span><br><span class="line">dateObj.toLocaleTimeString([locales[, options]])</span><br></pre></td></tr></table></figure>

<p>这两个参数中，<code>locales</code>是一个指定所用语言的字符串，<code>options</code>是一个配置对象。下面是<code>locales</code>的例子，分别采用<code>en-US</code>和<code>zh-CN</code>语言设定。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var d = new Date(2013, 0, 1);</span><br><span class="line"></span><br><span class="line">d.toLocaleString(&#x27;en-US&#x27;) // &quot;1/1/2013, 12:00:00 AM&quot;</span><br><span class="line">d.toLocaleString(&#x27;zh-CN&#x27;) // &quot;2013/1/1 上午12:00:00&quot;</span><br><span class="line"></span><br><span class="line">d.toLocaleDateString(&#x27;en-US&#x27;) // &quot;1/1/2013&quot;</span><br><span class="line">d.toLocaleDateString(&#x27;zh-CN&#x27;) // &quot;2013/1/1&quot;</span><br><span class="line"></span><br><span class="line">d.toLocaleTimeString(&#x27;en-US&#x27;) // &quot;12:00:00 AM&quot;</span><br><span class="line">d.toLocaleTimeString(&#x27;zh-CN&#x27;) // &quot;上午12:00:00&quot;</span><br></pre></td></tr></table></figure>

<h3 id="4-6-8RegExp正则-x2F-x2F-找旧笔记对比着看"><a href="#4-6-8RegExp正则-x2F-x2F-找旧笔记对比着看" class="headerlink" title="4.6.8RegExp正则&#x2F;&#x2F;找旧笔记对比着看"></a>4.6.8RegExp正则&#x2F;&#x2F;找旧笔记对比着看</h3><h3 id="4-6-9JOSN"><a href="#4-6-9JOSN" class="headerlink" title="4.6.9JOSN"></a>4.6.9JOSN</h3><h4 id="5-1格式"><a href="#5-1格式" class="headerlink" title="5.1格式"></a>5.1格式</h4><ol>
<li><p>[]  {}</p>
<p>复合类型的值只能是数组或对象，不能是函数、正则表达式对象、日期对象。</p>
</li>
<li><p>String，Number，Boolean，NULL</p>
<p>原始类型的值只有四种：字符串、数值（必须以十进制表示，二进制十六进制都不行）、布尔值和null（不能使用NaN<code>, </code>Infinity, -Infinity和undefined）。</p>
</li>
<li><p>“asdf”</p>
<p>字符串必须使用双引号表示，不能使用单引号。</p>
</li>
<li><p>“key”：value</p>
<p>对象的键名必须放在双引号里面。</p>
</li>
<li><p>数组或对象最后一个成员的后面，不能加逗号。</p>
</li>
</ol>
<h4 id="5-2静态方法"><a href="#5-2静态方法" class="headerlink" title="5.2静态方法"></a>5.2静态方法</h4><ol>
<li><p>JSON.stringify	&#x2F;&#x2F;Json字符串化</p>
<ol>
<li><p>JSON.stringify(obj，[‘key1’,’key2’])	</p>
</li>
<li><p>JSON.stringify(value)</p>
<p>value可以是任何JSON格式支持的值，包括空对象、null、空数组</p>
</li>
<li><p>JSON.stringify(value,function)</p>
</li>
</ol>
</li>
<li><p>JSON.parse()              &#x2F;&#x2F;字符串JSON化</p>
</li>
</ol>
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫学习笔记-6.0两种异步观念（base大学数据结构+OS老师）</title>
    <url>/2023/03/16/Python/%E7%88%AC%E8%99%AB/P6-Py-0%E4%B8%A4%E7%A7%8D%E5%BC%82%E6%AD%A5%E8%A7%82%E5%BF%B5/</url>
    <content><![CDATA[<h1 id="有疑问-同步-关注通信机制-跟同步-描述进程中之间的关系-的区别-并发并行与异步的联系"><a href="#有疑问-同步-关注通信机制-跟同步-描述进程中之间的关系-的区别-并发并行与异步的联系" class="headerlink" title="[有疑问]同步(关注通信机制)跟同步(描述进程中之间的关系)的区别  并发并行与异步的联系"></a>[有疑问]同步(关注通信机制)跟同步(描述进程中之间的关系)的区别  并发并行与异步的联系</h1><h2 id="两种关于异步的理解"><a href="#两种关于异步的理解" class="headerlink" title="两种关于异步的理解"></a><strong>两种关于异步的理解</strong></h2><p>1.线程&#x2F;进程&#x2F;作业 不按代码顺序执行(其他)</p>
<p>2.不按发送请求的顺序返回结果(消息通信机制)</p>
<p><strong>消息通信机制中的同步异步(顺带并发并行)</strong></p>
<p>同步和异步关注的是<strong>消息通信机制</strong> (synchronous communication&#x2F; asynchronous communication)。所谓同步，就是在发出一个<em>调用</em>时，在没有得到结果之前，该<em>调用</em>就不返回。但是一旦调用返回，就得到返回值了。换句话说，就是由<em>调用者</em>主动等待这个<em>调用</em>的结果。</p>
<p>而异步则是相反，<em>调用</em>在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在<em>调用</em>发出后，<em>被调用者</em>通过状态、通知来通知调用者，或通过回调函数处理这个调用。</p>
<p>并发和并行其实是异步(线程&#x2F;进程&#x2F;作业 不按代码顺序执行,不按发送请求的顺序返回结果)线程实现的两种形式。(这里的异步指的是什么异步???)</p>
<p>并行其实是真正的异步，多核CUP可以同时开启多条线程供多个任务同时执行，互不干扰。但</p>
<p>是并发就不一样了，是一个伪异步。在单核CUP中只能有一条线程，但是又想执行多个任务。这个时候，只能在一条线程上不停的切换任务，但是当并发是在多个cpu的情况下，那么并行和并发就没多大的区别了。但是在单个cpu的情况下的话，那么就只能并发而不能并行了。</p>
<p><strong>操作系统中的异步机制和进程同步机制</strong></p>
<ul>
<li>1.异步机制:由于操作系统都是并发的(一段时间内cpu到处跳),即拥有了异步性,导致了有些情况</li>
</ul>
<p><strong>(———–<strong>比如AB两进程并发操作数据10,想得到的结果是A进程先执行除法,B再进行加法….,再比如两人同时存钱,<strong>同时访问数据库,导致操作出问题</strong>(好像是有三四种可能,此处关于数据库安全性)</strong>————)</strong></p>
<p>无法按照顺序得到想要的结果,故提出进程同步机制,其中一个即信号量机制,信号量机制又可以实现同步和互斥,其中的同步和同步机制是两个概念.</p>
<ul>
<li>2.同步机制:使进程按某种顺序执行的各种机制(方法).<strong>并不是一定A执行完了B才能执行(同步)这种严格的顺序.还有AB谁先执行都行,但是同一时间只能有一个进程执行.</strong></li>
</ul>
<p><strong>操作系统中的同步机制中的同步和互斥</strong></p>
<p>显然，同步是一种更为复杂的互斥，而互斥是一种特殊的同步。</p>
<p>也就是说互斥是两个线程之间不可以同时运行，他们会相互排斥，必须等待一个线程运行完毕，另一个才能运行，而同步也是不能同时运行，但他是必须要安照某种次序来运行相应的线程（也是一种互斥）！</p>
<p><strong>互斥</strong>：是指某一资源同时只允许一个访问者对其进行访问，具有唯一性和排它性。但互斥无法限制访问者对资源的访问顺序，即访问是无序的。<strong>进程之间的执行没有先后顺序,但资源共享,同一时间只能有一个进程访问这个资源.</strong></p>
<p><strong>同步</strong>：是指在互斥的基础上（大多数情况），通过其它机制实现访问者对资源的有序访问。在大多数情况下，同步已经实现了互斥，特别是所有写入资源的情况必定是互斥的。少数情况是指可以允许多个访问者同时访问资源。<strong>进程之间的执行必须有先后顺序,资源共享,同一时间只能有一个进程访问这个资源.</strong></p>
<h1 id="同步异步并串行并行并发的区别"><a href="#同步异步并串行并行并发的区别" class="headerlink" title="同步异步并串行并行并发的区别"></a><strong>同步异步并串行并行并发的区别</strong></h1><p>   <strong>同步、异步：</strong></p>
<p>指的是能否开启新的线程。同步不能开启新的线程，异步可以。</p>
<p>   <strong>串行、并行：</strong></p>
<p>指的是任务的执行方式。串行是指多个任务时，各个任务按顺序执行，完成一个之后才能进行下一个。并行指的是多个任务可以同时执行。异步是多个任务并行的前提条件。</p>
<p>   <strong>并发和并行其实是异步线程实现的两种形式。并行其实是真正的异步，多核CUP可以同时开启多条线程供多个任务同时执行，互不干扰。但是并发就不一样了，是一个伪异步。在单核CUP中只能有一条线程，但是又想执行多个任务。这个时候，只能在一条线程上不停的切换任务，比如任务A执行了20%，任务A停下里，线程让给任务B，任务执行了30%停下，再让任务A执行。这样我们用的时候，由于CUP处理速度快，你看起来好像是同时执行，其实不是的，同一时间只会执行单个任务。但是当并发是在多个cpu的情况下，那么并行和并发就没多大的区别了。但是在单个cpu的情况下的话，那么就只能并发而不能并行了。</strong></p>
<p><a href="https://www.cnblogs.com/czk666/articles/9353160.html">查看原文</a></p>
<h1 id="同步异步-阻塞非阻塞-和nginx的IO模型"><a href="#同步异步-阻塞非阻塞-和nginx的IO模型" class="headerlink" title="同步异步,阻塞非阻塞 和nginx的IO模型"></a>同步异步,阻塞非阻塞 和nginx的IO模型</h1><p><a href="http://www.cnblogs.com/wxl-dede/p/5134636.html"><strong>同步异步,阻塞非阻塞 和nginx的IO模型</strong></a><strong>（这人的笔记都很有用!!!）</strong></p>
<p><a href="https://www.zhihu.com/question/19732473/answer/20851256">https://www.zhihu.com/question/19732473/answer/20851256</a></p>
<p><a href="https://www.zhihu.com/question/19732473/answer/14413599">https://www.zhihu.com/question/19732473/answer/14413599</a></p>
<p><a href="https://www.zhihu.com/question/19732473/answer/241673170">https://www.zhihu.com/question/19732473/answer/241673170</a></p>
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>Python，Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫学习笔记-6.100Scrapy性能提升（base百度）</title>
    <url>/2023/03/20/Python/%E7%88%AC%E8%99%AB/P6-Py-100Scrapy%E6%80%A7%E8%83%BD%E6%8F%90%E9%AB%98/</url>
    <content><![CDATA[<p>需求：scrapy爬取网页速度十分缓慢，在目标网站良好的情况下三天才跑了80w条数据，参考其他爬虫的速度，一天抓取1000w条数据是没有问题的，scrapy性能需要优化。</p>
<p>思路：经过各种搜索，scrapy提高性能核心逻辑是提高并发数量，最简单的实现方式可以通过调整settings的‘CONCURRENT_REQUESTS’等参数或者使用分布式爬虫来提速。除此之外代码也要尽量少用循环。本人的简单优化主要通过以下方式</p>
<p><strong>settings中设置CONCURRENT_REQUESTS</strong></p>
<p>scrapy默认CONCURRENT_REQUESTS 为16,可以将CONCURRENT_REQUESTS 的数量增加。要注意download_delay会影响到并发的效果，大概是由于每个request的处理要在download_delay时间之后。具体见链接<a href="https://link.jianshu.com/?t=http://blog.csdn.net/s150503/article/details/72571680">scrapy中CONCURRENT_REQUESTS与DOWNLOAD_DELAY的联系</a></p>
<p>DEPTH_PRIORITY &#x3D; 1 SCHEDULER_DISK_QUEUE &#x3D; ‘scrapy.squeues.PickleFifoDiskQueue’ SCHEDULER_MEMORY_QUEUE &#x3D; ‘scrapy.squeues.FifoMemoryQueue’</p>
<p><strong>spider中的循环优化</strong></p>
<p>尽量减少循环的层数，另外参考python优化的原则，在循环中少用”.”的方法。</p>
<p>lowerlist &#x3D; [‘this’, ‘is’, ‘lowercase’] upper &#x3D; str.upper upperlist &#x3D; [] append &#x3D; upperlist.append for word in lowerlist:    append(upper(word))    print(upperlist)</p>
<p><strong>中间价的优化</strong></p>
<p>当时写了一个简单的中间件用来记录请求失败的url，将中间件删掉后速度有所提升。</p>
<p><strong>异步导出数据</strong></p>
<p>具体没尝试过故此只放链接在次</p>
<p>[异步导出数据]<a href="https://link.jianshu.com/?t=http://www.cnblogs.com/ruoniao/p/6906344.html">http://www.cnblogs.com/ruoniao/p/6906344.html</a></p>
<p>参考文章</p>
<p><a href="https://link.jianshu.com/?t=http://python.jobbole.com/81035/">提升 Python 程序性能的 6 个技巧</a></p>
<p><a href="https://www.jianshu.com/p/df9c0d1e9087">Scrapy爬虫入门教程十三 Settings（设置）</a></p>
<p><a href="https://link.jianshu.com/?t=http://blog.csdn.net/zongzhiyuan/article/details/53364749">【Scrapy爬虫系列2】性能调优</a></p>
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>Python，Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫学习笔记-6.1异步相关问答（base大学JS+OS老师）</title>
    <url>/2023/03/17/Python/%E7%88%AC%E8%99%AB/P6-Py-1%E5%BC%82%E6%AD%A5%E9%97%AE%E7%AD%94/</url>
    <content><![CDATA[<h1 id="异步概念，异步执行，异步机制，异步传输数据"><a href="#异步概念，异步执行，异步机制，异步传输数据" class="headerlink" title="异步概念，异步执行，异步机制，异步传输数据"></a>异步概念，异步执行，异步机制，异步传输数据</h1><p>在我印象里异步传输数据就是A发送一字节数据，B不知道啥时候接收到，也不知道B啥时候返回。B返回时会通知A回来处理。</p>
<p>异步机制是通过回调函数。。。。。。</p>
<p>异步概念跟异步传输差不多</p>
<p>异步执行是异步概念基础上加了函数执行，目前只知道js里的函数能异步执行。</p>
<p>然后异步函数为了保证执行顺序 我们可以使用promise或者async&#x2F;await对异步函数进行包装</p>
<h2 id="1-既然是异步，为什么还要保证执行顺序？"><a href="#1-既然是异步，为什么还要保证执行顺序？" class="headerlink" title="1.既然是异步，为什么还要保证执行顺序？"></a>1.既然是异步，为什么还要保证执行顺序？</h2><p><strong>答：</strong>异步有时候需要做执行顺序的调整啊</p>
<p>比如</p>
<p>A:一个异步请求</p>
<p>B:一个输出</p>
<blockquote>
<p>你输出的时候，异步请求的结果还没出来(因为执行顺序不是同步的，异步就变成先执行B再执行A)</p>
</blockquote>
<h3 id="1-1设计操作系统的时候就应该解决这种问题了啊，同步和互斥，加锁。"><a href="#1-1设计操作系统的时候就应该解决这种问题了啊，同步和互斥，加锁。" class="headerlink" title="1.1设计操作系统的时候就应该解决这种问题了啊，同步和互斥，加锁。"></a>1.1设计操作系统的时候就应该解决这种问题了啊，同步和互斥，加锁。</h3><p>想通了：操作系统解决的是最基础的，函数顺序可能有问题关他毛事。函数是自己写的，os又不可能未卜先知。</p>
<img src="./P6-Py-1%E5%BC%82%E6%AD%A5%E9%97%AE%E7%AD%94.assets/image-20230421173728251.png" alt="image-20230421173728251" style="zoom:50%;" />

<h3 id="1-2宏观任务为什么就异步了？宏观任务是什么？"><a href="#1-2宏观任务为什么就异步了？宏观任务是什么？" class="headerlink" title="1.2宏观任务为什么就异步了？宏观任务是什么？"></a>1.2宏观任务为什么就异步了？宏观任务是什么？</h3><p>我的理解:因为宏观任务，微观任务这些都需要时间，比如花时间去请求，或者花时间调用计时器。 js的设计可能是为了避免这些用时的异步函数阻塞了执行。所以才会设计成先执行同步代码，再执行异步的。</p>
<p>宏观任务应该说是事件的来源</p>
<p>js里面的计时器是自带的，所以是宏观任务。 然后promise或者请求一般是宿主发出的，是微观请求。</p>
<h3 id="1-2异步函数是指os控制下使普通函数变得异步是么，还是说函数受程序员控制，你调什么东西让它异步？（应该是后面那个，比如用框架，但是框架是怎么让函数变成异步执行的？）"><a href="#1-2异步函数是指os控制下使普通函数变得异步是么，还是说函数受程序员控制，你调什么东西让它异步？（应该是后面那个，比如用框架，但是框架是怎么让函数变成异步执行的？）" class="headerlink" title="1.2异步函数是指os控制下使普通函数变得异步是么，还是说函数受程序员控制，你调什么东西让它异步？（应该是后面那个，比如用框架，但是框架是怎么让函数变成异步执行的？）"></a>1.2异步函数是指os控制下使普通函数变得异步是么，还是说函数受程序员控制，你调什么东西让它异步？（应该是后面那个，比如用框架，但是框架是怎么让函数变成异步执行的？）</h3><h3 id="1-3异步函数的实际执行顺序受制于避免阻塞还有？？"><a href="#1-3异步函数的实际执行顺序受制于避免阻塞还有？？" class="headerlink" title="1.3异步函数的实际执行顺序受制于避免阻塞还有？？"></a>1.3异步函数的实际执行顺序受制于避免阻塞还有？？</h3><p>想通了：异步函数的实际执行顺序好像跟进程的执行顺序一个道理。（想啥呢进程不就是函数+pcb）</p>
<blockquote>
<p>这块我明天得捋一捋了，我具体也忘了浏览器四个进程现在是怎么划分的，还有进程的一些特点之类</p>
</blockquote>
<blockquote>
<p>异步的问题，你看看掘金上对于event loop的解释，你就会明白js的执行顺序。</p>
<p>同步代码会直接按顺序执行。异步(分成宏任务和微任务，具体的区别你可以查一查。常见的宏任务主要是setTimeout,SetInterval这类计时器，以及I&#x2F;O操作,ui渲染的操作，微任务主要是Promise之类)。</p>
<p>具体的执行顺序看event loop的文章，我解释起来可能有点费劲。我把思路理一理再做解释</p>
</blockquote>
<ol start="4">
<li></li>
</ol>
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>Python，Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫学习笔记-6.3Ajax工作原理及实例（base百度）</title>
    <url>/2023/03/19/Python/%E7%88%AC%E8%99%AB/P6-Py-3Ajax%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<p><strong>1、关于ajax的名字</strong>　　</p>
<p>　　ajax 的全称是Asynchronous JavaScript and XML，其中，Asynchronous 是异步的意思，它有别于传统web开发中采用的同步的方式。</p>
<p><strong>2、关于同步和异步</strong>　</p>
<p>　　异步传输是面向字符的传输，它的单位是字符；而同步传输是面向比特的传输，它的单位是桢，它传输的时候要求接受方和发送方的时钟是保持一致的。</p>
<p>具体来说，异步传输是将比特分成小组来进行传送。一般每个小组是一个8位字符，在每个小组的头部和尾部都有一个开始位和一个停止位，它在传送过程中接收方和发送方的时钟不要求一致，也就是说，发送方可以在任何时刻发送这些小组，而接收方并不知道它什么时候到达。一个最明显的例子就是计算机键盘和主机的通信，按下一个键的同时向主机发送一个8比特位的ASCII代 码，键盘可以在任何时刻发送代码，这取决于用户的输入速度，内部的硬件必须能够在任何时刻接收一个键入的字符。这是一个典型的异步传输过程。异步传输存在 一个潜在的问题，即接收方并不知道数据会在什么时候到达。在它检测到数据并做出响应之前，第一个比特已经过去了。这就像有人出乎意料地从后面走上来跟你说 话，而你没来得及反应过来，漏掉了最前面的几个词。因此，每次异步传输的信息都以一个起始位开头，它通知接收方数据已经到达了，这就给了接收方响应、接收 和缓存数据比特的时间；在传输结束时，一个停止位表示该次传输信息的终止。按照惯例，空闲（没有传送数据）的线路实际携带着一个代表二进制1的信号。步传输的开始位使信号变成0，其他的比特位使信号随传输的数据信息而变化。最后，停止位使信号重新变回1，该信号一直保持到下一个开始位到达。例如在键盘上数字“1”，按照8比特位的扩展ASCII编码，将发送“00110001”，同时需要在8比特位的前面加一个起始位，后面一个停止位。</p>
<p>同步传输的比特分组要大得多。它不是独立地发送每个字符，每个字符都有自己的开始位和停止位，而是把它们组合起来一起发送。我们将这些组合称为数据帧，或简称为帧。</p>
<p>　　数据帧的第一部分包含一组同步字符，它是一个独特的比特组合，类似于前面提到的起始位，用于通知接收方一个帧已经到达，但它同时还能确保接收方的采样速度和比特的到达速度保持一致，使收发双方进入同步。</p>
<p>　　帧的最后一部分是一个帧结束标记。与同步字符一样，它也是一个独特的比特串，类似于前面提到的停止位，用于表示在下一帧开始之前没有别的即将到达的数据了。</p>
<p>　　同步传输通常要比异步传输快速得多。接收方不必对每个字符进行开始和停止的操作。一旦检测到帧同步字符，它就在接下来的数据到达时接收它们。另外，同步传输的开销也比较少。例如，一个典型的帧可能有500字节（即4000比特）的数据，其中可能只包含100比特的开销。这时，增加的比特位使传输的比特总数增加2.5%，这与异步传输中25 %的增值要小得多。随着数据帧中实际数据比特位的增加，开销比特所占的百分比将相应地减少。但是，数据比特位越长，缓存数据所需要的缓冲区也越大，这就限制了一个帧的大小。另外，帧越大，它占据传输媒体的连续时间也越长。在极端的情况下，这将导致其他用户等得太久。</p>
<p>　3、<strong>ajax所包含的技术</strong></p>
<p>　　<strong>ajax并非一种新的技术，而是几种原有技术的结合体。它由下列技术组合而成。</strong></p>
<p>　1.使用CSS和XHTML来表示。</p>
<ol start="2">
<li>使用DOM模型来交互和动态显示。</li>
</ol>
<p>  3.使用XMLHttpRequest来和服务器进行异步通信。</p>
<p>  4.使用javascript来绑定和调用。</p>
<p>在上面几中技术中，除了XmlHttpRequest对象以外，其它所有的技术都是基于web标准并且已经得到了广泛使用的，XMLHttpRequest虽然目前还没有被W3C所采纳，但是它已经是一个事实的标准，因为目前几乎所有的主流浏览器都支持它。</p>
<p>  <strong>4、ajax原理和XmlHttpRequest对象</strong></p>
<p>　　<strong>Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。</strong></p>
<p>XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。</p>
<p> 　所以我们先从XMLHttpRequest讲起，来看看它的工作原理。</p>
<p> 　首先，我们先来看看XMLHttpRequest这个对象的属性。</p>
<p> 　　它的属性有：</p>
<p> 　　onreadystatechange 每次状态改变所触发事件的事件处理程序。</p>
<p> 　　responseText   从服务器进程返回数据的字符串形式。</p>
<p> 　　responseXML   从服务器进程返回的DOM兼容的文档数据对象。</p>
<p> 　　status      从服务器返回的数字代码，比如常见的404（未找到）和200（已就绪）</p>
<p> 　　status Text    伴随状态码的字符串信息</p>
<p> 　　readyState    对象状态值</p>
<p>　　　　0 (未初始化) 对象已建立，但是尚未初始化（尚未调用open方法）</p>
<p>　　　　1 (初始化) 对象已建立，尚未调用send方法</p>
<p>　　　　2 (发送数据) send方法已调用，但是当前的状态及http头未知</p>
<p>　　　　3 (数据传送中) 已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误，</p>
<p>　　　　4 (完成) 数据接收完毕,此时可以通过通过responseXml和responseText获取完整的回应数据</p>
<p>　　但是，由于各浏览器之间存在差异，所以创建一个XMLHttpRequest对象可能需要不同的方法。这个差异主要体现在IE和其它浏览器之间。下面是一个比较标准的创建XMLHttpRequest对象的方法。</p>
<p>function CreateXmlHttp() {</p>
<p>​    &#x2F;&#x2F;非IE浏览器创建XmlHttpRequest对象</p>
<p>​    if (window.XmlHttpRequest) {</p>
<p>​        xmlhttp &#x3D; new XmlHttpRequest();</p>
<p>​    }</p>
<p>​    &#x2F;&#x2F;IE浏览器创建XmlHttpRequest对象</p>
<p>​    if (window.ActiveXObject) {</p>
<p>​        try {</p>
<p>​            xmlhttp &#x3D; new ActiveXObject(“Microsoft.XMLHTTP”);</p>
<p>​        }</p>
<p>​        catch (e) {</p>
<p>​            try {</p>
<p>​                xmlhttp &#x3D; new ActiveXObject(“msxml2.XMLHTTP”);</p>
<p>​            }</p>
<p>​            catch (ex) { }</p>
<p>​        }</p>
<p>​    }</p>
<p>}</p>
<p>function Ustbwuyi() {</p>
<p>​    var data &#x3D; document.getElementById(“username”).value;</p>
<p>​    CreateXmlHttp();</p>
<p>​    if (!xmlhttp) {</p>
<p>​        alert(“创建xmlhttp对象异常！”);</p>
<p>​        return false;</p>
<p>​    }</p>
<p>​    xmlhttp.open(“POST”, url, false);</p>
<p>​    xmlhttp.onreadystatechange &#x3D; function () {</p>
<p>​        if (xmlhttp.readyState &#x3D;&#x3D; 4) {</p>
<p>​            document.getElementById(“user1”).innerHTML &#x3D; “数据正在加载…”;</p>
<p>​            if (xmlhttp.status &#x3D;&#x3D; 200) {</p>
<p>​                document.write(xmlhttp.responseText);</p>
<p>​            }</p>
<p>​        }</p>
<p>​    }</p>
<p>​    xmlhttp.send();</p>
<p>}</p>
<p>　　如上所示，函数首先检查XMLHttpRequest的整体状态并且保证它已经完成（readyStatus&#x3D;4），即数据已经发送完毕。然后根据服务器的设定询问请求状态，如果一切已经就绪（status&#x3D;200），那么就执行下面需要的操作。</p>
<p>对于XmlHttpRequest的两个方法，open和send，其中open方法指定了：</p>
<p>a、向服务器提交数据的类型，即post还是get。</p>
<p>b、请求的url地址和传递的参数。</p>
<p>c、传输方式，false为同步，true为异步。默认为true。如果是异步通信方式(true)，客户机就不等待服务器的响应；如果是同步方式(false)，客户机就要等到服务器返回消息后才去执行其他操作。我们需要根据实际需要来指定同步方式，在某些页面中，可能会发出多个请求，甚至是有组织有计划有队形大规模的高强度的request，而后一个是会覆盖前一个的，这个时候当然要指定同步方式。</p>
<p>Send方法用来发送请求。</p>
<p>　　知道了XMLHttpRequest的工作流程，我们可以看出，XMLHttpRequest是完全用来向服务器发出一个请求的，它的作用也局限于此，但它的作用是整个ajax实现的关键，因为ajax无非是两个过程，发出请求和响应请求。并且它完全是一种客户端的技术。而XMLHttpRequest正是处理了服务器端和客户端通信的问题所以才会如此的重要。</p>
<p>　　现在，我们对ajax的原理大概可以有一个了解了。我们可以把服务器端看成一个数据接口，它返回的是一个纯文本流，当然，这个文本流可以是XML格式，可以是Html，可以是Javascript代码，也可以只是一个字符串。这时候，XMLHttpRequest向服务器端请求这个页面，服务器端将文本的结果写入页面，这和普通的web开发流程是一样的，不同的是，客户端在异步获取这个结果后，不是直接显示在页面，而是先由javascript来处理，然后再显示在页面。至于现在流行的很多ajax控件，比如magicajax等，可以返回DataSet等其它数据类型，只是将这个过程封装了的结果，本质上他们并没有什么太大的区别。</p>
<p>　　<strong>5、ajax的缺点</strong></p>
<p>下面我着重讲一讲ajax的缺陷，因为平时我们大多注意的都是ajax给我们所带来的好处诸如用户体验的提升。而对ajax所带来的缺陷有所忽视。</p>
<p>　　下面所阐述的ajax的缺陷都是它先天所产生的。</p>
<p>  　1、ajax干掉了back按钮，即对浏览器后退机制的破坏。后退按钮是一个标准的web站点的重要功能，但是它没法和js进行很好的合作。这是ajax所带来的一个比较严重的问题，因为用户往往是希望能够通过后退来取消前一次操作的。那么对于这个问题有没有办法？答案是肯定的，用过Gmail的知道，Gmail下面采用的ajax技术解决了这个问题，在Gmail下面是可以后退的，但是，它也并不能改变ajax的机制，它只是采用的一个比较笨但是有效的办法，即用户单击后退按钮访问历史记录时，通过创建或使用一个隐藏的IFRAME来重现页面上的变更。（例如，当用户在Google Maps中单击后退时，它在一个隐藏的IFRAME中进行搜索，然后将搜索结果反映到Ajax元素上，以便将应用程序状态恢复到当时的状态。）</p>
<p>但是，虽然说这个问题是可以解决的，但是它所带来的开发成本是非常高的，和ajax框架所要求的快速开发是相背离的。这是ajax所带来的一个非常严重的问题。</p>
<p>   2、安全问题</p>
<p>技术同时也对IT企业带来了新的安全威胁，ajax技术就如同对企业数据建立了一个直接通道。这使得开发者在不经意间会暴露比以前更多的数据和服务器逻辑。ajax的逻辑可以对客户端的安全扫描技术隐藏起来，允许黑客从远端服务器上建立新的攻击。还有ajax也难以避免一些已知的安全弱点，诸如跨站点脚步攻击、SQL注入攻击和基于credentials的安全漏洞等。</p>
<p>   3、对搜索引擎的支持比较弱。</p>
<p>   4、破坏了程序的异常机制。至少从目前看来，像ajax.dll，ajaxpro.dll这些ajax框架是会破坏程序的异常机制的。关于这个问题，我曾经在开发过程中遇到过，但是查了一下网上几乎没有相关的介绍。后来我自己做了一次试验，分别采用ajax和传统的form提交的模式来删除一条数据……给我们的调试带来了很大的困难。</p>
<p>   5、另外，像其他方面的一些问题，比如说违背了url和资源定位的初衷。例如，我给你一个url地址，如果采用了ajax技术，也许你在该url地址下面看到的和我在这个url地址下看到的内容是不同的。这个和资源定位的初衷是相背离的。</p>
<p>   6、一些手持设备（如手机、PDA等）现在还不能很好的支持ajax，比如说我们在手机的浏览器上打开采用ajax技术的网站时，它目前是不支持的，当然，这个问题和我们没太多关系。</p>
<p>　　<strong>5、$.ajax()方法详解</strong>　　　</p>
<p>jquery中的ajax方法参数总是记不住，这里记录一下。</p>
<p><strong>1.url</strong>: </p>
<p>要求为String类型的参数，（默认为当前页地址）发送请求的地址。</p>
<p><strong>2.type</strong>: </p>
<p>要求为String类型的参数，请求方式（post或get）默认为get。注意其他http请求方法，例如put和delete也可以使用，但仅部分浏览器支持。</p>
<p><strong>3.timeout</strong>: </p>
<p>要求为Number类型的参数，设置请求超时时间（毫秒）。此设置将覆盖$.ajaxSetup()方法的全局设置。</p>
<p><strong>4.async</strong>: </p>
<p>要求为Boolean类型的参数，默认设置为true，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为false。注意，同步请求将锁住浏览器，用户其他操作必须等待请求完成才可以执行。</p>
<p><strong>5.cache</strong>: </p>
<p>要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false），设置为false将不会从浏览器缓存中加载请求信息。</p>
<p><strong>6.data</strong>: </p>
<p>要求为Object或String类型的参数，发送到服务器的数据。如果已经不是字符串，将自动转换为字符串格式。get请求中将附加在url后。防止这种自动转换，可以查看　　processData选项。对象必须为key&#x2F;value格式，例如{foo1:”bar1”,foo2:”bar2”}转换为&amp;foo1&#x3D;bar1&amp;foo2&#x3D;bar2。如果是数组，JQuery将自动为不同值对应同一个名称。例如{foo:[“bar1”,”bar2”]}转换为&amp;foo&#x3D;bar1&amp;foo&#x3D;bar2。</p>
<p><strong>7.dataType</strong>: </p>
<p>要求为String类型的参数，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。可用的类型如下：</p>
<p>xml：返回XML文档，可用JQuery处理。</p>
<p>html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。</p>
<p>script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。</p>
<p>json：返回JSON数据。</p>
<p>jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback&#x3D;?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。</p>
<p>text：返回纯文本字符串。</p>
<p><strong>8.beforeSend</strong>：</p>
<p>要求为Function类型的参数，发送请求前可以修改XMLHttpRequest对象的函数，例如添加自定义HTTP头。在beforeSend中如果返回false可以取消本次ajax请求。XMLHttpRequest对象是惟一的参数。</p>
<p>​      function(XMLHttpRequest){</p>
<p>​        this;  &#x2F;&#x2F;调用本次ajax请求时传递的options参数</p>
<p>​      }</p>
<p><strong>9.complete</strong>：</p>
<p>要求为Function类型的参数，请求完成后调用的回调函数（请求成功或失败时均调用）。参数：XMLHttpRequest对象和一个描述成功请求类型的字符串。</p>
<p>​     function(XMLHttpRequest, textStatus){</p>
<p>​       this;  &#x2F;&#x2F;调用本次ajax请求时传递的options参数</p>
<p>​     }</p>
<p><strong>10.success</strong>：要求为Function类型的参数，请求成功后调用的回调函数，有两个参数。</p>
<p>​     (1)由服务器返回，并根据dataType参数进行处理后的数据。</p>
<p>​     (2)描述状态的字符串。</p>
<p>​     function(data, textStatus){</p>
<p>​      &#x2F;&#x2F;data可能是xmlDoc、jsonObj、html、text等等</p>
<p>​      this; &#x2F;&#x2F;调用本次ajax请求时传递的options参数</p>
<p>​     }</p>
<p><strong>11.error</strong>:</p>
<p>要求为Function类型的参数，请求失败时被调用的函数。该函数有3个参数，即XMLHttpRequest对象、错误信息、捕获的错误对象(可选)。ajax事件函数如下：</p>
<p>​    function(XMLHttpRequest, textStatus, errorThrown){</p>
<p>​     &#x2F;&#x2F;通常情况下textStatus和errorThrown只有其中一个包含信息</p>
<p>​     this;  &#x2F;&#x2F;调用本次ajax请求时传递的options参数</p>
<p>​    }</p>
<p><strong>12.contentType</strong>：</p>
<p>要求为String类型的参数，当发送信息至服务器时，内容编码类型默认为”application&#x2F;x-www-form-urlencoded”。该默认值适合大多数应用场合。</p>
<p><strong>13.dataFilter</strong>：</p>
<p>要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。</p>
<p>​      function(data, type){</p>
<p>​        &#x2F;&#x2F;返回处理后的数据</p>
<p>​        return data;</p>
<p>​      }</p>
<p><strong>14.dataFilter</strong>：</p>
<p>要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。</p>
<p>​      function(data, type){</p>
<p>​        &#x2F;&#x2F;返回处理后的数据</p>
<p>​        return data;</p>
<p>​      }</p>
<p><strong>15.global</strong>：</p>
<p>要求为Boolean类型的参数，默认为true。表示是否触发全局ajax事件。设置为false将不会触发全局ajax事件，ajaxStart或ajaxStop可用于控制各种ajax事件。</p>
<p><strong>16.ifModified</strong>：</p>
<p>要求为Boolean类型的参数，默认为false。仅在服务器数据改变时获取新数据。服务器数据改变判断的依据是Last-Modified头信息。默认值是false，即忽略头信息。</p>
<p><strong>17.jsonp</strong>：</p>
<p>要求为String类型的参数，在一个jsonp请求中重写回调函数的名字。该值用来替代在”callback&#x3D;?”这种GET或POST请求中URL参数里的”callback”部分，例如{jsonp:’onJsonPLoad’}会导致将”onJsonPLoad&#x3D;?”传给服务器。</p>
<p><strong>18.username</strong>：</p>
<p>要求为String类型的参数，用于响应HTTP访问认证请求的用户名。</p>
<p><strong>19.password</strong>：</p>
<p>要求为String类型的参数，用于响应HTTP访问认证请求的密码。</p>
<p><strong>20.processData</strong>：</p>
<p>要求为Boolean类型的参数，默认为true。默认情况下，发送的数据将被转换为对象（从技术角度来讲并非字符串）以配合默认内容类型”application&#x2F;x-www-form-urlencoded”。如果要发送DOM树信息或者其他不希望转换的信息，请设置为false。</p>
<p><strong>21.scriptCharset</strong>：</p>
<p>要求为String类型的参数，只有当请求时dataType为”jsonp”或者”script”，并且type是GET时才会用于强制修改字符集(charset)。通常在本地和远程的内容编码不同时使用。</p>
<p>案例代码：</p>
<p>​    <img src="https://note.youdao.com/yws/res/235/3EB867867B6C4083AFDEC192BB4C964A" alt="复制代码"></p>
<p>$(function(){    $(‘#send’).click(function(){         $.ajax({             type: “GET”,             url: “test.json”,             data: {username:$(“#username”).val(), content:$(“#content”).val()},             dataType: “json”,             success: function(data){                         $(‘#resText’).empty();   &#x2F;&#x2F;清空resText里面的所有内容                         var html &#x3D; ‘’;                          $.each(data, function(commentIndex, comment){                               html +&#x3D; ‘</p>
<h6 id="‘-comment-‘username’-‘"><a href="#‘-comment-‘username’-‘" class="headerlink" title="‘ + comment[‘username’]                                         + ‘:"></a>‘ + comment[‘username’]                                         + ‘:</h6><p>‘;                         });                         $(‘#resText’).html(html);                      }         });    });});</p>
<p>​    <img src="https://note.youdao.com/yws/res/237/AAABEE8CEF9F4C8F939708C74D3126EA" alt="复制代码"></p>
<p><a href="http://www.cnblogs.com/tylerdonet/p/3520862.html"> </a></p>
<p>　</p>
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>Python，JS</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫学习笔记-6.2Scrapy、JS等异步的事件轮询机制（base百度）</title>
    <url>/2023/03/18/Python/%E7%88%AC%E8%99%AB/P6-Py-2%E5%BC%82%E6%AD%A5%E7%9A%84%E4%BA%8B%E4%BB%B6%E8%BD%AE%E8%AF%A2%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Scrapy、JS等异步的事件轮询机制"><a href="#Scrapy、JS等异步的事件轮询机制" class="headerlink" title="Scrapy、JS等异步的事件轮询机制"></a>Scrapy、JS等异步的事件轮询机制</h1><p><strong>什么是异步</strong></p>
<p><a href="https://www.cnblogs.com/lan-cheng/p/10223455.html">https://www.cnblogs.com/lan-cheng/p/10223455.html</a></p>
<p><strong>什么是异步</strong></p>
<p>提起异步大家大家首先应该想到同步，首先解释一下什么是同步。同步即为按照顺序执行，下一任务需要等前一个任务执行完成后才可以开始。那异步是什么呢，简单理解就是和同步相反，他不用等待上一个任务完成就可以开始，像io操作，网络请求一般会采用异步的方式进行</p>
<p><strong>JS是如何是实现异步操作的？</strong> </p>
<p>  js是单线程语言,JS的异步是通过回调函数实现的，即通过任务队列，在主线程执行完当前的任务栈（所有的同步操作），主线程空闲后<strong>轮询</strong>任务队列，并将任务队列中的任务（回调函数）取出来执行。”回调函数”（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。</p>
<p><strong>关于<strong><strong>异步中的轮询</strong></strong>机制和<strong><strong>OS中的轮询</strong></strong>机制的区别：异步中的轮询是指当一个线程执行完任务栈中所有任务后轮询任务队列中被挂起的任务——–cpu有事干，没事干了再统一问一次；OS中的轮询是指只要这个I&#x2F;O控制器没就绪，就一直问，就绪也在询问——–cpu有事没事都要问（输入输出系统中用到）；</strong></p>
<p>  虽然JS是单线程的但是浏览器的内核是多线程的，在浏览器的内核中不同的异步操作由不同的浏览器内核模块调度执行，异步操作会将相关回调添加到任务队列中。而不同的异步操作添加到任务队列的时机也不同，（看不懂）如 onclick, setTimeout, ajax 处理的方式都不同，这些异步操作是由浏览器内核的 webcore 来执行的，webcore 包含上图中的3种 webAPI，分别是 DOM Binding、network、timer模块。</p>
<p><strong>JS中的异步运行机制如下:</strong> </p>
<p>（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</p>
<p>（2）主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。</p>
<p>（3）一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</p>
<p>（4）主线程不断重复上面的第三步。</p>
<p>-—————————————————————————————————————————————————————————-</p>
<img src="./P6-Py-2%E5%BC%82%E6%AD%A5%E5%AD%A6%E4%B9%A0.assets/image-20230421174507864.png" alt="image-20230421174507864" style="zoom:50%;" />

<p>-————————————————————————————————————————————————————————————</p>
<img src="./P6-Py-2%E5%BC%82%E6%AD%A5%E5%AD%A6%E4%B9%A0.assets/image-20230421174442474.png" alt="image-20230421174442474" style="zoom:50%;" />

<p><strong>异步的几种实现方式</strong></p>
<ol>
<li>回调函数</li>
<li>使用promise</li>
<li>ES7的Async&#x2F;Await</li>
</ol>
<p> 　</p>
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>Python，JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS学习笔记-4.7过滤（base  gpt ）</title>
    <url>/2023/04/13/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JS/Q4-JS-7%E8%BF%87%E6%BB%A4/</url>
    <content><![CDATA[<h1 id="4-7-1数组过滤"><a href="#4-7-1数组过滤" class="headerlink" title="4.7.1数组过滤"></a>4.7.1数组过滤</h1><ol>
<li><p>filter():过滤出符合条件的元素,返回新数组。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array.filter(callbackFunc)</span><br></pre></td></tr></table></figure>

<p>callbackFunc 是过滤函数,用于测试每个元素是否通过测试。<br>filter() 方法返回一个过滤后的新数组。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fruits = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;grape&#x27;, &#x27;mango&#x27;, &#x27;orange&#x27;];</span><br><span class="line"></span><br><span class="line">const filterItems = fruits.filter(fruit =&gt; fruit.length &gt; 6);</span><br><span class="line"></span><br><span class="line">console.log(filterItems); </span><br><span class="line">// [&#x27;banana&#x27;, &#x27;mango&#x27;, &#x27;orange&#x27;]</span><br></pre></td></tr></table></figure>
</li>
<li><p>slice():提取符合条件的元素,返回新数组，属于浅拷贝。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array.slice(start, end)</span><br></pre></td></tr></table></figure>

<p>start 和 end 表示截取的起止位置,不包含 end 位置的元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let fruits = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;grape&#x27;, &#x27;mango&#x27;, &#x27;orange&#x27;];</span><br><span class="line">let sliceFruits = fruits.slice(1, 3);</span><br><span class="line">// sliceFruits = [&#x27;banana&#x27;, &#x27;grape&#x27;]</span><br></pre></td></tr></table></figure>
</li>
<li><p>splice():移除元素,并可以在移除的位置添加新元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array.splice(start, deleteCount, ...newItems) </span><br></pre></td></tr></table></figure>

<p>- start:移除元素的起始位置<br>- deleteCount:要移除的元素个数<br>- newItems:要添加的新元素示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let fruits = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;grape&#x27;, &#x27;mango&#x27;, &#x27;orange&#x27;]; </span><br><span class="line">fruits.splice(1, 2, &#x27;strawberry&#x27;);</span><br><span class="line">// fruits = [&#x27;apple&#x27;, &#x27;strawberry&#x27;, &#x27;mango&#x27;, &#x27;orange&#x27;]</span><br></pre></td></tr></table></figure>
</li>
<li><p>pop()&#x2F;shift():移除数组的最后&#x2F;第一个元素。</p>
</li>
<li><p>concat():相当于C++里的set。连接两个数组,并返回新数组。可以用于过滤两个数组的公共元素。</p>
</li>
<li><p>…(展开运算符):将一个数组展开为用 , 分隔的参数序列,可以用于过滤数组中的某些元素。</p>
<p>除此之外,我们也可以使用 ES6 的 Set 和 Map 等新数据结构进行过滤。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS学习笔记-4.8面向对象（base  gpt/答疑 ）</title>
    <url>/2023/04/14/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JS/Q4-JS-8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="4-8面向对象"><a href="#4-8面向对象" class="headerlink" title="4.8面向对象"></a>4.8面向对象</h1><h2 id="4-8-1浅薄的了解"><a href="#4-8-1浅薄的了解" class="headerlink" title="4.8.1浅薄的了解"></a>4.8.1浅薄的了解</h2><h3 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1.构造函数"></a>1.构造函数</h3><p>用于反复创建相同的对象，和Java一样，就是父类。</p>
<p>this.price&#x3D;price;意味着把传进来的price参数挂载到构造函数内部当作属性用了。</p>
<h3 id="2-是否使用原型函数（prototype）"><a href="#2-是否使用原型函数（prototype）" class="headerlink" title="2.是否使用原型函数（prototype）"></a>2.是否使用原型函数（prototype）</h3><p>构造函数内的方法如果是不变的，那么每次new一个新实例的时候都会调用这个方法，从而造成资源浪费。所以要把它挂载到原型上，并写在函数外部，这样就相当于只初始化一次。这样他实例化时，就会通过实例化（子类）的声明覆盖掉父类的声明。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Car构造函数的初始化</span><br><span class="line">Car(price)&#123;</span><br><span class="line">	this.price=price;</span><br><span class="line">&#125;</span><br><span class="line">//给Car函数增加原型函数</span><br><span class="line">Car.run=function()&#123;console.log(&quot;run as 100km/h&quot;)&#125;</span><br></pre></td></tr></table></figure>

<p>构造函数内的方法如果是基于传进来的参数要进行选择性创建的，那么就不用写成原型函数，且可以写在构造函数内部。<br><img src="./Q4-JS-7%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.assets/image-20230421171703306.png" alt="image-20230421171703306" style="zoom:33%;" /></p>
<h3 id="3-原型链"><a href="#3-原型链" class="headerlink" title="3.原型链"></a>3.原型链</h3><p>在调用某个类的子函数的时候，先去找它本身是否声明过（这会覆盖父类的声明），然后找父类内部是否声明过，再找父类的prototype（原型）函数中有没有。</p>
<h3 id="4-覆盖"><a href="#4-覆盖" class="headerlink" title="4.覆盖"></a>4.覆盖</h3><p>子类的重复声明，会把父类的声明覆盖掉。</p>
<h3 id="5-静态属性"><a href="#5-静态属性" class="headerlink" title="5.静态属性"></a>5.静态属性</h3><p>就是只属于自己的属性。简称属性。</p>
<p>注：构造函数也可以有只属于自己的（无法被继承的）属性。</p>
<h3 id="6-一些疑问"><a href="#6-一些疑问" class="headerlink" title="6.一些疑问"></a>6.一些疑问</h3><p>1.浅拷贝都有什么实现方式<br>2.为什么创建对象的时候，对象里面的方法用的是引用，而属性不是</p>
<pre><code>这是因为在 JavaScript 中,对象的方法和属性有不同的存储方式:
属性:
- 属性的值直接存储在对象中
- 当读取属性时,直接返回对象中存储的值方法:- 方法的值实际上是一个函数
- 函数是引用类型,所以方法的值是一个指向函数的引用
- 当读取方法时,返回的是对函数的引用
</code></pre>
<p>   <a href="https://test-rnt2063.slack.com/archives/D053Z3YFB4Y/p1682137400226899">https://test-rnt2063.slack.com/archives/D053Z3YFB4Y/p1682137400226899</a><br>3.为什么函数是引用类型，而不是拷贝？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.为了让函数实现共用</span><br><span class="line">2.避免每次传递函数时都需要创建一个函数的完整拷贝。</span><br><span class="line">因为函数也是对象,如果是值类型,每次传递都需要将整个函数对象拷贝一份,这会消耗额外资源。</span><br><span class="line">而作为引用类型,我们只需要传递函数的引用,就能在多个地方调用同一个函数,不需要每次都创建一个新的函数对象。</span><br><span class="line">3.支持函数的动态性。如果函数是值类型,那么函数创建后其引用就永远固定了。而作为引用类型,函数的引用是可以动态修改和重新赋值的。</span><br><span class="line">在 JavaScript 中,函数是对象,而对象是引用类型。</span><br><span class="line">所以当我们传递或赋值一个函数时,传递的其实是对该函数对象的引用,而不是函数的拷贝。</span><br></pre></td></tr></table></figure>

<p>   <a href="https://test-rnt2063.slack.com/archives/D053Z3YFB4Y/p1682137463065349">https://test-rnt2063.slack.com/archives/D053Z3YFB4Y/p1682137463065349</a><br>4.引用在JS里有什么用？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 允许对象之间共享信息。因为对对象的引用可以在多个变量之间传递,所以指向同一对象的多个变量可以共享该对象中的信息。</span><br><span class="line">例如:</span><br><span class="line">js</span><br><span class="line">let obj = &#123; a: 1 &#125;;</span><br><span class="line">let ref1 = obj;</span><br><span class="line">let ref2 = obj;</span><br><span class="line"></span><br><span class="line">ref1.a = 2;  // 通过 ref1 修改</span><br><span class="line"></span><br><span class="line">console.log(ref2.a); // 2  ref2 也受到影响</span><br><span class="line">这里 ref1 和 ref2 指向同一对象 obj,所以通过 ref1 对 obj 的修改也影响了 ref2。</span><br><span class="line"></span><br><span class="line">2. 实现继承和原型链。JS 中的继承是通过原型链实现的,子对象通过__proto__属性指向父对象,这个过程其实就是引用传递。</span><br><span class="line">例如:</span><br><span class="line">js</span><br><span class="line">let parent = &#123;</span><br><span class="line">  name: &#x27;parent&#x27; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let child = &#123;</span><br><span class="line">  __proto__: parent  // child 的 __proto__ 属性引用 parent</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(child.name); // parent </span><br><span class="line">这里 child 对 parent 的引用允许其访问 parent 的属性和方法。</span><br><span class="line"></span><br><span class="line">3. 函数也是对象,所以对函数的传递和赋值也是通过引用来实现的。这意味着多个变量可以共享同一个函数,并且函数的内部状态会影响所有接受到其引用的变量。</span><br><span class="line">例如:</span><br><span class="line">js</span><br><span class="line">function foo() &#123;</span><br><span class="line">  foo.count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let bar = foo;</span><br><span class="line"></span><br><span class="line">bar();  // foo.count 是 1 </span><br><span class="line">foo();  // foo.count 是 2</span><br><span class="line">这里 bar 和 foo 指向同一个函数对象,所以调用 bar 或 foo 都会修改这个共享的函数对象。</span><br><span class="line"></span><br><span class="line">4. 允许循环引用。通过引用,两个对象可以相互引用对方,形成闭环。</span><br><span class="line">例如:</span><br><span class="line">js</span><br><span class="line">let obj1 = &#123;</span><br><span class="line">  name: &#x27;obj1&#x27;,</span><br><span class="line">  ref: obj2  // 引用 obj2 </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let obj2 = &#123;</span><br><span class="line">  name: &#x27;obj2&#x27;,</span><br><span class="line">  ref: obj1  // 引用 obj1</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line">所以,总结来说,引用在 JS 中实现了对象之间的连接,是支持大部分面向对象特性和功能的基础。</span><br></pre></td></tr></table></figure>

<p>   <a href="https://test-rnt2063.slack.com/archives/D053Z3YFB4Y/p1682137511999319">https://test-rnt2063.slack.com/archives/D053Z3YFB4Y/p1682137511999319</a><br>5.为什么对象是引用类型？<br>   <a href="https://test-rnt2063.slack.com/archives/D053Z3YFB4Y/p1682137569143519">https://test-rnt2063.slack.com/archives/D053Z3YFB4Y/p1682137569143519</a><br>6.构造函数可以被继承的部分一定是引用类型吗？<br>   <a href="https://test-rnt2063.slack.com/archives/D053Z3YFB4Y/p1682137669380839">https://test-rnt2063.slack.com/archives/D053Z3YFB4Y/p1682137669380839</a><br>7.不是引用类型的部分怎么实现可以被继承的？<br>   <a href="https://test-rnt2063.slack.com/archives/D053Z3YFB4Y/p1682137704757199">https://test-rnt2063.slack.com/archives/D053Z3YFB4Y/p1682137704757199</a><br>8.构造函数中，可继承的部分中，不是引用类型的部分为什么不用引用实现被继承？<br>    每一个继承对象理应拥有父对象中某些属性的一个独立拷贝,而不是共享一个属性的引用<br>    <a href="https://test-rnt2063.slack.com/archives/D053Z3YFB4Y/p1682138844233269">https://test-rnt2063.slack.com/archives/D053Z3YFB4Y/p1682138844233269</a><br>9.完整拷贝对象比引用浪费了哪些资源？<br>    1更多的内存空间,需要存储对象的完整结构<br>    2更长的处理时间,需要遍历对象属性进行拷贝<br>    3创建额外的临时对象   </p>
<p>10.引用不用储存对象的完整结构吗？什么叫对象的完整结构？<br>    引用也需要存储对象的结构,但是与拷贝相比,引用只需要存储对象结构一次。<br>    引用的工作原理是:多个变量存储的是对同一个对象的引用,通过这个引用可以访问到对象的结构。</p>
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS学习笔记-4.9衍生知识（base gpt/答疑）</title>
    <url>/2023/04/15/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JS/Q4-JS-9%E8%A1%8D%E7%94%9F%E7%9F%A5%E8%AF%86%EF%BC%88es6%E3%80%81%E8%BF%87%E6%BB%A4%E6%80%9D%E8%B7%AF%E3%80%81%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8E%9F%E7%90%86%E3%80%81debug%E3%80%81%E5%87%BD%E6%95%B0%E5%A4%8D%E7%94%A8%EF%BC%89/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 一个数据里面去匹配</span><br><span class="line">// 1.字符的匹配</span><br><span class="line">const text = &#x27;hello world&#x27;;</span><br><span class="line">const reg = /helli/;</span><br><span class="line"></span><br><span class="line">const result = text.match(reg);</span><br><span class="line"></span><br><span class="line">// console.log(&quot;result&quot;,result)</span><br><span class="line"></span><br><span class="line">// 2.在一堆数据里面去筛选</span><br><span class="line"></span><br><span class="line">// 3.浅拷贝</span><br><span class="line">const shallowClone = (target) =&gt; &#123;</span><br><span class="line">  const result = &#123;&#125;;</span><br><span class="line">  for (let key in target) &#123;</span><br><span class="line">    result[key] = target[key];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// // 4.深拷贝</span><br><span class="line">// const deepClone = (target) =&gt; &#123;</span><br><span class="line">//     const obj = &#123;&#125;</span><br><span class="line">//     for (let key in target) &#123;</span><br><span class="line">//         const value = target[key];</span><br><span class="line">//         if (isObj(target)) &#123;</span><br><span class="line">//             obj[key] = deepClone(value)</span><br><span class="line">//         &#125; else &#123;</span><br><span class="line">//             obj[key] = value</span><br><span class="line">//         &#125;</span><br><span class="line">//     &#125;</span><br><span class="line"></span><br><span class="line">//     return obj</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">//5.找到复杂对象中的某几个符合的数据</span><br><span class="line">const list = [</span><br><span class="line">  &#123; name: &#x27;zhangsan&#x27;, id: 1 &#125;,</span><br><span class="line">  &#123; name: &#x27;lisi&#x27;, id: 2 &#125;,</span><br><span class="line">  &#123; name: &#x27;wangwu&#x27;, id: 3 &#125;,</span><br><span class="line">  &#123; name: &#x27;wangwu&#x27;, id: 4 &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">// 得分字段 score:10</span><br><span class="line"></span><br><span class="line">const getName = function (item) &#123;</span><br><span class="line">  return item.name === &#x27;wangwu&#x27;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 5.1 forEach 遍历</span><br><span class="line"></span><br><span class="line">// 5.2 for of遍历，判断 数组是否满足条件</span><br><span class="line"></span><br><span class="line">//5.3 判断条件独立出来，函数复用</span><br><span class="line"></span><br><span class="line">// 5.2.1every 所有条件满足返回true,否则返回false</span><br><span class="line">const everyResult = list.every(getName);</span><br><span class="line">console.log(&#x27;everyResult&#x27;, everyResult);</span><br><span class="line"></span><br><span class="line">// 5.2.2some 任一条件满足返回true，否则返回false</span><br><span class="line">const someResult = list.some(getName);</span><br><span class="line">console.log(&#x27;someResult&#x27;, someResult);</span><br><span class="line"></span><br><span class="line">const target = [];</span><br><span class="line"></span><br><span class="line">list.forEach((item) =&gt; &#123;</span><br><span class="line">  target.push(&#123;</span><br><span class="line">    ...item,</span><br><span class="line">    score: 10,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return target;</span><br><span class="line"></span><br><span class="line">// 5.3map</span><br><span class="line"></span><br><span class="line">// 5.4reduce</span><br><span class="line"></span><br><span class="line">// 6.深拷贝的底层原理：判断数据类型是否为Object</span><br><span class="line">const isObj = (target) =&gt;</span><br><span class="line">  Object.prototype.toString.call(target) === &#x27;[object Object]&#x27;;</span><br><span class="line"></span><br><span class="line">const deepClone = (target) =&gt; &#123;</span><br><span class="line">  const obj = &#123;&#125;;</span><br><span class="line">  for (let key in target) &#123;</span><br><span class="line">    const value = target[key];</span><br><span class="line">    debugger;</span><br><span class="line">    if (isObj(value)) &#123;</span><br><span class="line">      debugger;</span><br><span class="line">      obj[key] = deepClone(value);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      debugger;</span><br><span class="line">      obj[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return obj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">deepClone(&#123; a: &#123; b: 10 &#125; &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/22/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E7%96%91%E9%97%AE%E8%A7%A3%E7%AD%94%E3%80%91%E3%80%91%E3%80%91%E3%80%91%E3%80%91/JS/main/</url>
    <content><![CDATA[// // // 一个数据里面去匹配 
// // // 字符的匹配
// // const text = 'hello world'
// // const reg = /helli/

// // const result = text.match(reg)

// // // console.log("result",result)


// // // 在一堆数据里面去筛选



// // // 浅拷贝
// // const shallowClone = (target) => {
// //     const result = {};
// //     for (let key in target) {
// //         result[key] = target[key]
// //     }

// //     return result
// // }



// // // 深拷贝
// // const deepClone = (target) => {   
// //     const obj = {}
// //     for (let key in target) {
// //         const value = target[key];
// //         if (isObj(target)) {
// //             obj[key] = deepClone(value)
// //         } else {
// //             obj[key] = value
// //         }
// //     }

// //     return obj
// // }



// // const list = [
// //     {name:"zhangsan",id:1},
// //     {name:"lisi",id:2},
// //     {name:"wangwu",id:3},
// //     {name:"wangwu",id:4},
// // ]


// // // 得分字段 score:10


// // const getName = function(item) {
// //     return item.name === 'wangwu'
// // };


// // // forEach 遍历


// // // 判断 数组是否满足条件

// // // every 所有条件满足返回true,否则返回false
// // const everyResult= list.every(getName)
// // console.log("everyResult",everyResult)

// // // some 任一条件满足返回true，否则返回false
// // const someResult= list.some(getName)
// // console.log("someResult",someResult)


// // const target = [];

// // list.forEach(item => {
// //     target.push({
// //         ...item,
// //         score:10
// //     })
// // })

// // return target

// // // map



// // // reduce

// // // 判断数据类型是否为Object
// const isObj = (target) => Object.prototype.toString.call(target) === '[object Object]'

// const deepClone = (target) => {   
//     const obj = {}
//     for (let key in target) {
//         const value = target[key];
//         debugger
//         if (isObj(value)) {
//             debugger
//             obj[key] = deepClone(value)
//         } else {
//             debugger
//             obj[key] = value
//         }
//     }

//     return obj
// }

// deepClone({a:{b:10}})]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/04/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E7%96%91%E9%97%AE%E8%A7%A3%E7%AD%94%E3%80%91%E3%80%91%E3%80%91%E3%80%91%E3%80%91/CSS/%E5%9B%9B%E7%82%B9%E9%AA%B0%E5%AD%90/%E5%9B%9B%E7%82%B9%E9%AA%B0%E5%AD%90/</url>
    <content><![CDATA[/* 容器 */
.box {
    width: 80px;
    height: 80px;
    border-radius: 8px;

    /* 阴影效果 */
    box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    padding: 12px 12px;
}

/*子容器*/
.box-content {
    display: flex;
    justify-content: space-between;
}


/* 骰子的点 */
.dot {
    width: 10px;
    height: 10px;
    background-color: #000;
    border-radius:50%;
}


]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/04/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E7%96%91%E9%97%AE%E8%A7%A3%E7%AD%94%E3%80%91%E3%80%91%E3%80%91%E3%80%91%E3%80%91/CSS/%E5%9B%9B%E7%82%B9%E9%AA%B0%E5%AD%90/%E5%9B%9B%E7%82%B9%E9%AA%B0%E5%AD%90/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="./main.css">
</head>
<body>
    <div class="box">
        <div class="box-content">
            <div class="dot"></div>
            <div class="dot"></div>
        </div>
        <div class="box-content">
            <div class="dot"></div>
            <div class="dot"></div>
        </div>
    </div>
</body>
</html>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/05/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E7%96%91%E9%97%AE%E8%A7%A3%E7%AD%94%E3%80%91%E3%80%91%E3%80%91%E3%80%91%E3%80%91/CSS/4.4%204.5position/3.%E7%B2%98%E6%80%A7%E5%AE%9A%E4%BD%8D/index/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="./main.css">
</head>

<body>
    <div class="box">
        <ul class="menu">
            <li>链接A</li>
            <li>链接B</li>
            <li>链接C</li>
        </ul>
        <div class="content">
            <div>内容很长</div>
            <div>内容很长</div>
            <div>内容很长</div>
            <div>内容很长</div>
            <div>内容很长</div>
            <div>内容很长</div>
            <div>内容很长</div>
            <div>内容很长</div>
            <div>内容很长</div>
            <div>内容很长</div>
            <div>内容很长</div>
            <div>内容很长</div>
            <div>内容很长</div>
            <div>内容很长</div>
            <div>内容很长</div>
            <div>内容很长</div>
            <div>内容很长</div>
            <div>内容很长</div>
            <div>内容很长</div>
            <div>内容很长</div>
        </div>
    </div>
</body>

</html>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/05/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E7%96%91%E9%97%AE%E8%A7%A3%E7%AD%94%E3%80%91%E3%80%91%E3%80%91%E3%80%91%E3%80%91/CSS/4.4%204.5position/3.%E7%B2%98%E6%80%A7%E5%AE%9A%E4%BD%8D/main/</url>
    <content><![CDATA[* {
    margin: 0;
    padding: 0;
}
.box {
    position: relative;
}
ul {
    list-style: none;
    display: flex;
    background-color: #09d;
    padding: 6px 6px;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
}
ul li {
    font-size: 14px;
    color: #fff;
}
ul li:not(:last-child) {
    margin-right: 8px;
}

.content div {
    margin: 60px 0;
}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/05/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E7%96%91%E9%97%AE%E8%A7%A3%E7%AD%94%E3%80%91%E3%80%91%E3%80%91%E3%80%91%E3%80%91/CSS/4.4%204.5position/1.%E5%9F%BA%E7%A1%80position/index/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="./main.css">
</head>

<body>
    <div class="container">
        <div class="box"></div>
    </div>

    <div class="grand">
        <div class="parent">
            <div class="child"></div>
        </div>
    </div>
</body>

</html>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/05/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E7%96%91%E9%97%AE%E8%A7%A3%E7%AD%94%E3%80%91%E3%80%91%E3%80%91%E3%80%91%E3%80%91/CSS/4.4%204.5position/1.%E5%9F%BA%E7%A1%80position/main/</url>
    <content><![CDATA[.container {
    background-color: #09d;
    width: 400px;
    height: 400px;
    margin: 20px 20px;
}

.box {
    width: 50px;
    height: 50px;
    background-color: red;
    position: absolute;
    top: 0;
    left: 0;
}

.grand {
    background-color: yellow;
    width: 600px;
    height: 600px;
    margin: 20px 20px;
    /* 实际上不会根据 .grand 做偏移，直接父元素是body，为什么不能根据body做偏移？*/
    position: relative;
    top: 0px;
}

.parent {
    background-color: blue;
    width: 300px;
    height: 300px;
    padding: 10px 10px;
    /**可以尝试给.parent 加上position: relative;看下效果**/
}

.child {
    width: 50px;
    height: 50px;
    position: absolute;
    top: 0;
    left: 0;
}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/05/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E7%96%91%E9%97%AE%E8%A7%A3%E7%AD%94%E3%80%91%E3%80%91%E3%80%91%E3%80%91%E3%80%91/CSS/4.4%204.5position/0.%E7%9B%92%E5%AD%90/index/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="./main.css">
</head>

<body>
    <div class="container">
        <div class="a">A</div>
        <div class="b">B</div>
    </div>
</body>

</html>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/05/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E7%96%91%E9%97%AE%E8%A7%A3%E7%AD%94%E3%80%91%E3%80%91%E3%80%91%E3%80%91%E3%80%91/CSS/4.4%204.5position/0.%E7%9B%92%E5%AD%90/main/</url>
    <content><![CDATA[.container {
    display: flex;
    justify-content: space-around;
}
.container .a,.container .b {
    width: 300px;
    height: 300px;
    background-color: #09d;
    font-size: 14px;
    color: #fff;
    padding: 12px 0;
    border: 2px solid red;
}

.container .a{
    box-sizing: border-box;
}


.container .b {
    box-sizing: content-box;
}]]></content>
  </entry>
  <entry>
    <title>JS学习笔记-4.10两道题（base gpt/答疑/BFE网站）</title>
    <url>/2023/04/15/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JS/Q4-JS-10%E4%B8%A4%E9%81%93%E9%A2%98%EF%BC%88BFE.dev%EF%BC%89/</url>
    <content><![CDATA[<h2 id="107-找到最大的差"><a href="#107-找到最大的差" class="headerlink" title="107.找到最大的差"></a>107.找到最大的差</h2><p><a href="https://bigfrontend.dev/zh/problem/Find-the-largest-difference">107. 找到最大的差 | BFE.dev - 前端刷题，准备前端面试拿到心仪的Offer。 (bigfrontend.dev)</a></p>
<p>原始思路：略（还是框在C语言和Python里了，实现方法很麻烦，很多东西JS已经给包装好了可以直接用）</p>
<h3 id="法一："><a href="#法一：" class="headerlink" title="法一："></a>法一：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 给定一个整数数组，任意选择两个数a和b，可以通过 Math.abs(a - b)求得其差值。</span><br><span class="line">// 请实现一个函数来求得这个数组的最大差值。</span><br><span class="line"></span><br><span class="line">// 解体思路其实就是最小值 - 最大值，再做绝对值的计算（因为差值是非0整数）</span><br><span class="line"></span><br><span class="line">// 如果不会使用sort方法进行排序，我们也可以自己实现一个sort方法</span><br><span class="line"></span><br><span class="line">// 默认的type为&quot;max&quot;,找出最大值,反之为&quot;max&quot;，找出最小值</span><br><span class="line">const findNum = (list, type = &quot;max&quot;) =&gt; &#123;</span><br><span class="line">  let target;</span><br><span class="line">  if (type === &quot;max&quot;) &#123;</span><br><span class="line">    list.forEach((item, index) =&gt; &#123;</span><br><span class="line">      if (index === 0) &#123;</span><br><span class="line">        // 开始循环，将首个数字作为基准，进行比较</span><br><span class="line">        target = item;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        if (item &gt; target) &#123;</span><br><span class="line">          // 替换target的值</span><br><span class="line">          target = item;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    list.forEach((item, index) =&gt; &#123;</span><br><span class="line">      if (index === 0) &#123;</span><br><span class="line">        target = item;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        if (item &lt; target) &#123;</span><br><span class="line">          target = item;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  return target;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 上述的代码可以优化一下语句，因为整体思路是一致的</span><br><span class="line">// 进行index === 0 赋值</span><br><span class="line">// 通过 type 判断是什么条件下，更新target的值</span><br><span class="line">const simplifyFindNum = (list, type = &quot;max&quot;) =&gt; &#123;</span><br><span class="line">  let target;</span><br><span class="line">  // 优化一下，type不为max或者min，不处理数据了。</span><br><span class="line">  // 避免进入forEach语句浪费性能</span><br><span class="line">  if (type !== &quot;min&quot; &amp;&amp; type !== &quot;max&quot;) return target;</span><br><span class="line"></span><br><span class="line">  list.forEach((item, index) =&gt; &#123;</span><br><span class="line">    if (index === 0) &#123;</span><br><span class="line">      // 开始循环，将首个数字作为基准，进行比较</span><br><span class="line">      target = item;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // 替换target的值</span><br><span class="line">      if (type === &quot;max&quot; &amp;&amp; item &gt; target) &#123;</span><br><span class="line">        target = item;</span><br><span class="line">      &#125;</span><br><span class="line">      if (type === &quot;min&quot; &amp;&amp; item &lt; target) &#123;</span><br><span class="line">        target = item;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  return target;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const largestDiff = (list) =&gt; &#123;</span><br><span class="line">    const maxNum = simplifyFindNum(list); // 获取数组最大值</span><br><span class="line">    const minNum = simplifyFindNum(list,&quot;min&quot;) // 获取数组最小值</span><br><span class="line">    const diff = Math.abs(minNum - maxNum) // 最小值 - 最大值，进行绝对值的计算</span><br><span class="line"></span><br><span class="line">    return diff</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const diff = largestDiff([-1, 2,3,10, 9]);</span><br></pre></td></tr></table></figure>

<h3 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 给定一个整数数组，任意选择两个数a和b，可以通过 Math.abs(a - b)求得其差值。</span><br><span class="line">// 请实现一个函数来求得这个数组的最大差值。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 解体思路其实就是最小值 - 最大值，再做绝对值的计算（因为差值是非0整数）</span><br><span class="line">const largestDiff = (list) =&gt; &#123;</span><br><span class="line">    const maxNum = Math.max.apply(Math,list); // 数组通过apply调用Math的max方法，获取数组最大值</span><br><span class="line">    const minNum = Math.min.apply(Math,list) // 同上，获取数组最小值</span><br><span class="line">    const diff = Math.abs(minNum - maxNum) // 最小值 - 最大值，进行绝对值的计算</span><br><span class="line"></span><br><span class="line">    return diff</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// largestDiff([-1, 2,3,10, 9])</span><br><span class="line"></span><br><span class="line">const diff = largestDiff([-1, 2,3,10, 9]);</span><br><span class="line">console.log(&quot;diff&quot;,diff)</span><br></pre></td></tr></table></figure>

<h3 id="法三："><a href="#法三：" class="headerlink" title="法三："></a>法三：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 给定一个整数数组，任意选择两个数a和b，可以通过 Math.abs(a - b)求得其差值。</span><br><span class="line">// 请实现一个函数来求得这个数组的最大差值。</span><br><span class="line"></span><br><span class="line">// 解体思路其实就是最小值 - 最大值，再做绝对值的计算（因为差值是非0整数）</span><br><span class="line">// 解题思路，通过sort方法进行排序</span><br><span class="line">const largestDiff = (list) =&gt; &#123;</span><br><span class="line">  const sortedList = list.sort((prev, next) =&gt; next - prev); // 按照从大到小排序</span><br><span class="line">  const maxNum = sortedList[0];</span><br><span class="line">  const minNum = sortedList[sortedList.length-1];</span><br><span class="line">  const diff = Math.abs(minNum - maxNum); // 最小值 - 最大值，进行绝对值的计算</span><br><span class="line">  return diff;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const diff = largestDiff([-1, 2, 3, 10, 9]);</span><br><span class="line">console.log(&quot;diff&quot;, diff);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="162-请找到未重复出现的整数"><a href="#162-请找到未重复出现的整数" class="headerlink" title="162. 请找到未重复出现的整数"></a>162. 请找到未重复出现的整数</h2><p><a href="https://bigfrontend.dev/zh/problem/find-the-single-integer">162. 请找到未重复出现的整数 | BFE.dev - 前端刷题，准备前端面试拿到心仪的Offer。 (bigfrontend.dev)</a></p>
<p>原始思路：哈希&#x2F;桶排（注意负数，需要下标映射）</p>
<p>claude思路：map（es6新特性，还没学到）</p>
<h3 id="原始方法（动态数组未映射）："><a href="#原始方法（动态数组未映射）：" class="headerlink" title="原始方法（动态数组未映射）："></a>原始方法（动态数组未映射）：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const arr = [10, 2, 2 , 1, 0, 0, 10]</span><br><span class="line">function findSingle(arr) &#123;</span><br><span class="line">  //js的除法是向下取整吗？（是的）</span><br><span class="line">  //哈希思想，需要映射数据，麻烦。const countArr=[arr.length/2+1];</span><br><span class="line">  //桶排思想，空间复杂度高，方便。但出现负数怎么办？（也要映射，整体前移就好）</span><br><span class="line">  //js数组不是动态数组吗(是)，不能自动扩容直接下标访问吗（能下标访问，但也要初始化，好像不能自动扩容），需要遍历出最大数值再生成数组是吗（可以不需要，用的话最好，用完了直接前移映射就完了）</span><br><span class="line">  </span><br><span class="line">  const countArr=[]</span><br><span class="line">  for(let i=0;i&lt;arr.length;++i)&#123;</span><br><span class="line">  	if(!countArr[arr[i]])&#123;</span><br><span class="line">  	countArr[arr[i]]=0;</span><br><span class="line">  	&#125;</span><br><span class="line">    countArr[arr[i]]++;</span><br><span class="line">    console.log(countArr[arr[i]])</span><br><span class="line">  &#125;</span><br><span class="line">  for(let i=0;i&lt;countArr.length;++i)&#123;</span><br><span class="line">    if(countArr[i]===1)&#123;</span><br><span class="line">      return countArr[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">findSingle(arr)</span><br></pre></td></tr></table></figure>



<h3 id="法一：定长数组桶排映射"><a href="#法一：定长数组桶排映射" class="headerlink" title="法一：定长数组桶排映射"></a>法一：定长数组桶排映射</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用数组解决第一个题目(找出数组中只出现一次的数)的最优解是:</span><br><span class="line">const arr = [10, 2, 2 , 1, 0, 0, 10, -5, -2];</span><br><span class="line"></span><br><span class="line">function findSingle(arr) &#123;</span><br><span class="line">  let max = 0;</span><br><span class="line">  let min = 0;</span><br><span class="line">  for (let num of arr) &#123;</span><br><span class="line">    max = Math.max(max, num);</span><br><span class="line">    min = Math.min(min, num);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  let countArr = new Array(max - min + 1).fill(0);</span><br><span class="line">  </span><br><span class="line">  for (let num of arr) &#123;</span><br><span class="line">    countArr[num - min]++; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  for (let i = 0; i &lt; countArr.length; i++) &#123;</span><br><span class="line">    if (countArr[i] === 1) return i + min;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">findSingle(arr);  // -5</span><br><span class="line">解释:</span><br><span class="line">1. 这种方法先遍历数组一次,得到最大值 max 和最小值 min。</span><br><span class="line">2. 初始化 countArr 长度为 max - min + 1,正好可以容纳所有数值。</span><br><span class="line">3. 第二次遍历,使用 num - min 作为 countArr 下标,统计每个数出现次数。</span><br><span class="line">4. 找到次数为 1 的下标后,返回 i + min 恢复真实数值。</span><br><span class="line">5. 这种方法空间复杂度稳定在数组范围内,可以容纳任意范围的数,包括负数。</span><br><span class="line">这种方法相比其他数组方法有以下优点:</span><br><span class="line">1. 空间复杂度稳定,不会随数组最大值变化。</span><br><span class="line">2. 可以容纳任意范围的数,通过映射到数组中。</span><br><span class="line">3. 代码简洁高效。只需遍历两次数组。</span><br><span class="line">总结:</span><br><span class="line">相比动态数组多次判断是否初始化的方式,这个方法通过一次遍历得知数组范围,初始化恰当大小的数组,使空间复杂度稳定,且代码更简洁高效。</span><br><span class="line">所以如果要我选最优的数组解法,我会选择这个方法。当然,Map 方法由于内部实现原因,在大多数情况下仍然更为高效和优秀。但是如果考虑到兼容性,这个数组方法也是一个不错的选择。</span><br></pre></td></tr></table></figure>

<h3 id="法二：map-hash"><a href="#法二：map-hash" class="headerlink" title="法二：map-hash"></a>法二：map-hash</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 通过Map做映射关系</span><br><span class="line">// Map和Object的区别，Object的key需要为字符串，如果不是，会转化为字符串类型</span><br><span class="line">// Map的key可以为任意类型</span><br><span class="line">// Map使用set（写）和get（读） has(判断是否有映射关系)</span><br><span class="line">// https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map</span><br><span class="line"></span><br><span class="line">const findSingle = (list) =&gt; &#123;</span><br><span class="line">  const hash = new Map(); // key为出现的数字，value为出现的次数</span><br><span class="line">  list.forEach((num) =&gt; &#123;</span><br><span class="line">    const val = hash.get(num);</span><br><span class="line">    // 没有映射关系，说明该数字首次出现</span><br><span class="line">    if (!hash.has(num)) &#123;</span><br><span class="line">      hash.set(num, 1); // 首次出现</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      hash.set(num, val + 1); // 出现次数+1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // hash是Map类型，是可迭代对象，可以直接使用forEach进行遍历</span><br><span class="line">  // 遍历哈希表(hash),找出出现次数(value)为1的数字(key)</span><br><span class="line">  // 如果这个题目存在多个出现次数为1的数字，可以考虑将target初始化为空数组，每次找出对应的数字做push操作</span><br><span class="line">  let target;</span><br><span class="line">  hash.forEach((value, key) =&gt; &#123;</span><br><span class="line">    if (value === 1) &#123;</span><br><span class="line">      target = key;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return target</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">findSingle([10, 2, 2, 1, 0, 0, 10]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="法三：-1"><a href="#法三：-1" class="headerlink" title="法三："></a>法三：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 给定一个整数数组，除了一个数字之外，其余的数字均出现了两次。请找出这个只出现了一次的数。</span><br><span class="line">// const arr = [10, 2, 2 , 1, 0, 0, 10]</span><br><span class="line">// findSingle(arr) // 1</span><br><span class="line"></span><br><span class="line">// 思路，通过哈希表去实现（前端js没有对应的数据结构，但是我们一般可以通过Object的key-value的映射关系去实现）</span><br><span class="line">// 其中 key 代表 出现的数字,value 代表该次数出现的次数</span><br><span class="line">// 最终将对应的Object取出value为1的数字</span><br><span class="line"></span><br><span class="line">const findSingle = (list) =&gt; &#123;</span><br><span class="line">    const hash = &#123;&#125;; // key为出现的数字，value为出现的次数</span><br><span class="line">    list.forEach((num) =&gt; &#123;</span><br><span class="line">        const val = hash[num];</span><br><span class="line">        // 没有映射关系，说明该数字首次出现</span><br><span class="line">        if (!val) &#123;</span><br><span class="line">            hash[num] = 1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            hash[num] = val +1; // 出现次数+1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 遍历哈希表(hash),找出出现次数(value)为1的数字(key)</span><br><span class="line">    // 如果这个题目存在多个出现次数为1的数字，可以考虑将target初始化为空数组，每次找出对应的数字做push操作</span><br><span class="line">    let target;</span><br><span class="line">    for (const key in hash) &#123;</span><br><span class="line">        // 找出出现次数为1的数据</span><br><span class="line">        if (hash[key] === 1) &#123;</span><br><span class="line">            // target = key</span><br><span class="line">            target = Number(key)</span><br><span class="line">            // 这边有一个陷阱，key在存储时会被转成string类型，对应的数字的number类型，需要转化为Number</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    return target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">findSingle([10, 2, 2 , 1, 0, 0, 10])</span><br></pre></td></tr></table></figure>





<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>思想钢印：再也不要想最优解的事了，下意识也不要想。</p>
<p>先实现再迭代优化。</p>
<p>不要纠结思路不是最优解，思路没问题也写得费劲说明需要熟悉语法。</p>
<h2 id="延申："><a href="#延申：" class="headerlink" title="延申："></a>延申：</h2><p>OK,让我们重新开始吧!到目前为止,我们探讨了几种解决这道题的思路和方法:</p>
<ol>
<li><p>定长数组:- 空间复杂度低但需要知道最大值,否则容易越界<br> - 无法容纳负数<br> - 适用于最大值已知且较小的情况</p>
</li>
<li><p>动态数组:- 可以自动扩容,无最大值限制,但是空间复杂度随最大值变化<br> - 需要判断数组元素是否存在,如果不存在先赋默认值<br> - 可以通过映射容纳负数<br> - 适用于最大值较大但性能要求不高的情况</p>
</li>
<li><p>Map:- key 可以是任意值,无最大值和负数限制<br> - 空间复杂度稳定,自动扩容<br> - 使用方便,get() 设置默认值,遍历使用 for..of<br> - 是解决这个问题的最通用高效数据结构</p>
</li>
</ol>
<p>  那么,如果让您重新解答这个问题,您会选择哪种思路和方法呢?除了上述几种,您还有其他的好想法吗?</p>
<p>  这里是一个新的问题供您思考和解答:输入一个整数数组,找到两个数和为特定值的下标。例如:输入: [3, 2, 5, 4, 1], target &#x3D; 7<br>  输出: [1, 3] (nums[1] + nums[3] &#x3D; 2 + 5 &#x3D; 7)</p>
<p>  您会如何解决这个问题?欢迎提出您的思路和代码实现,我们可以就此进行进一步探讨。</p>
]]></content>
      <categories>
        <category>code</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/22/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JS/VSCode%E4%BB%A3%E7%A0%81/test/</url>
    <content><![CDATA[let arr = ['a', 'b', 'c', 'A', 'B', 'A'];
let findA = (arr) => {
  const result = [];
  for (value of arr) {
    if (value === 'A') {
      result.push(value);
    }
  }
  return result;
};
findA(arr);
console.log(result);
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/24/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E7%96%91%E9%97%AE%E8%A7%A3%E7%AD%94%E3%80%91%E3%80%91%E3%80%91%E3%80%91%E3%80%91/JS/%E4%B8%A4%E9%81%93%E9%A2%98/01-custom-sort/</url>
    <content><![CDATA[// 给定一个整数数组，任意选择两个数a和b，可以通过 Math.abs(a - b)求得其差值。
// 请实现一个函数来求得这个数组的最大差值。

// 解体思路其实就是最小值 - 最大值，再做绝对值的计算（因为差值是非0整数）

// 如果不会使用sort方法进行排序，我们也可以自己实现一个sort方法

// 默认的type为"max",找出最大值,反之为"max"，找出最小值
const findNum = (list, type = "max") => {
  let target;
  if (type === "max") {
    list.forEach((item, index) => {
      if (index === 0) {
        // 开始循环，将首个数字作为基准，进行比较
        target = item;
      } else {
        if (item > target) {
          // 替换target的值
          target = item;
        }
      }
    });
  } else {
    list.forEach((item, index) => {
      if (index === 0) {
        target = item;
      } else {
        if (item < target) {
          target = item;
        }
      }
    });
  }
  return target;
};

// 上述的代码可以优化一下语句，因为整体思路是一致的
// 进行index === 0 赋值
// 通过 type 判断是什么条件下，更新target的值
const simplifyFindNum = (list, type = "max") => {
  let target;
  // 优化一下，type不为max或者min，不处理数据了。
  // 避免进入forEach语句浪费性能
  if (type !== "min" && type !== "max") return target;

  list.forEach((item, index) => {
    if (index === 0) {
      // 开始循环，将首个数字作为基准，进行比较
      target = item;
    } else {
      // 替换target的值
      if (type === "max" && item > target) {
        target = item;
      }
      if (type === "min" && item < target) {
        target = item;
      }
    }
  });
  return target;
};

const largestDiff = (list) => {
    const maxNum = simplifyFindNum(list); // 获取数组最大值
    const minNum = simplifyFindNum(list,"min") // 获取数组最小值
    const diff = Math.abs(minNum - maxNum) // 最小值 - 最大值，进行绝对值的计算

    return diff
}

const diff = largestDiff([-1, 2,3,10, 9]);]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/24/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E7%96%91%E9%97%AE%E8%A7%A3%E7%AD%94%E3%80%91%E3%80%91%E3%80%91%E3%80%91%E3%80%91/JS/%E4%B8%A4%E9%81%93%E9%A2%98/01-sort/</url>
    <content><![CDATA[// 给定一个整数数组，任意选择两个数a和b，可以通过 Math.abs(a - b)求得其差值。
// 请实现一个函数来求得这个数组的最大差值。

// 解体思路其实就是最小值 - 最大值，再做绝对值的计算（因为差值是非0整数）
// 解题思路，通过sort方法进行排序
const largestDiff = (list) => {
  const sortedList = list.sort((prev, next) => next - prev); // 按照从大到小排序
  const maxNum = sortedList[0];
  const minNum = sortedList[sortedList.length-1];
  const diff = Math.abs(minNum - maxNum); // 最小值 - 最大值，进行绝对值的计算
  return diff;
};

const diff = largestDiff([-1, 2, 3, 10, 9]);
console.log("diff", diff);
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/24/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E7%96%91%E9%97%AE%E8%A7%A3%E7%AD%94%E3%80%91%E3%80%91%E3%80%91%E3%80%91%E3%80%91/JS/%E4%B8%A4%E9%81%93%E9%A2%98/01-math/</url>
    <content><![CDATA[// 给定一个整数数组，任意选择两个数a和b，可以通过 Math.abs(a - b)求得其差值。
// 请实现一个函数来求得这个数组的最大差值。


// 解体思路其实就是最小值 - 最大值，再做绝对值的计算（因为差值是非0整数）
const largestDiff = (list) => {
    const maxNum = Math.max.apply(Math,list); // 数组通过apply调用Math的max方法，获取数组最大值
    const minNum = Math.min.apply(Math,list) // 同上，获取数组最小值
    const diff = Math.abs(minNum - maxNum) // 最小值 - 最大值，进行绝对值的计算

    return diff
}





// largestDiff([-1, 2,3,10, 9])

const diff = largestDiff([-1, 2,3,10, 9]);
console.log("diff",diff)]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/24/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E7%96%91%E9%97%AE%E8%A7%A3%E7%AD%94%E3%80%91%E3%80%91%E3%80%91%E3%80%91%E3%80%91/JS/%E4%B8%A4%E9%81%93%E9%A2%98/02-map-hash/</url>
    <content><![CDATA[// 通过Map做映射关系
// Map和Object的区别，Object的key需要为字符串，如果不是，会转化为字符串类型
// Map的key可以为任意类型
// Map使用set（写）和get（读） has(判断是否有映射关系)
// https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map

const findSingle = (list) => {
  const hash = new Map(); // key为出现的数字，value为出现的次数
  list.forEach((num) => {
    const val = hash.get(num);
    // 没有映射关系，说明该数字首次出现
    if (!hash.has(num)) {
      hash.set(num, 1); // 首次出现
    } else {
      hash.set(num, val + 1); // 出现次数+1
    }
  });

  // hash是Map类型，是可迭代对象，可以直接使用forEach进行遍历
  // 遍历哈希表(hash),找出出现次数(value)为1的数字(key)
  // 如果这个题目存在多个出现次数为1的数字，可以考虑将target初始化为空数组，每次找出对应的数字做push操作
  let target;
  hash.forEach((value, key) => {
    if (value === 1) {
      target = key;
    }
  });

  return target
};

findSingle([10, 2, 2, 1, 0, 0, 10]);
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/24/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E3%80%90%E7%96%91%E9%97%AE%E8%A7%A3%E7%AD%94%E3%80%91%E3%80%91%E3%80%91%E3%80%91%E3%80%91/JS/%E4%B8%A4%E9%81%93%E9%A2%98/02-obj-hash/</url>
    <content><![CDATA[// 给定一个整数数组，除了一个数字之外，其余的数字均出现了两次。请找出这个只出现了一次的数。
// const arr = [10, 2, 2 , 1, 0, 0, 10]
// findSingle(arr) // 1

// 思路，通过哈希表去实现（前端js没有对应的数据结构，但是我们一般可以通过Object的key-value的映射关系去实现）
// 其中 key 代表 出现的数字,value 代表该次数出现的次数
// 最终将对应的Object取出value为1的数字

const findSingle = (list) => {
    const hash = {}; // key为出现的数字，value为出现的次数
    list.forEach((num) => {
        const val = hash[num];
        // 没有映射关系，说明该数字首次出现
        if (!val) {
            hash[num] = 1;
        } else {
            hash[num] = val +1; // 出现次数+1
        }
    })

    // 遍历哈希表(hash),找出出现次数(value)为1的数字(key)
    // 如果这个题目存在多个出现次数为1的数字，可以考虑将target初始化为空数组，每次找出对应的数字做push操作
    let target;
    for (const key in hash) {
        // 找出出现次数为1的数据
        if (hash[key] === 1) {
            // target = key
            target = Number(key)
            // 这边有一个陷阱，key在存储时会被转成string类型，对应的数字的number类型，需要转化为Number
        }
    }
        
    return target
}

findSingle([10, 2, 2 , 1, 0, 0, 10])]]></content>
  </entry>
</search>
